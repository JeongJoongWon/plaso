diff --git a/plaso/formatters/__init__.py b/plaso/formatters/__init__.py
index cf9c871..f39389e 100644
--- a/plaso/formatters/__init__.py
+++ b/plaso/formatters/__init__.py
@@ -122,3 +122,8 @@ from plaso.formatters import xchatlog
 from plaso.formatters import xchatscrollback
 from plaso.formatters import zeitgeist
 from plaso.formatters import zsh_extended_history
+from plaso.formatters import wintimeline
+from plaso.formatters import winiconcache
+from plaso.formatters import winiconcache_name
+from plaso.formatters import winsearchdb
+from plaso.formatters import winsuperfetch
diff --git a/plaso/formatters/olecf.py b/plaso/formatters/olecf.py
index afab2f9..a05cf53 100644
--- a/plaso/formatters/olecf.py
+++ b/plaso/formatters/olecf.py
@@ -20,6 +20,26 @@ class OLECFItemFormatter(interface.EventFormatter):
   SOURCE_LONG = 'OLECF Item'
   SOURCE_SHORT = 'OLECF'
 
+class IJBOLECFThumbsnailFormatter(interface.ConditionalEventFormatter):
+
+  DATA_TYPE = 'windows:thumbnail:execution'
+
+  FORMAT_STRING_PIECES = [
+      'Thumbnail SHA1: {thumbs_sha1}',
+      'Thumbnail Info: {thumbs_info}'
+  ]
+
+  SOURCE_LONG = 'WinThumbnail'
+  SOURCE_SHORT = 'LOG'
+
+  def GetMessages(self, formatter_mediator, event):
+      if self.DATA_TYPE != event.data_type:
+          raise errors.WrongFormatter('Unsupported data type: {0:s}.'.format(
+              event.data_type))
+
+      event_values = event.CopyToDict()
+      event_values['thumbs_info'] = event_values.get('thumbs_info', None)
+      return self._ConditionalFormatMessages(event_values)
 
 class OLECFDestListEntryFormatter(interface.ConditionalEventFormatter):
   """Formatter for an OLECF DestList stream event."""
@@ -183,4 +203,4 @@ class OLECFSummaryInfoFormatter(interface.ConditionalEventFormatter):
 
 manager.FormattersManager.RegisterFormatters([
     OLECFItemFormatter, OLECFDestListEntryFormatter,
-    OLECFDocumentSummaryInfoFormatter, OLECFSummaryInfoFormatter])
+    OLECFDocumentSummaryInfoFormatter, OLECFSummaryInfoFormatter, IJBOLECFThumbsnailFormatter])
diff --git a/plaso/formatters/winiconcache.py b/plaso/formatters/winiconcache.py
new file mode 100644
index 0000000..3c2ef93
--- /dev/null
+++ b/plaso/formatters/winiconcache.py
@@ -0,0 +1,27 @@
+# -*- coding: utf-8 -*-
+"""The Windows Iconcache event formatter."""
+
+from __future__ import unicode_literals
+
+from plaso.formatters import interface
+from plaso.formatters import manager
+
+'''class WindowsIconcacheFormatter(interface.ConditionalEventFormatter):'''
+class WindowsIconcacheFormatter(interface.ConditionalEventFormatter):
+  """Formatter for a Windows Iconcache event."""
+
+  DATA_TYPE = 'windows:iconcache:execution'
+
+  FORMAT_STRING_PIECES = [
+      'Iconcache Info: {icon_info}'
+      ]
+
+  SOURCE_LONG = 'WinIconcache'
+  SOURCE_SHORT = 'LOG'
+
+  def GetMessages(self, formatter_mediator, event):
+      event_values = event.CopyToDict()
+      event_values['icon_info'] = event_values.get('icon_info', None)
+      return self._ConditionalFormatMessages(event_values)
+
+manager.FormattersManager.RegisterFormatter(WindowsIconcacheFormatter)
diff --git a/plaso/formatters/winiconcache_name.py b/plaso/formatters/winiconcache_name.py
new file mode 100644
index 0000000..461a921
--- /dev/null
+++ b/plaso/formatters/winiconcache_name.py
@@ -0,0 +1,26 @@
+# -*- coding: utf-8 -*-
+"""The Windows IconCache.db event formatter."""
+
+from __future__ import unicode_literals
+
+from plaso.formatters import interface
+from plaso.formatters import manager
+
+class WindowsIconcacheNameFormatter(interface.ConditionalEventFormatter):
+  """Formatter for a Windows IconCache.db Name."""
+
+  DATA_TYPE = 'windows:iconcache:name:execution'
+
+  FORMAT_STRING_PIECES = [
+      'Iconcache Info: {icon_info}'
+      ]
+
+  SOURCE_LONG = 'WinIconCacheName'
+  SOURCE_SHORT = 'LOG'
+
+  def GetMessages(self, formatter_mediator, event):
+      event_values = event.CopyToDict()
+      event_values['icon_info'] = event_values.get('icon_info', None)
+      return self._ConditionalFormatMessages(event_values)
+
+manager.FormattersManager.RegisterFormatter(WindowsIconcacheNameFormatter)
diff --git a/plaso/formatters/winsearchdb.py b/plaso/formatters/winsearchdb.py
new file mode 100644
index 0000000..edfd75c
--- /dev/null
+++ b/plaso/formatters/winsearchdb.py
@@ -0,0 +1,42 @@
+# -*- coding: utf-8 -*-
+"""The Windows Search DB event formatter."""
+
+from __future__ import unicode_literals
+
+from plaso.formatters import interface
+from plaso.formatters import manager
+
+import sys
+
+class WindowsSearchdbFormatter(interface.ConditionalEventFormatter):
+  """Formatter for a Windows Search DB event."""
+
+  DATA_TYPE = 'windows:searchdb:execution'
+
+  FORMAT_STRING_PIECES = [
+      'ID: {ID}',
+      'Name: {Name}',
+      'Owner: {Owner}',
+      'IURL: {IURL}',
+      'IAttr: {IAttr}',
+      'IsFolder: {IsFolder}',
+      'Size: {Size}',
+      'GatherDT: {GatherDT}',
+      'ModifyDT: {ModifyDT}',
+      'AccessDT: {AccessDT}',
+      'SUMMARY: {SUMMARY}',
+      'Title: {Title}',
+      'Subject: {Subject}',
+      'Comment: {Comment}',
+      'Label: {Label}',
+      'Text: {Text}',
+      'APPName: {APPName}',
+
+      ]
+
+  SOURCE_LONG = 'WinSearchDB'
+  SOURCE_SHORT = 'LOG'
+
+  FORMAT_LIST = ['ID', 'Name', 'Owner', 'IURL', 'IAttr', 'IsFolder', 'Size', 'GatherDT', 'CreateDT', 'ModifyDT', 'AccessDT', 'SUMMARY', 'Title', 'Subject', 'Comment', 'Label', 'Text', 'APPName']
+
+manager.FormattersManager.RegisterFormatter(WindowsSearchdbFormatter)
diff --git a/plaso/formatters/winsuperfetch.py b/plaso/formatters/winsuperfetch.py
new file mode 100644
index 0000000..cb5151a
--- /dev/null
+++ b/plaso/formatters/winsuperfetch.py
@@ -0,0 +1,28 @@
+# -*- coding: utf-8 -*-
+"""The Windows Superfetch event formatter."""
+
+from __future__ import unicode_literals
+
+from plaso.formatters import interface
+from plaso.formatters import manager
+
+class WindowsSuperfetchFormatter(interface.ConditionalEventFormatter):
+  """Formatter for a Windows Superfetch event."""
+
+  DATA_TYPE = 'windows:superfetch:execution'
+
+  FORMAT_STRING_PIECES = [
+      'FILE INFO: {file_info}',
+      'SUPERFETCH INFO:  {superfetch_info}'
+      ]
+
+  SOURCE_LONG = 'WinSuperfetch'
+  SOURCE_SHORT = 'LOG'
+
+  def GetMessages(self, formatter_mediator, event):
+      event_values = event.CopyToDict()
+      event_values['file_info'] = event_values.get('file_info', None)
+      event_values['superfetch_info'] = event_values.get('superfetch_info', None)
+      return self._ConditionalFormatMessages(event_values)
+
+manager.FormattersManager.RegisterFormatter(WindowsSuperfetchFormatter)
diff --git a/plaso/formatters/wintimeline.py b/plaso/formatters/wintimeline.py
new file mode 100644
index 0000000..852fa52
--- /dev/null
+++ b/plaso/formatters/wintimeline.py
@@ -0,0 +1,46 @@
+# -*- coding: utf-8 -*-
+"""The Windows Timeline event formatter."""
+
+from __future__ import unicode_literals
+
+from plaso.formatters import interface
+from plaso.formatters import manager
+
+class WindowsTimelineActivityEventFormatter(interface.ConditionalEventFormatter):
+  """Formatter for Activity Table Windows 10 Timeline events."""
+
+  DATA_TYPE = 'windows:timeline:activity'
+
+  FORMAT_STRING_PIECES = [
+      'Timeline Data: {timeline_data}'
+  ]
+
+  SOURCE_LONG = 'Windows Timeline - Activity'
+  SOURCE_SHORT = 'Windows Timeline'
+
+class WindowsTimelineActivityOperationEventFormatter(interface.ConditionalEventFormatter):
+    """Formatter for Activity Operation Table Windows 10 Timeline database rows"""
+
+    DATA_TYPE =  'windows:timeline:activityoperation'
+
+    FORMAT_STRING_PIECES = [
+        'Timeline Data: {timeline_data}'
+    ]
+
+    SOURCE_LONG = 'Windows Timeline - ActivityOperation'
+    SOURCE_SHORT = 'windows Timeline'
+
+class WindowsTimelineActivityPackageIdEventFormatter(interface.ConditionalEventFormatter):
+  """Formatter for Activitiy PackagedID Table Windows 10 Timeline events."""
+
+  DATA_TYPE = 'windows:timeline:activitypackageid'
+
+  FORMAT_STRING_PIECES = [
+      'Timeline Data: {timeline_data}'
+  ]
+
+  SOURCE_LONG = 'Windows Timeline - Activity PackageID'
+  SOURCE_SHORT = 'Windows Timeline'
+
+manager.FormattersManager.RegisterFormatters([
+    WindowsTimelineActivityPackageIdEventFormatter, WindowsTimelineActivityOperationEventFormatter, WindowsTimelineActivityEventFormatter])
diff --git a/plaso/parsers/MSCompression.dll b/plaso/parsers/MSCompression.dll
new file mode 100644
index 0000000000000000000000000000000000000000..f13b898747e6f0d17668fe66ee3f453c4ebb0093
GIT binary patch
literal 259072
zcmeFa4Rlo1xi@|$Gf4&*ID<?vN|Y$Eg2T0ua1|WXe9Z(g0~11Kw35WOn#R-*OlAUB
z5&|b9IoX_+w$jr3+FN_C_pP_3z0@KEMaT!u1Vju-YgB5Zm)e7qYEUi)$YtK&v(K5Y
zBp}}ZyZ&qa*ZOC{oOAZsAJ2aFv!DHZ?S0%|-z*pfK``NeBq9jyxYA!9|NVj=gCI<q
z`SKKD$As6fYd4g<e%*?ihwHOe)jj_0x^Fz1^{sC__Sob8tZzP)RTp?H>*2?;ik6jS
zJ^J{A58XU@^2BVt>TdJV3mYHa^PA}Z55#@jWITT$?%sAYzqW7t0j_^E?A!K3e%-z8
zMSgAHww1qsbz2Lr8y|l4H%D;2Qg~@wGr#WH_B6j1{zkj*<<H9>{#FgO744bFDF`Ko
zRAGUct&FA(2r1W1GEA`wze*8=73d`Xu74jtR{ZZk8r{)7Zqw)qf6=Ru156S!@s}dx
zp)fL1-q=-p?CUZL&jRs}^caQN^m@oB3}{W!Q^KD~*aT!*e_<3BB&3eMU5xj6iHU%7
z?zr`7nQrz!w8oEH)4!t=1RwQPhdWwLmLNQEbKQgA@P9)PuAYp_sP9v7{VlEue|dtC
zce9pFXt@S2`p_||a}QBg{4WnR++0^*_bnvxzM{`Sk{}!!lP~Y)x`!Tl92u$a9I&tA
za(GO>0($%Z|NYM~uzUDDqg6G$EC@9_+Ec9Rx?_THUw5scR;bAsFj{x_{spgp>A~y0
z^!fq*+Uu(|sJS5S`}R>LHpJdg3zrK*t>9&Egi<N(nJ(mh{4SL1rE;^WTvcWF?oQNq
zaw(eI-9a_C?naKIlp~GTTyvc6&%H@N)O<+yA8YqRbpHXr-~HVCD7lnMo}<)5JoS+F
zSI!2dK{IojMPG-Posylyir3WR95F0coWr5C=Q~rZo@((=DQfsHf*|cTvz|)!*NQHa
z5HF8nD6F_l9xXqz3#d@)FnQFMVx{yl>~2$g^D{<k@PO#->^^h|?V~&j>usqY@)D*q
zPP4&3sn+6E?>`i6n5t;c`@7MKa?wA6|HN=4kP!*kA^~e8V2K3G>YpO`TV;ymsP`{2
z2-1Owv_CW0AujF&><NWY3Cfo$PMfDzh?jl=g{A$r`zWhc|L7bI$id8LK{{Y4Ro`@6
zybUUUS@>n|@ot9FwgcsHEGzk@kb#eadI&l0ONO4qR~xCh>31pC2Y*3S?U4qp-e1)8
z8Lhd0@F>pH5B@8qVqgP9wSwBPOAtcN5lRZVIQQytnQ?2OlpdE=$n6NZZ1hkqyE0@~
zCN5dBE4$S-TXxNDb>(1OK^$qp4*#_tulgS7lG6lppMFrDOy%y=$)n~O46@=rp`O1G
ziPVgA;=y^sqy7^{H#&6u3j6?mPaOX7fcL8V&=PaamG+y^^aPJuUI3KuH-%htsZr+2
z){^gxCUY*xTo`o9ePc8^Q_F4BlC9BX-ecynXvt^u^}0D$m`iW+11*^y)-k89--(u!
zJKn9+^F`;wza38=<%F4}p#}IL(#M<#rJVpJU=EnPs_#JJ97sgqP$b`!NE1?TWJv7H
zH*vW{ETSov^cONvt?^V1|EuEoA4@xTn}P@YQ<)*+F#|znW@Wv#hR78OT~C-*?O5)F
zc=d!2CEx53cRI};^|4oZHxfII_hqcYl6%z40%rSrzTAi-U=fSo3BK#U76oOe1!dDb
zYA%YlrWG@%1qA1EoDZl~m?ZaCbeYG{Q@p*$_x_LDn~$QG*<PE|9PbhO!^+LfZLuFL
zT@IF_&iFH^grK%mbXf$#2hSe`dsKd#8U}?#^ILg-&;oN=LuscmaKVnIiIE12T7H*7
z2v2-+65XeUsF$WlgH62?$uuoE>F6vp!>eZS9K^fhfa+91?K{n^+#*}$#ilXnBzT!Y
zDIW$C^MbQ3k9aIBU}1|*%xeNKcPudlL?$@W0u#0y_|!KG^E&h!YJ$q=n`m%Rz)@fd
zOkrsbrzMb%?9>`ECpC)vH8o)IHP874Ys~`OsSAEj{lnxGTf(;)XlVg@WpgOcL>Wi%
z^D=fEpkhe?8p_#sO!6byCeC7>i<5YnG+3jPx$GSD`r>?2c0VJ#cd$Y$er0ES$oT>>
z3~7zc%2ruJ&TaHmm&ydZlP*~6zam<}PPd6j-A6y-ROi-kExXW;<zb!lhUgd;i-(nE
zhV^GjysNuW$)6=1j5s<)SC>aE`vV^~-YrZTW$`TO{Q)_DBs>k%ZE~ratG#Ev;gsA1
zipwCow|XLh_EPo0I~*T!<2F`kX7^a+zzec-hwKKpoU;ed_?;|d@2O3x*#Raj4X4yy
zr?^t2h*fsJpg6aRh0d+UA+Kr};Pv#lQiSl-9_J=Oac_+THr1x6p>pDE?UBF^8vA1y
zbmIC3#eGa_RIMzqjrE9y?qjU+1S@~R-sLNG46nXkG2ITF#G6p&TfOSf_-bzHG2JPI
ztv${iS{plj>VwooxhkEr*3D(^V+E{p{W*>#8@qc%>Y8QmlsZPF;hEyb!$9ovQgy|C
zg4Qfr-CGs+9u|1!GqK6}0%Q&6A#hu%vCmp9Huc6N5SK|T?A6DQqzi47Fw&cQoLdEt
zIMuyJcH{mTgF5vs0;La?Yl|<zG@H5i#9^`~!?d~(@a*sA@UVL@t>mQ^j6*1G4`!&m
z)SAE<t16j$F!y!UgWTYf>_6`Z6Hq6+41#LL51${S<exuLy;1qc2Kh&CNSnOv?HJNz
z{t9m4m4*$0uQ0c{W<Or5Z-Lq{P58|6sNcb&k5{PFqrRH(hI0VSH+{XqN@Mn_fA7+|
z6=fB8kM+4fK6#|Utk~QcDodO^>}|Q?7=S@rrHZ?s9u}}wCiQN#sW|&}>hySh>@~G~
z1Oim~ppNSPi=#RRsJ>5wDP+upkj%Q1(0e~~4*|bJogBYlDC+hi!fW&o@Piou8PZ^;
zG;pPyZ((;^y|a4#=H^C=;J+fAt~0AzNaN~xApcCK$)CRWIPe&@p6N{4dm4A`mMuoB
zSTv**Wt(aZ9@TrEBt)}Pl5K$))K4N#OBY0(qHL>2-HA$~%@hA4<_8k>v9n4sWaM;`
z=14{+iCKLHVtgo_2nY2+1d)p^VD@scm4!m-)ZeOPp8ZAj6<w;nUNrM1>pKl);Ue&j
zs!8jzMlZsPF?n=6c}^z<Zz!#V)Sk7R!AD7cfmf~R(1|c%sCBs#^+U!N_mVi_n@Fpj
zSsIRrTRQZ0;G+CL5C^Gj{U8=uVJu`J=OEIf60%ZnmY&MAhJqPj=lg#Q0w}E4_+W50
zQfdVZDoT*R<5AqLA!lnJGKHKi_adcQoEFSNE_DVBCg`sbX^huYE3iCMs3nzZ9Y6ss
z6)UQezgcdXY(ui5Py=dSo*<Og-r&_9!GTR`#a)6B><HMkLW)9_@CuE+xg87h7l_Yv
zD5hWv8k>}F@u(MQn(<b@uuW8-s_?9`Q;n5jn^HY!0xMD~34o?jtx3`W)Nd3(L~;(|
zK0VflGcA*|kv}bv%{EP@l1h0Wlw+vJ4F9o^%tm&zmOXqGM_?avMMBPFbio4Jj|>w4
z?WmUZGAz(%4D^3tXLJNUK0S)`cnKP#7`RHl8b!IY6%9}FU=%q`s@qYtEE7yq<5BmR
zFV3T8f=9iiiMFg~6v=|)cdOSx_18JV<;)L*^290vxF}~cClJ?WojQtc*`zFePTl$y
zz=lLE3-6GgMU|0d)a<$zJwZ1{!4+LXG=5_7u|}KYwuT8+?ci*Y%8G6h_DFnPd6Y_9
z<lAyPFyFa;17;c*x=<d^%Hk|g<<&KF!6s`2%!pF8dx%)1r5(I6Qqc_o6n{N=CPOIC
zOt+ytu5^X+xRMph%g_?BRM5Ljy7V+>(cJ1W2%+XIB5C~PM(25y!J>V@ZVpELHPT%|
z;9Je>Ool)OTV@U(2&67tW(kxspDlP4_r8pP)5}&{9IG?L!qpkx(&g&9BS2&^$>xUD
zHhYg@b>^Ja8HUwn!)mM4Xfc5oR|X(=2FzTmsjBD(5-PfRFO}jf-cgVG&L{DX;%yYL
z_;~B^l@fd<96nb9e77gSck?Lt{?aE1fQ-Wz2W`%3OKwNySU^h014J7i=xsMj3xvS+
z&1-<3Olgf-2&74CEJDBv;g;WL2mupem-kNUi1u#e<9P3=b6S1UaBBTmm?@Zn$%MKm
zlGz0Ul&PW{`ezaj;`y&d{s*-D(~|5pC<rNDCzRy;b1yr;iNo{E7<eF$)RcfK<2|}5
zsYfyVWH7UI)>J>0S(Fy4<$ym;2BAmZABB+c-;)qBUU~ne%Kv)2^3t#df8J%lUz=3H
zc<n!bsrKzj#r5&T7$)@JbE)#-!O{JPeE3{^aa})1Yv{#9#6}AwL!Wvp%>NMoSQm4v
z_Rd;!%_B5K!{)l{z-^U4KU8?JFwk#=JyP|m_d*8293WE_DJsXHMD#}j$7;>$wRhu9
z<DgXuTEJ#%1r!Yh&A8ozE>I1MvI<Y0P>?RiA#8+#kKpbBfT*s&13>WH(IuHmwxgt$
z%9-v~tPdt6D+;xs{sumU(%S2>B=g6^w?&s@Dyk^-dx_=v@&BUbm@-L&8QPLGrpb`=
z5P%bu{AkPUkWWoZ1-#dN4l#2L5am<u9hNIP)T@oqhKHp6S-~>_vvfFe(g!XHtV9-a
zD}d}gh6R=+O>eE4q}F}82BC}%tAF9|ZL+i1TSn=>M7o#tt52t)zCZ^|pN{v$U;~)1
z6fujzM{$$eksFbn`(<Yzlr?d0iNOS&mb$#2xV`A=^weYnGR3*47D8?4Bcc)OE5yFV
znR!BWb+tINg}NoQm0YvuQ_-5b_~%9l!H>Nm?meaC_kAXQcwo_l)v40QIboyp@onl2
zO(}x<^R+30_#ZvRwCE2>VS^m#dvYIh?$5&wfWf2@H$4g<ymH`>IuV^BWSB_S2YdQD
z*p1FUma&Rn#eJw0Yg$KHq>sTiU=2nBc~GYhX=CP9Pfr2P`S_`C!!TN=e)bO>iBP5|
zc-0TJhukwKPood0ZXYdcW$NL?Or6?;UdxYAi?8(MJ-~|Q6zBrE5qQ1onyG^D^0Rn>
z`)x>tK9MH~d;c3%p8NsoN3qSZVk}nd7ceoryjCj~;KgR57^-}EI}*KRrCK{*j}=&j
z0;MlMr<Ev-CErK&=*|BFujegDm8b`EN*#d{4E@7XnL32~z0^?xo0IKDXf{r)`n))U
zRef{`ntcfqYdAWw_|%LlhuTEt5?J*wIgdcwU#un0h6I+ogE|3iJVDZ_s?_zvKByRE
zrBr`-YfKd5D>NC`$eax;u>svhYa#BMtkf5BdcV{rowe58$kOt4L(Ub<Ga_})vUh1V
ziq$h&SE)yRk*hK05X|WKgB_hrLOp3hWw)9cYZd&uv<#J!P%tJZT9Vx(j<c(8V((Ft
zDePKkIu@U&Om4EOM|3u5atN%4dImp?Sy+$piL4Vh{t=C_zeul%>q&xJ*O2}SUBcJ0
zBitHw<Rg2Rqc@srR!kEe{bE7Ca!=GaH7m(Dwev+z5kSmSV+>ROq`lJ&QyP4wvfB(0
z<w~1s2b8P=)&>i6j`RRlY1mpfM_FuOX&1rXRUCVMUaPrEzLxB|THn+Y^I<5N;7Zn~
zVPA!b52gopmVFv3=Ga!28bZYy!qbJeG*?SU;H>==TLyd%J5H_sDlo(GIn%qmOkQnO
zQ(ve4!7i06u#k>RldztM9k_&8C}0G>BrfHOk;3)oxe;rYQaB4<Cr3ANM)l#}MUmN{
z+&fG9&jGoRtbFhKCzq*i?H%ifmG50(jO1<rSSA<S)PWv=;RLthaK`YMen~ve<rSLc
znF;+;p9P0kJBxrvGBzzWsehft7q07A8kVcY5d4gX$7+uqkd&hHAS%{^ehEZ&O8w>{
z-Ya(4qkj83LD0<<s9$O-5&T)G84Irk%DLYbX(&<ekLXBvGF9qDwGd%xicx(u#Y!M>
zIWV#i)h9z{o8+_xQk4P|u+jnH(u4W^-i<UpA#Mhy!Tr!s!Var<T@M72rOJW@ieIQc
zGXBElR&Ftt+nCcj&6$A~<Q3T_pInq};m|#)76Igz4*x2cY|I{lZ{1B)Jv<zNmCTvR
znk=#_k2&G|DpFjF7N!Sm%)5du_1KTdBK%4+Y&CObE7lt3&0`HktR&lvG}wb+MUSaC
zT(^-uR(X{ThCoc$EHcYsQLd^C(drq24O_eDIuS2`6+6$W<>vU|{jq3F!<DHlU9`{~
zxLRto83Hz`2}1o8)@WfBRw)#b-i(CPaEk=$rr7cf5%OWxmqncwTY~f$n$*plwm>RO
zhW;x&Wj^YB>(`>VeTdtzDDA(pqX;R5T}o><js*07JS12-5^NVm0-xBn7#8lo95mRX
zx--#WbbM`P>}{`4dTN2-zcTK*eGCZHXR}3Mg<0gPXtc`y><rlK*Jfve0Lb^3&I)sw
zK(zH!A_;a-F3E;Our{#Hg!TUM;DNPH+;#Zxa-3afU2Ad-)lY<x*N?$n3j-f%#{TR~
zH6MmqjCcm-C%JqIbBssqr)D6>96V$h%wZ$Zb7bvIUh7q?umn|J;qlfQmaDn5IKu5i
z(q9Bt1n^d5XWDyaycGjJVZQP4w{d<atxN82Wm12OGpWB7(f+PX=x_1dvHg8l+_VV<
zvCbSkBerb79r}GY?{}f&?NR++N&N;I(RcOkuB3h!&!v82epzN97y4eDiN2?U&<VG}
zch}y;`=2eX16#Njkq;BDLFm-#65xSqROifzqT<~IR8&>Yc#{(gd}fJ%7=N-y$Mp?q
zaQ4NNjkj50CW9fsKZ}*kW%Cr%6i09Um5M7Or?7i6*;J*#AREM;DJOplK~;LHM1U0C
z8#&4F#Of_d;i83UnD%8W*gZ7ur=T`acOj-dksTrq>Pys>nFPFvxZHkmXUEB9C>wIB
zKqfAOTmW$Pll_lUsDM3IKy3M6NQ33DU;X9PXrI&==OK2_0;REEENtwDE<+lO2XH$3
zJ&N-!{O|KHr)ms&yh<UY*X0?(jy3mT9*f`KiK>ugq4N+j2UhXQ%KKSkADlh?cG$mF
zM@TFfrgX8eyx$&zVwLBC%f_=@Jqt$@fwp-D9|$t11|I@jf<~d6=)cR{2`2h)j`D_l
zH|(K$SwN-6n7hw@$~Y7}(=?Mre^e~)Et(Qp>QUP{&4b#SQjsbAS8-?Ht?<vJVPjy6
z)_L^T*)Q(R3AcjXKlm$JFD@d^8SoMuvRmzj%$7(Vw7!8e@lm&eMKi(Ji9t^lcN!|Y
zSsFX+i+D1j07N2z)T&8Xg7h?)+YxPpnm}LhN1GF>xf$GVp}GD>>3qa*7I)@jRS#T^
zsw1$$Wk$@o9e5!Y^;fcPc%w~7q-nmAa{D-Yz5)*H*GkowuP5x1u{v;!EzMNCixy7x
z|Dz8JP3zSx-O=TrEW11!#0J^5LcWq6M*a4KRZ{02SZG{xD?xl(6P2J+-j)WhG?){c
z0V6u_Xg*-8%<X{qI|BE}5%@7_MIrFAd>lLTm^X*ru9!ri=c~%Hh&+*bvoJ}P8sv$s
z*J8Qq*2`{*mDSdicR^}^`ckXn(gm=-&BY=j?(O!d+dt(aN%Byq=zI-Tcj{H&9;;e$
z9&4@WXH!ArBlv%u)4Jk(8&}Z2i-;Yu9BaM_VsFYJlDQYPM*{uo;NM6+F{5%Ua7mT_
zne+#(&yB}WrG3~x4TTVj<xzKB!%5vS9I&E+9@ia)h0Z=Pm<Fl`!hqhY%G}rQSN|zi
zMU2K+J`HcWN4*-e1<^RM=QCIHXN^AzzmNMreEQ&^E3s%C!el6oV!pr;FNw?Mro{r*
ztHWw8ctj{|1u0Pt^RY_Zq%#$^bo}rPa^__Lewst^AQdi#=&B9xlLl{299~!^u+)r!
zS$=4Uf`|s$bQl5}RXH%g3QVjd2O|ye$Th&GM<MEBOH9(*TVP$B#!7BkgdCF`hyCel
z-fWCW8pKUjbPLR?;xo<@C<2ZNmxe!m9~5RG{B>4t4IW)fF(Fts-t{kmRXzo^ELdJf
zVyA)SWk>oj15+L4R{vMEGBd%Z;9@Yb6x3}zsG5PQ_TSznSi2bjZdCO~bXnJUn3Y;4
zy~VnuUX%3X0zq`b8UM%sBp<{GfuLUV6Oxt!g!H9=7yzUKYIr2H-f~CCSiS^Gqoqp2
zXH6nLb1s2TRl{dLEE-=PpF>|Ajn88-e2PJgJ=W7(aySC-HL=&^iUDTCKw&N*&FE1F
zZXxn8$<7maCS*@z)7Wc~<w;>ag!OXDKu7?35BE5Gg|_^>R_8zjM37P%d18U$?u`U`
zOWDDQC#$)!S7;|Ziq7FMMn+8>na5z}Z(qESkBrJ1$tO(1f2omie85L0okm955*wKv
z=sSQiU*5>X!WH%Lc_DFpW?y1_2DI@xE`w=*X?pkEFnWBV9R~3Sv4o8tA5|Y8LN~@I
zF9$iutS*<U`Up)QXM})bmPW&rM}eEEiUmV{NE;$G5>TT<bO_ciK1A8gjfawkXdrQj
zUW3o9J$ySKq5;-;{4$1U>p*;n27VM9qN(WqmmVUPuac3e$gFa|7M?(`1@LQ4Ji*yk
zJn~dy$+;bg-0aXH*2$+~j9+6uYAV+kX&R)Qq12bi&-D`I*X484yWWH%VTLGdgK+{%
zSqKtvMi6rLKVhsPXGg@A%|ypHk^^sub!qCz+5#>hFLLy+vq0InP@l#=mse)npj(iF
z>GiPuEJU&%g^Y(JxFjw13lOz!EI(&X4&E7Z!r6LWHdWjyV6Eh8cNQf=E8I&{4630a
zU=F^!Zo^uFBe;f^x~Sp-*=KxdJ4xTVMF0LJ*1xUPzi-=;`d7sJcjtKh^RoQRNDgTg
zpS?7udvmFKnT8x7LGK~fnM~FzosIbINKEKkE9u@=V-H+5!1wpRi{5GdB)k8m`bmOb
zTEvq<a+!$>gplma5YQ^)`avRvK{iNyJOsn|(ZmG2Pa@I8cSMxh`p_5WKVw!}OgP|B
zC=D678MNw$oJl9F;UxGb(l_*>FOoNyYpc?<RayEhpIbRwxsxNEPpz$T(Y$9=CwvRY
zq`&5-T0Buq!Z2LQ&*(5k12$g!0f&hP7*46#4rqPqj(?^!GYcg^su?}v%s1BmFNSxs
z(zF@AZVe#K4X(kv8SrjWx11q(FV_V=BMIJi4zKC5;RT7PH=sQ|p7LI=+WRxDuhAf>
z*l0w@_tNn%`NPT+!y1<x=BQ5NBLPfLJUwdkzX5)M1wd~au}1D_(+OzSLt{7;mrY-6
z0tr(PYRn|U=|W9hP>d3pR^J!&M^&Ck;@Vn&IMW{0pC5cbu|E%Z)y8LaR9><_Uq~-a
z^EKHRaR4#Fc-h4SW1pI?wW^~P5l3gBixc%GI}bGVAz^ecZ+uUUnl8_NFR{~$y=v<?
zt;OS;FrP2Q9}tpRN^5<n$f{9K!Ekh<PK}b!@=ywA9@lFvC*U?ZuF+2E;~VEkrDMaQ
zK>rh9DdIBm6!mtPZ}bkbDVL-n>QbCjX)S8)4JWoYR@q=@<;EdI&B?d1>0e&#dV2;|
z5)#;@wK*065mBwhri-#Az{A(?5{(b<$CA7l_Fqkn4%mF2nq%;v!6=%+&erC6)I+bs
zs*T5Nm;p0j3Ae&JUFK6Cf~kjX%5DK`k@n}XZrJg152;`ODN>;rWW;S0TK{M7i0OyY
z;39nqkex$`;gqs_Ki0V1qs(pFONJ!G9Lw%rxqLtloM<iYlgmd~zKuPZaf3i&;@z2Y
z<DuYzbyu!6!L>Q{4k1er{1f-3p<wO-ypr7=JT2gb_tl*#&h8Xfq;BU<*srB}aBa9l
zadu$$i1|}-swG?XUjaX$vjf7$PygJX+r<JW>|GD{{v-h5P=0CH_W8-qbCX$Dr#jQv
z#mWbah;p9iIJkNmMF6`8V5ovAr?1BZhkZW0G(Gln@IE0%IO(+y{(6cLJ`0A7c6f~N
zv|7Q}<LrQkzYoq@pZfP3@viZNRcY)4+|EoG#`?&(@9brP0YGZXhEy9_WmBALZ3%{C
zzj_|>E8GMKGgY$=!8SmJ-F+<3j)>(xPbrT)fwn^9hT+?<-hTzKSAIg;zd(00_FX*C
zYYyyEhoBvf!zp+aYAxQ;cxMXgO)v)##s7b0yj!gQuZ{PFT^Aqk|Ax+Rx#JB%7vnbx
zva~+lIR`IeyuV}pa^rn`%f-k0yLhLM_w5<6@#g$wMVy~_h?$U|34y>iUnG#l&PD>6
z*sf9257y%Gsf#hasSCtbh{x0%Ae)wro-@(M1U7SFA{s2oUW=HID33V<ACCqDXRuLz
zc3JHo*V^wz>_cMvYVXC`ZyMWv!<TM96a7c$2eiiTi8r1_o&OFRr=HJE?zxFt-jq!a
ziv$LH7TRVqgT0LY>+PS=+J6n(*7VNv_QRoZ+i#gLUi(ju*FM(o2NL<aC(hqtX^5Kv
zv15Z(*xH;Kw9*B3d|qf1@+hKqPvB~7mx6x+7}x`=mzA@s<=H2{2SpBUrs(3k%ES)K
zf$gNez^1be$)xCc)Vr^v9+}uMQc{otW8pNcqlZTscE-9Xnj160cso$ch+-_gl)d41
zK;xo?f!q`ia8`MY_+&0~cf|SRjAW01xX}bi!l_WJ!rfq*KjkV6f~m9NSIL4eV(k>J
z5t<!C4JP{#{BUPjq3wna6q1JX{IkKA_n<>s&w+$?bvn#H(*6wOGs|uZq-D9>8cu_$
z5Iccj;?Ug(Fer(IA^3_F=kvVSG8CiA7&fx-f_WwnMFF+TPHU(z3!M}~h1qmbcVMMt
z&Oy)?`Ppxzc!iMeXScF-JlZ3qM|<2<>Qj5TMlo7m)PqgFg_jyts<UjP{1c#0=C<0=
z38&4`D;9KCbYYiQ{Exqf+u9-<5RIAqj&dcuXKvs!LpHS2XwjlW@3$M0B`)L#JzjEu
z-{mO+R5|`oAJ$)}L_UU%E=?4#A~y~@-l)$~^5M6zVwVxZR&K=}x2jgtl%67Nf7d13
zm!XNTV_n$T1BcayQ-HZlxzB(g3&%SRCiYG^gN2T$_CCkCXpl;}F{H()lo|BBK{qJ{
zJglONhgDpm=|;4H3VsA^aT!t8%#!{#AQz8>rw5Pvt;^L<pl*;spJoHd4AQ``mEf$j
zDVZXmMaV{J-97ADNO1N4rf0PP_Etj=c6&1Sa6ICtjMKn7N+In^T75fvr?gD%K=qIX
z<U8+=YPyg*ZbC(<0uoKDv8T`=B)nDcoCQ)7AzEq3#IKJ%X;Jbiz+gHn^?2D6@ch_6
zh1ml>pZvLUPG!}Y@g&<40x;McES=>c?iOJTldD3m1;Bw8g@KJFa?=8toc3nLWy6jn
z?BrEwKW~=e%Em@sg|_qNgos^`L#Qf5H@M4*-dLhHnbDiMh*+S%(HjUkJ;Xh*BSabG
z_7Ynp<Zf=dL-02ygo512mM+lTnIqh>2}cii?qo@-;Lns)gMWskrudgs(I!Ifx|$9Z
z29v29P8tCde3T<6j1Wk0Z#Z&Zr?#pf?d#><Q?zoZWxJs&_w`Ekke(95J>3BQQp9@G
zhFjV@;WZO-TV0C@hd>~(Hy-K;7};wL5ql*JMzM4$1ZsJppgQ5>3OV7qC-1M*9CDiV
zTZ_)wArgEOVU=J4=o+8^p+XY?AQ(V|2w?y*dU8|AFYd+uM}(>TVkNFsh*XIZ0Wlwa
zgQ+$iaBZ7%BjGI7O%YBFCAkOK1^CN~&Z<8=P6`4h2&R$qEPCDJS}c4a=}`Y;<a5!^
zhhRpl(z7j{tKEcLCDdCsnZv#`k4+}v<)ty$lgS<awJZd#!^M=3h>f2jYUroQ88B1y
z_we<O^B&_%?w)dNX0Rl?d_I7b6+=^uCXk=30zg}A|1}(GZ!td6$Js!O{E;VY%xzY`
z`8G^aiCckro%}tPDYIH|@%Ql1nbqsZeczTpIjO^K`Ie+-)X&9A)|d&>T2j_lk%9Go
z0ceuYat&LW!wlFoY+EcF*wQTBrr8PsqdPo_gaX`<y%>@yw}AFItp@26L*SMBL48=L
zs^nEB85;>>Z6>!@2GN$<%R_r@lUm&~snIO*ET^E+D;FcsBGzb|b7pG_VkD?tac3vu
z#zwVUNDaSuv4-^#Li<?HwkOJ0x~TgH=+8;=6>H3<PLyY0p_HA^%jGY~?ma-#)HcH+
zyWh0v9|GyzG|uIZ0^1D&BvCnlfLzSS061leBeeRe=0&&U1g5o>++t`xyT+f|eD>Zz
zDjPyJRuB`!H0Rn5-FdS;CWt)%RRc2%n{%U*7`fPtaItyJtQS_dG;E48M6A$xAzmR5
z=4M2F=a1Z*LW?>$C6BCd@8OXZ6*~~IvCzY&m6De(6MJs~1UZIa|3TMi=Q25B73X&H
z1HpfEB_>)wK~S*+DQVc#ibl1a{E6-3oe^>$Gg7@C8y?e@iVmsq7-B^#I@*kj)`=}I
z0UU6Q@BM}*FEzyStdYJ}=ML@lkC80SEYkAG^su*=_8=p;pvis~QT~oM#0^DYmptm9
z%K&u?uo7$G{s=~)P#60f#?SLhz1ZvQQR&<Yaj$y^mQfH(b?5u$>Pfw=Q?U0qjCe0}
zXAkWHs5L;J+JnPY9)ioa`6+{-6dJ^(-K?KO6?`1{WX=~@g(|Iq?71e33!Vt$aGZzW
zd7dN!mKPH|#TKaV!W|UQ?q7_0A@{axr;0$BG^;<Py>z`KL*RrBW`GEZjqS1%rUxFk
z;)y%~%(q8w;hF!4%#bC+wYq5Pr2)hn<VKx5hD`k(uaFu_s;wOr>9x$%Y60iI{u1>(
z%yZHH4L~Nltz=BrV6wkQs;9Asi^T16xy@6iI;d4pPT+aOfuL<Fz{TP+^d(e~1r!LO
z0!=9XIYNn9`7siTwLQ@ZGXLm3(T_vW-~P15Cd&sy&OTldwjkh279G8YggBznHOxZ|
zkLfie+hKLNdJ<leD4>20Wl-%kBc`<*KQZ1-H{cJDticj3zMixj5Y6&JmfzH4u;;&E
zrt7SH!~-g&hO)Mq&F4$}rq-*%lX?tySBFw=oiBBzu-^6W6C1c6qQ41TV9NH#TT>8h
z-Gh@tzyy&B-ryJ8iVca$9RtQQec4%-dlM6r_?7Tdg1zs-i|B)_g7YhP25SVr+AO=b
z%Z*#%m7m&{K9*nQgJ0zkzk2=-y86>!R-w;^ZvfkRc@TGwZsJ|Hao%;?DBkt_a-VAZ
zBUu!;wcm{4sg|94)XHHXS7;;s6T3Jdf_!=m3A9y$Ik&UC7_%c*^Bk$J8ml4JMslP_
zt(&BCyLO%1G52%hvYT26{&98}?i<VQwsLk?-VSzmm4{tXN@o#(-?_I#3IKP~_}x~(
zp#$+O62b30q@U8(1%QVX=!aXO224j-2m%w5I4&wg2BT8m!3@}x%2^)LVqEPx$9X^6
z;|a904HK)aSD#dl^R1QzVo~F^F+37#ALo((SNI>?Q{aEkjp2XK6aRaz2WL@4`QJ9;
ze_y#c|J(jQ=YKCG@;`DBei8qBA<F-d`6B!eb?W?&S2%|My^z5Fv|7gJf3bQV=DEI*
z|2?DgKWepnI}2>S4E{%6#xKMF*8e}|e|in$^FO@Q_+KjVKd3%xH-5(OzjDt1i2b<?
zXS#_03HH1*T~@l8mDlFBR)>U}Z<0DvS`PS)t>!#-5L^#T<V=^zzW_Wg3;cwxND55;
zU4E;%ClA^PoSnn~t)R;-or=Zn1hpr>LOJBGPEOP+`9^YLtdfV4E8+ZG*KZx4`@iwU
zTW?%^^T=(@9Pwi|)QHw}acUY)3Mr-&7jTG<wp%2=RfG-^B9&JCZi<FTO}<=^$geHq
zgu`jO9K@gm_-pf^Tabisyq=&yWSjqS1Q{ZH?B}OIKd$-UhsXx`!^GZ@8wXiB7t*3(
zX&yC0<D9gU;+i4O4Y}Da0%0+oy)pXOrDW0|RgZQ*B)IrATZA4rt@Y=Dcz;UA>kawa
zYR#c^3NKV&ZUU@BwFVt*_0*$SDqJRInHlF-$jfjz1@uzf+vL^r<>E}GI72SZQi`+X
z;<-xkY`HjUSa^dKXVI~0W?ezV3qk|!xQ^aL%?rhIwUkggKL_vIz`{j5c3OX0<Nc8a
zE#rACqYgmmBdffMdr+0M2tNX#xp7GF&xu8j(IPURw4dpE92$iu8V@5p5a*>}7nQ!k
zsi}{1A1IWyLG>R|4OWm8+>he|O&p?8PEZa0?Q!_A8*Hotlt)`e$tLE?4A{>U<=9gE
zi1x`@a4D#1?^hB*P$YeK`@cVcsIDY#!RH(FslhlrWZlyRl(?yyhki<pblTAnVbDJ#
zly(doWkW9WF_4T7DP9`zl7i7_K9G;vl%@wbL_<kNfOd)^RE?wzj7C&)>=uEl;mf)+
zCO?e_9Q@GvnzuLbHCB|f2s3a3>s9-(qcY)@ZMz`>DY{h>XIRnZr&?j`_NUI>k;uHn
ziKQ1w!XV&-tsv5Xvx80?#pK!Z8G`8>tm+PawW-^11y2}#BG=PTX)DE;2okL_HK14X
zs9w!OS~Zp3HA4{Y)L&ytYG7#i$w|P^SZadjIy$%C`)=~w{z`4)+@|>)o!d0eFFv=6
zqb9G*nABruasm-*@ZTGUAM<&<8G%0FfSyn>mJ{eF#oS~T=jH|wQ>ZutHhf$%wJcfM
zg=;dQ;@R5MT)L=#+l6h~X7$LEGzg|dUYGhX#|Ndt;<h?RE?y8SUc}4lp{lS|!|O7n
zdtIRDa370Dtw$y**2}E5S*#!{($_{Ry%EWX<exsq`2sZzA`<rVv{vN>tl)|44RD-V
z^4|bDemKztpZdXfv|8hVIr<Kv==pIMJ@4k{ag^e`vwO#3GH}1+e8z8K3664_J6drP
z=`TEFkaMaCBlsHZ5`$_!axCPp0@h!wLXNzDrQd(0%=G?Ayl4D99fpN7;hwbALpL_F
z`R&+Q6#RE!fJ`jSPuc{(RsGqw1;Me#Qa^>|MRRN<9HGGuKgJ@wwl+h(Z4HqrN%Dwa
zE#!ypfNNk=L3;b|=wPOaEFXJc0!Af26P~GO)ic|$72VmVpUjAJNa?IR^(T*T<RJsj
zX%nZq%<A`k6N#WoFR^a*Z`EjII*l1zV<!0@so#W=e}53^iJXZqsC1A^j34#Ikt+?(
z9gkj#gLlc;4ueCnRMw00ZO}<UdBV_U$fwPzY?}SB>^_d@7GpO8u-Teywkivo#jad8
z1@^S5xSPDr<T%xkZa;-BV&N%#C;v2rJv1I-fnJuk0Grkt2jq%gU`=H16AU3B3m{h@
zKKNjCIHPrUv5FJYQ`it!p$5K+dv;KIY7sr*&<7mh=3B%X2OMwuC$WR-&xXM=jUZyw
zRCKi#q<;wY5no436Zb+Z7Ea!dN51+MT^+NY_-nZR2Y^>_=bjJM<eAz^GV)s8pRkgQ
z1uUPNB(qp)f_3ojs7bQT`H5y7oCx3NC*=F&L979@vMTi?4EKW66OrDEgn!N^f!C8*
zahxi}77$v0X-|Ojc)*9<qh)}gl0$GWhk$amtpF6|pXd<G;<jYiC$9!5WTG4k!~}6?
zR~&|P-s|v09fW^|8<P4KD$2+LU;?h3$&871Z$63RByO#tP-@UX;Fyj_X5@Qrjjxem
z`cKJ5Y4`8Byg^u2w-9{>diAXc-OyWr^YOMKj6M-9G3rX=ufvJ-Y95Cd(D{sfk3&&T
zOw-rI)gfJ6B~C|F;8A5*g`%8pBIk6i<i*f@&EpHLBn=!!7UFs8-C*7jj^~kbHD;P6
zEDd~t)8M~rS8V-9ywrH}jhNY>`r`)@nAwAv&+M8N_|;k2klKLv3-6#8$*hc06!(z&
zTfArdJuLELSsC1YiLC7CH#Jr^G0MsUPrzJbVxNT{#_Cd!6+!1=Ll`&%7L-fyuy%Fc
z3*ccm#8Eq!7Xkyx;(tb>958DP>sGXv$grqu)a&6Yq$gvN3w(sYFNZ%bYQiv~n?S<@
zsGeO@g5MbaZpHhB{6#YUC@bObF@i)Zcp3Qn;WsXYzuY?1rL6&%g}+b#cQXEVkT~|U
zUnb!142^CA!>6th{@N>%eo6d2mq>qk7o|U4I#xwg7(?SKj>g4_X#Avt&`2+m(MTzT
z#v2JB{(f9Cd?}d>??Jalt*Adj4v=Cx`|M;ZZn2{NbyW<Tw3p-ysBwq-{J#++;_|#s
zkz66v#2GBGT-c4IVo7t82@s74Y7Ry~C)QL|CQ?X1HX(qJeGmG6F=T7>3JnCCyCHld
zT%eN<Ph@3Qdl%vzeU2V+!%Q$C#WauA+t@HpE5|9TXwq>OV%b@Q5cD8~pqG}-eN;T0
zZtTGstOW^Yu-=q(%*7i}>A=b;gy0Z*z{*FIRkNfI2V@t85FGGZOVw@2f^=edTBM3|
zST3~U*bAJWL&poqPuY}3(~TiSK}d~e2u>r*>&ltK=T)x@LKUFs9UM$PtWMjEdYq^S
z?kID9k05Bal)5XJk4F}qQ;K<HK`}dr_>yW4m|4!{VP2%<TZJ;OdblN8rBCewH_|FZ
zWymJyYR6_+1@$e6!|DqNvEcLn()dK&+W$R#u6rzo&p%uQpDU4NEIwhgzc?cMVP(+_
zk%Y*Dc)EN<Uc(_8gGe&mXjS^uCu0?kK_o?7sZ~&U`C6p&Q)npI*dHZPFYENNdaJ!h
z4vaXu#0?G<VW0`qbhrsYpNB=c(F}?-u~T}8OE0K3eXmZRA;*wdFa$q^P7cXu1b+>B
zo=%@C@EMP9(a#7Lwf9<Z3yumwu!BaN88X7koK|~pzFbc+ItU_G=BFE>xt!)y>K^vg
zJ-~7iuJY6d9TORmz-jeSh+2`r2#UgMMA%-5*C1GFe|9_+#>)xzQ^myzb~*dB)T_S4
zWo@(Uh!Lz!Kvc~&vD&@r)Og+SIiqd?FHvz)85P0Xf;#wd6y<C}+)qlfL5&$^2bF<A
zYD1!}Z+(gU`3v^1>Tz%XqaCbGI6RFTFvi=#YI&K&Hg@hL=Dj8!W811ObABx<^?r3R
z-?N%1b><$Rh@%wt7M$ZSLy68K;kzINn>7J6_W&<|7s!BD*`qeQ&iD(2%>Px#_v;Pv
ztk@3-jtnw{C5B6yx;=~bx)!}P3A<hY2B`vBxRm*|mE5XDyImhZ?=B)@j$Iw~T}~SQ
zhZ6C>V7&E_^dYE1gX)<-1Fj)*F+mYizy1Ix@K7OSLNd%*5Rhl3+Yq85>7p$yIFOg?
zeMZ(`rlRWg51^I{m>M`;yDhz#G%EYqVz`6V0<4a-X%Z*Nh%K+73V8f8*g^YY96?ru
z$gDJ_!O&WCON4?AKIQT8av4rX^X+|}PEIx@mPXj3KqW_&!J;R~WmYP)jmq@xh_&ed
z_SpQ?DY?w%zq&e9Xt{ZAf(a_7%ELd-a1e#iT4;fC!*3>!mrrfDACuz=`gsIDWQaV3
zG2=%U=QZ&uf$>1lLrBObvs|8uVC9Ebl9kwg_sGeWuSFts^&?iAu9=9Dr|S+x!^HU;
zMi608%I{3@ch=B1XYd&cc_BVmg8g-1A*xG8>-<oAapz2_;{ujH=dfeAe%)rJ*wFc(
zIJSQTy{MklFYbDmy(aE5EoFUq)iN$9Uv5$6_lmn*rfNsu+JC5qTA6O_5O;NiQ~ADO
zd~(9HwR0fF6S-B*3ln+Je&nm^i25{^Chj{ZFKT6tBaX&lSQ!GR!%9`<Je+gDL!PQC
zw;S|ZjXjY3D-GJ%5geZbm#}ofC~kU@h7~;dcJb+7;#S-#iaP=I`{qf#ZN(|APEp+V
z>=NoZD>`VpC-<maF^nw~&LK!3vio%K-6lWIpspBVnauH*dQV%qxS%WrD_Y<V9*F4}
zYPwD-GuqGV^k%v8_KAVCyaGqh+Rrei6uMWAg#zabRSYuP#o_3I=ItELN8OIzwf|c>
zXIwiCkvE8xY#fvq#twwRi3D0NlMh6p@phY)^$}4JI#r8eavISmV`nsChxcFK+=2+1
z5!NY}_o4*wv6T*0Rh~$ZogE8TWgr6CCs*_<zqeW^3Ux+?Jr%AL*?j^>{_Ud~$(;SA
za$x`76g(_faLAEn(Fi#Q@KR8!M$}H2Tj`XcGqeI?A0}=y>DGM$AA4!}3Qs*Y?`UiJ
zNAu3KmWMU`0F;I90pt;-e?dKzlQzrtecT#234)q<<YQyRb&q4X?hGsMHTKcucN~_>
zkK+XTf=(Pu;#scTZBnNrtWDhM4$C<Iq-63S{J&7|Z)D|r*lSY9e=Ex))o*^l+=r?s
z^)Y9AwQPMcr7du>`Ec_b_lYosxZ@G`2_(SzZP*Pkg|;IXoF6fCusm$+Y%Bi=Cn+|c
zGm9IRVbNyp0WjxqzOh$!9+%yR9By;{EzH^XJM&EkkA94|t@91}s1nBWK@ZZ6ogVed
zrwAj5U<a0+11G}(mXyK%u!u9%jC5NuK;OgZ$JW&rY=#jW{q^a)h3!x_r(>b)W&M#r
zpL!IgThy?d+;XhELn(|*>QtVB2Vy__3#-ehMu1mACR+lr^tdCiqkcIC%yB_1d@q#-
zw9Heg{(x-1I1T1JN~0qCXL5T+)<l7wm$%yJ>O5}vuB}S3WNbIcOETrU3_3iIP7nFf
zgD422g8g&6L>|ObCTFPAGa&msoNYx%XH@A)pg)>=W~Gu&sZ2N_xJ>=UR<a`?#_|Hb
z<Ix>T12y6sG&ms`=X~N%{}7G-ahi}TLrWxD#Jfzo`0z2Xo~N^D$Z9gth0xQ{bAr|L
z9|C4XFVJqN88s&$H1Okk%T&AGYVioB7LL0WFwvD_b5A<V%bw6iGmu4pp^cW<9brdH
zBYe@H>TKbIA@8LI>1bqB#W@c8TT1=)Nq43&{#Fb=gFMYmCW9Dk!yR*BY6K=MbXmmU
zcj?(n=Mzs@=*<v=wRomo;@_kacL`$fKHQYCpHsWg=ZYMa8LV3@bY*zJh?R{rvc`=B
z9**&Ok!+?UsaXt5ZHA?pj<>~NH(;H!Gy_eBHb!A*->06@L<5QhR%u~Bp-#&cX7-Mw
z9Otf9U<<W>VVOtSXckaE=+}p;4L_%1sC~}QDLbgvP>Fw5d$(4hUJE{=bJYJRPVYb+
zca<tXp(-F+1T>owu?MXGN!X2ITsm(GOqTX>FvS)GP7C)};Z!#wJj3^?kM_4^jtKBU
zggbL`;BR4I0|Sb-G%4DWe|3BenG5D(e*s%+(Z%e4WL{XLcuDo`bKIVVFly&|d<hA@
z$Mv8<)VUrfIpTuCD2OrZ4t8L_fxihjL+@4tt7Q;QZ)1Jv;4{%m0@v4M{Y0lWsVB>;
zzPyE#c{>@uv^eo@R1lt}<JY5}ZNM5$4ardy+q-2>h-d)~8oPmJ8AGUjrU|DMi^2E7
zL!>6`ZVbLfcl$W8iot{YK|^8iRh}m!r6=7`hvV98@cI)@xj3L9E_Pfu2Xv|qD2n0y
z8^Sv%n&_ENU^*mh4=Mm%i^1RHMx*F|r=%tvCp}RE2Rk0|j3cG-oB{A4C<yGIX_g??
z9#~u3?0`_mC%8X@iUh8ZUg6LOCP=Sv$o<#UJOB(Tt}Ok8?KRJE45Anvk?K>PGQR?P
z)Zz^zx2bpc(_Azu>&!SKHt;dj7xh*ofkKfg^R~5Bv|Bs5J63O&Rxdw!n(NN!F#6m6
zAZS*d1r0nFs0D?{TqXziNB%29r!-o<a<C8g&{}<*fylvU=~aZ~D8WJ8m3ics+HsX%
z-9x`WJBD9%YBPXRs2q+U!$gvU&*2_4<+O+`5nzbU%fgNaDHTgN+d_@myLS^|go20g
z089#w&QS2UelHgEG7bhJIb@|5sm74~bG}&1!47(SQ+{<DuBFn)DOmSk>c_pJsQ6tj
z2M6e(YJ{)nY8q^@G&frSh4d=r6U3+gfGN0{ZJ~@LOH-`uypDMXT7!Q@%Dlfb4pgi1
zH$279_hnnC^ujF!q*hjx5LzKn4d>8-zQ4Er=0m*0+HRx%#@BZZR;EzDjS68*D{t&o
zf-m4nR<`5U<M<OT{aqe>iGX^d&H(7*P7Z|}+<_D>04UGn4l=-ewuQ>F*P0b-wK*;g
zD3q53f*@s`qfj@wWDvfR1*xS7PfCypv<|nuMBRs2z?;0#!#Ijl4z}@bweq)e0&1Es
zKydgFbBghS6L%iTGj_>as09sPN3a+7qVzNkZ;-IJx=G6mkwT%y*cKYiqknImOBOW7
z%Pucv3Z>=~f8Ir=Qr>w^R)l-4CUL_eYFQsc_A@>zFY)%A?~$}YhC;@P)bU>ZR88i%
zo$(y(z3`uv;uKiWg6*hq^@EJlKYPy@q`~oeA}<jD>g{M8&2qT}LW$I!GO1G|a|rwk
zjprGseh|6wJvL@iI9`1Yb%+~MF|#4{OxXwS9SL8%kC<inO8e*1g_OFq>X2z6b?{ka
zl^5hja?ix+EwbakXu_%V-4hq)`}zyS8tPPtB6Or1i6X~HRf_sVFu!qPU>WOrnIvZD
zGbi?9f(cT`CvrKyByg5ocC<OmEOj<xC-ZI#UcwnFyN8r}tqyE3leU1G9nJw!+Ju|7
zD~nspBh3#*41FIpA8eKzPq&s&f`%SD@4C4$BDA>?8h-&Fsu5deQQ_`}YjG--CjT1G
z9Qo*OCG$?iYeF|TjdlQsxJ#5m5Wa_J9V8!NAF5TJG`6{i-h31$p5c6)Mu=l=%T;m1
z4K!g-8vJ(pvEe6hOWVX&bK4R_>taLOl9cdO@kg);>64VO6)B4iI54I0c<bU6slx~b
zxt2}D>2ga<IJc86G0Th1QpD0wCUsb(E{pVu1>LP*jh$T$H*IDUrBCRP&xE{e39?z`
z#TKc<N;%!gx%#cqH6j<X7(?hJ@YD9_q_)@l{@(n)q4m*8&5ajQTHTleZ-7`&{scd5
zBEr&&(e3b`6iYhB!Qr-uPY+=%?2W2%n6H+OP}PhMX&|Li>NwBc9gapQ5!hQLw28&2
zjt|Po<^z0C+>?NQ%Fse=lm<m?*@rvDm*OZtLHY!+zVR)jV07RWRWC9wcfrg%>l}tb
z3K^OEcmyW5auCO9)@yeU%Z>exgW?7X12qmi8ZE28gTa!{8UlGxR7%C2iz7HCdXgr_
zBPgQrG{-{QAAyGtI3CVInjZo^iBc)(|D+v1sDZq*q53}7XFpQCxox7d9D|qV2-Teq
z?}_7S2b!=SH1=w!=^TX`zon|Oofc1yC}@{<r&?7>TMT)Et}D}p&ktD85b;w!B<`9h
z2Zph9I8Vpc@M?JB3z=lbtTDQ9&QOZ~x|+>N%k_axn!rQtY0E06Q)Q3QfYV+<t`w|>
z*@(b&9~)l(H=2e(ro+K1MjCEHPOPDY2Jdo@`aU;qTIAnTTlNdN9r7zC-05pMWNbt&
zuEOlRlLdw$*5x29X%19iX&~KG)0YI%Z5$#i$ADhET53EkC`(cx+{tcLRLDJVeCrNc
zZR?*<Buf^=zitbj6iiCzARWP7F{JM0!X?Rq-yx~6A7khkW(_v6;4fej*sD9_Rc`{=
z*hvaC3xkhU9(LFf!+n`@yA^dRrfX%K+Tc{}I3hyM&(H?|agL-e;xv7<=s~=*s+L8Y
z!k0US&j+U0n71a%L=Q5K<fLK6w}@OegDZ263-w0P<h3cq7g!Sv!XsF7m;3P9lUCSj
z0hB!iEdr9w5Ez3o<UyyYakUn24NdsyNQR*)lL8AzbYUBZ7IVA+Q-aK>H=KApsPR^+
zk@i`V?qNR*?E|CLl%d0rKwd;&Ts=~nM(Kk-^#^UdOV9`DOEWQj5X#==>Vr_?qUxXx
z;3cSogPM$pfy=B}0Yq}i(x+alHOXajYE<S5WEK1Xp=P2r`U^D^{b_eZ7TO(kpZ@6F
zX-)Ifddc!B{&O<+xCZ7R2BsMY#a_oYPz^|)M9Eh)f7c)cEYi!oihvP2cIU+pF#~?$
z@^%$*capcgxPiP4dAfv>66Ebgcuv$H=h8Emd1-mS7EeC*3bh0-e}|(9n`~q1BOh-g
zA5y4~^@s#ZQXkI-?t$tUlA=9rGqyS>K}jm(Qu}1-6^<6M<+tFtoC9#2a!n%C8s`8y
z4Hy{V&VE*>C7Ht%wP|%TUKwe=zXDDfBiw82qXVDT>jcQKoRAstPS#}hXxt~y*zNPE
zdmcu990(7}`w;;&=SNi5;I(R%D5fjtcr9A>P@%xP7`9x(BjZuZ3{cx9W0q-eAv-K=
z#Mdrf1pqKz1&hGF+NNPOZ#fFRDh3tw=3ot8$&6al^vX3*52dpyb+<#Q#NJMFw;+`F
zMNK25x`s&z!&F;pF}Te3UW3cp+&D?VR|5lnUPGW0U7JUE_0MHX%@G7DYr0;Wp|#L}
zZBikL_X<#iIOhe*5t3_WZ=wrr;Imb59aI`MW?r*7O5c1e92>Q<00_|P_>2Y9pbGds
zSBc^yH#s49R3%EBzOng>Af-BxX5djG%fPoeNv3hixSy+kxW^ZTmT4vs(4Mo5y~Pga
zzN@|q(GKSN88y90{Op;hIhe1|qTy2;fN%^*d;;S%TAH7u6u2s_5Le*%*QxmWwSI6m
z$Ud&SVGop53HGCA&Ux^qD^JuO0e%pGWGV+w;4Mp+gG0D#d7;4#;6eV`Ab!<{05t%D
z<APV@37%P(tquXFNQ7PMW?C2`{EM_;gD{yrPzvI}DyJTzp{FPY`bG;2o~A0($^Q-W
z6A7oc=^3L)#{9=DWSyOAYMx?RpTt`z4`)>g42SnU;hD<wnUW(dFb3@WdrvnceDCS1
zgzr5~mfE?!%s<|TpCA^JlFI8(fCBa7e3N#+U=&p0fhd~y%PrZfkVMP38%LGXIpkNt
zg<w@|IXDt=g|g%V4py3r|FiM`5vAY)QcD!eOlZ$30+QC?#E-Q|n}0W~a5zA5B~Dsj
zh35xDMcFx^RXV*r5BH1t{fg|hYWFH45ev|o1Iv-P;b{{vUX;Bel#Y>zgakZlhB=%X
zLZIO|rq`BfgCd<z6*qV(|H|ySZN@^J4<&_CVf9>_orQxJ=e8DQPjjryE)k`#LldW<
z_oD0!s6x0PA~p>dTTH%ptj)exlx`-Cy(D|K<F(a~GJm$;ak%~)><E_gEbzP)*^h`j
zC#?S<au=ja=&nNmb9U$ZIFmZhklVY^pFO*NzVdAL8el@P{RlA47Izk=D9cUAlZy>$
zk#*FwO>5+W5qagNHHD7%>fR&BaUlI{G`dQW1RTJ5<iYH0sdGf!<#-v?PdHu4y6r&r
z4b(1Bw*b2g1fVnz=q+M9TBtohvH;aAcKEYbiW?+ks9ty{K7i28{^WSOJ_B9JV-p=_
z7;`#IQkTimQ#XXP#rD27OG;Zto}(yxRlVu<*Ze~S4=jPGd9kCb0jJ19T0Kk+p}_~F
z;hg%Ls3}03XZL46vi?JY3A_CP<pQ>22Z2Ihh{1Y{9m6od3sOI)&4>!=7|e`<2vFae
zUYyT|2#K75q3(>6_k)!Irc9~pzjvpj1LCeO#}P7(6ro{^REpG-g1R#m(;pDq2#vqD
zS|;s^s+BrZc!hL(E?wL}h6?GUbZKq&BEg@%8<Hu!L$T@>b-a(5KfJ=9na-Qc2+zmx
z=ZMloU_721RW1Sm0NK_mx+tFxH=rPprE{XVfwr1TABkG|gJ^emB)K(|&EsWV1Y$lB
z9d&~$SbvW4*7>Ba>A1!H>KPco9C70Y)Ke{ANs3;G`i=gDufrhW)wl5~_g#5<wG4k<
z8V#2eN|Sohq|P*|l2=Vl5bjH|vkgFB5n<oh--g+6p(8pk7G(t%0NwNPK3h(k*TLsX
z3AK<)$ipxZp`e=iQphBA(p?rEh)Rv{Ikn*+SZUZqwW5BH<DL3S)R&_yGjabcjz2AF
zGv>Fg$evc%ntq{++9@`6wBi{k$ZkHDh4YhEWY3pV^tKO+8yT<>Z!xj%y6uj40*^yz
z$w!&&-C4+JUz`0PR!e&?C!se77Qgucj6g-G(Td*{urF}YImR@8d=Kc0^c7^m$D676
zMRGn8&ABOiEf@~}k|I`IFrMZ58}M)N&x^{x>o~`a$-m$!<PZ6u$-i^a*ZA_O4!(|F
zz$<Qot0A*yBq|~J)J(0>m;|gW$q3Ojz#d@Ypn}H3dI}~WLG#FOn2oCGPX>RLWm6WQ
zTyMs&P$mC33o{`}AlB9kX>bAWH5rkAJrQ(rr%??43vM)_b}J<%2(_(vrf(sYWYa<N
z6BaIoYs61!Ts#LIaOdJTk)o{0V9f*&1gJ*lC5~mru|;fWHqyX}u3zp|uOdMWYifRm
zA>U@m&kW^f09d{_(7@tQ&CfB@!F9|OYqpVUgB}&V$<%J3Q?X?x)_DU;Hivj7szgp#
zOcUf{Q`p4Ii;52)1OVK&1;rD@qCSST10Ti!#Q1KFCR^g0MC5z<H3~CGrcGu7S?Zan
zn5G&}(RToImLqoTuM`2uojD*}fNn7q;JjapA>VAsx8`<)^2sg*RhT-!qmx;Wz0>0Z
z5LTslBH0B0RjUE%#q<G5R70iht8IoSu-m{UsU`!yg<L$5Z+WIZ74zXWa_FUA%@Im~
zpR6L*ap2^=xDezx7)L-S_5u5}ewgiN9ZeRounFd$iTId|nHv8pH4ZFL!=*MQf1>d%
zWpRqJ&vCHfE-GVa!awVrCW~PWzF|XdjK@fp!lx+3;DaPFEjE3A1afb%Qw*-ab2}|*
zT5rW&Ijl$eFuhYX<`GAbE~JaW77Z3sy{zKSoX(GlQF9c9Z*m+A%%I_?W}n1A>zpU4
zS(@gAJ#ptP7%z+Tp_ngS5CgY64*HKEEg#>4LZt!3W2HE{R__&e-GU<%&IBeQ5(3Y^
zWq6b>Ocysaq=I%oo-Xx>QcpTHBJ~*I<hL)j*?Xmv6AjDEhGo_{%PhO83;I`2v7Mhf
z-SQ-)!QC{?Q4T@)L<)<jPee1!mw`<ocp~;WpZUx<XmOnl&zZ<P9|0FDz_r2JQw87$
zH?t$zitV2TE76P8g@_lmb21-<Y<zWL!(1$lD3^l|f1oKJg3dNRp9cFU4g^=v0#PWH
zVZ4C$t?V$&Dxe4B86sn>3s$&$0DCx<-fqUIX5za{sB_~rBthZ4Yvt|?wVc{|1EH6g
zvf_qH<VS0nQpYAopC~QU9%myIQ!2zgc=cSm&!BW|&pjHX=9Kw@bl5-(2-?E`?9D`R
zZJ;=D*F4&v-$UKT(1QS?qaSDl5Ecs7#IPlfJi<EW5hgLT1yqcNcPY~N1NOXX1H2I3
zLXWT(Zh~;O@e#nJwM9iR;1lpojM6l%JcfHCNqR(fu_1p0a4y1F_ZYR#e}Ebw+W2$m
z=SutpZo}6{TGR3A5JPJ*!hG^m!ZQ+6Xs!M@C5&T9@VYgfh@iC?E4UFlRs)WPz}YwW
z6s-x?1i9EOU9dD%Ng<2WX^}p*Kzx`jO8vkOPS$L=MVu)xgY>aAxd`}%)X8^khOAnF
zUup$bA01sgvSJ6=#R!20BzzCP+6V!GuchLvJ(y=W;tb1bFVZ`!#m{<0Yf81)bXc64
z9vwt{dacPUS_`b=)MBggtnmo31`WMpa0X5HD6QaTwzz@xE@YXD14KGu48y_RL}EXj
z0L)`dPSUKo1lfdX8d<3csuuLu;=`DMKJJ0J4@a(Ttk;H^9T|_B#2^mtq!G5D27Gcv
zY}ta|X*?yj<K)k1vZ87(x3&D12pH_U4O>GpT1ECWErzY;2)}Aij;95r1t!Zo>0Qs$
zv``v~ISHOrAPJ!|^ph%~zA8&I)L+5cMg64q!{yrhL_D<N{mJPl3Ng23DS!n@V-tx^
z<e1(TBJ>sXmW<(1f=?iKvr>>k6Zj7Tr*-%jG*ZV0k@&>s+;kpl!ju8YKZ9&BatE28
z{3(>(8vjqRI{<Ey*q4HjHh@oKXh>_+SS#xU^k#dPXE|)1SOh%klzTb)GLVJ%6ejnU
zj@AMS@k|Bv7m!eGlj}_K#FNjVQ5ps5BjP(``uWFs9ZOnW6Idr=!Cf{__}euL0K&;N
zXi>{(B<?>dQ^9rvJ{vofSng|7pY%}*a+{Yxh;&T|Pmkro;Y8Zo9@hlHeo$U&D_yR*
z0Qm|ZhbNODCm?Y=*c4h-Lg+`99dbn}ao$Xb7jwv}t1r;<lQy~3tYd?7DXN}2jgEjy
z(eX)b2EtNnz8NwEZir}sG7V#}g1_tK4fCaxXd2DoOeTCiAjAO}-E_3!QZw2nON<zt
zMkgLDHJ$tw^dB?|m6>D}0-|^VSWIeLT5B;i3l?EwUHH76+id4@#vBL;SZmNHTyg*r
z^^40+@lJui29FZlRA2rC!VLmICbXr{_|k}CMf`Fw--(6s0ooe`kUt0L-~b2Jax7L<
zqaDl<ZGhdQ;%s?Cb{0r@ONaa-No`4#g#HjPasj9b2149tfOHDXh63xH0<B*Nm!f_Z
zpkMM5bEtrKO&hG5?L=FdAm>pgr$K0_paI?FL;^(h=JP)mtk3^cu>Jy9<39=3s4a)C
zQF$MTUI(c+@Lg^%^C#HLY7*>aD`WPu<z>0=F08Z!zOt~&7O*ay>9;`q)MX<7jG94!
z7Y~r|X+Y`5vxU1bU%%LRc70M$q9&fGygnPT4G6g;shyd9#N{y|;l7xztl307h9bm!
zv1Dhi@8kjqmUJX%BL%v9YW<BMf-9tRh*aqU^Of#|WtRjUR7yc8apBwXxhPEs7X>?#
zrVuxs!j2dZtp5O6nxz8<smFvGt@xiI&TOWF6h}Z`CKh)=<Vs=Zqz}?NKQR_Vq#zYO
zP|FFB%K}q7KO!lR!yTR^?wpS0$R>Rtx}bjt5MVvsg@oCfE*+SwEKS4mJy+Z~4^U{8
zQ&bj?NJA#llh1(@p20imqv=wYD0QWCiW&y%oNYfVbs4cDWQ!Y)Q4Y9bbLi(v^2cKF
zhci>$xr{urxbVe4o<h3%N3{5hno}0l>0a5R{wJ9TPwO)7m0iZYvga%f-z2Xr*8h(z
zQ0%irsRKyC*-8!bHG4S|rH{xzn^1}^LxHG&mY3P2mBIQyssUsrCv6w{W@SgTVK5$u
z4na7Nul*VOvQS=p^}x#*2blDc7}6I0G%WlF#HnOu;$sF!FfIHpEc|&^W61b97=G|}
zEch^2%&or;tz?}{!K1P$1?bBZpDsp?y53AvOKCD8-6C#mMEWSwV4s7FS*Rt@Pz&uy
zCDNc+K*gKlcuU-PH*UpUQ`o0i=tq%>7z_e(om6b%&Z)SyB$CUOl;Aiew$MSgqey27
zr4JGYKtekC<SI*3Kt6!<O?t6wIy(jGnTjv1YN_N@04bf~RJ0uraVqKs?bzQyHc$_p
zq87!)#?vGif$+(Jd@DJRm&1GfI${}U2?|l?@pjZGiNQ}$>g0aCDBQ+xk=r=QY5WJ!
zO(w(|<Y}7%PqHh#3zPNQ&yNr;^Mm*aOob8GPO}*fVvQeG@s&Lq6qdl?z%O85w;*x?
zpT5n4RcbDTf>bg{*3hG|8z)I+csS7VJ`+-UHgXZD3LmgTg!M+s#J*22>~J$%9Q~{3
z(}%uF)&GRC*6?$BLH*rGHx8aVP%utK#HT#oQuQ}v;&oc={bj};wEWL_gd<aLQ!zPY
zUQwmiy3U_VX?a*r4Ny<)U0%mK<ihz>EclE}*pAM+$zIg8oY!Ru-)`?sC8%)_vE%L4
zlgsexHvQGiQas#5ARvT<6mrC((TRQPbPW#2X9!t;!|pb>nQmz{-RW|CR`*}<1Yn=c
zOBfB!J2UDCjON{hF2SGHPHlE;aN0X#7JrRjD^9D2_C)hzXx@GVBGD=nJ{k1V3%vU@
zm7+t2{1~84)%tJ;nR!z2kypWpQ!AqxsJ_AZ5CafsRL(y-`gIG=nr(#ttsgP|vKzrD
zha9ifucXBkTNS3>5Q*T7Tjy~YiV%2%FCG{4lcv-8L27Ov^36w-1UxS5J59}?ZOiw?
zovsu_Z1dMJiLV2$ihg31^G9U=PppKH_vph(0XS$O=3>Kv`YuF9P=M6fFNog@16o#&
z7??rWG8+eAVw~3@H(FYq6ruJ#icmWema*CW9K!sYcwU==k9$Hvt~j<2tQnz)rzhb;
zpO+{wEB7KC9=*`IP;s2?*kC22xbw6laI9{PxN9M-;jD2eP!37<Pw31Q)rfydFo$=;
z9NuV)S;LFX+!%fe;MqG-Zm}cOFqNIPU%&_RuvxKjhz#M^0j+3(RUEh1nP3P9_MjtD
zgvE{*sr7(_4oVT&5G>*btmMMN@*(groRH`W46S#cKuWXyPuMO28x5#ae6?4p{BIdW
z&O_gQvt7h{vAD0Tvtz(Cu@Bbk$ru$OV%kXc;nYpUI=s@^dS$h|%m57&p$|YGeKA}R
z8m=a^cA)j1bVR}x8{{gZ6iUbYuzUS^oZ~FieFZt9@2hxuyoCEjteemr7F%Z`V#lIo
z315vdgh-!W3|lKwBc`X907!n`W}7pDZ}3%|xX^(-7&?&JqAYO(tqTaBm#@N5e*bDb
zAUqz&cUFM%2HKn=GKxF<c4wh~6vTee=<Itl>~NX`vk=Xb6_^xC2ZV?uF@=rduip%j
zD}drkB2Nosrf?3}@eK@kzjYUAbUKiHMkkKIMW}tU>y%D-We{}`e}n)D^*)loY3HUz
z@eDXVt-p)n7R8yQC4r!LLmVv8ng#{eq^)<bu!XXrkBd9gToIE*lE7)lr*(Z4chRF2
z@&H({JnX^yd<nH+p>udGh#bQHyFRh_2#HXeQ63wX@==B3U>(T7(%fhkAYKe7b$Kf5
z<%=<PIfU%+XL?5B2#^Q?c0^r`>ATMVq`@q2?ioasLA-a4z*s6scRc@Bqcz3H&SAb#
zFLB_B_7OADcS7{NEBcO#zQ1#Oy=b*;gaBYNRErC4>A+7Oi~tt~@c*P}E!l`;w;n4p
zn4}IfQjR3$>E|bH*6qcMKjQy!adua=Sl>?>`$Q|hH}U(~-O==Z$QR|OMJrFBmz3}h
z1)pJSPGArl%CM^spGV;}i_-T2`EDYASZCm#FGfI4K6P}UIvzhL?kq7x#Q(5tWGgnB
zjPo}d%1;<T<h04dVt{Za{>MQBc4xT<?jUnuT_0^5L`YQm2ydf)8nbK^cbamr5lQ@y
zPGg_(6gG4OP9y%u=tQYuBL;lH=saQMyN9s(Qp4<Cf=b*(Rf@CkScT885I%L>p5gll
z_mb$bp8GLHD?VC00!(%&>$0lFRlNeb{we;yfixiMDA`_$Zb6QBCpYs?y6~a6K*>Ec
zBnL&SZwUEMMhhnvG)=*qccNvb9t=RNIEwO?FT8&TSd$=bc!IR;a<p{eJ(0%c!e3)!
zlQ=Bm?ETSnkV4bjqLn|>kPRTj5lI8azHkoNtDM8YbQ<gFR87)=XzayU>@v`X)ghy0
zmkXH@(TS$({)A>(U`QztrOuhiY;>RQJeg`dV8>Z>4aN?8r`>rP3z;Ua#HP14zp>lt
z6{2fS<A_6#()ZdYG-6Jq2diZR(3VKgpyLgoV<I-9WsV+B&>F4xamr`_qA$F8F&ajP
z-;}!PxcS^Oxe-n}t4ntqVx&2jRSawLJCI=n3N{!|fijH-@jps7VD_XK&uXm<AWBXv
zjtzo@IWy1vwqm-?*sm0dRlrO%5QHOv^S5js!B1Pi2In31;RCMary;N^l{hGK$brvP
zOSc2Vy8d9^n*~h4--~%f%Y*a(u=hUjQB~LC?@VTr3@|VQ1PK}?YHZP<4F)xFf+hnA
zXbmPr5>f@U1&q-u!c4$cAaN4S<S@$pRe!hrRd2QEt?g}pwN(NCCxj+JErNIz1#48Q
zI}X(dm;{ZP_g(v(2_cfU@AuyCz4!UNi{{KZ``_Ao?X~w_d+oK?>Jt&{Dxp`oKZ!o7
z&T#_)J%!5N<U+O8Q~!Zb^467%7za6Iq3O^g#a*{kNS)=aseYVHM4qiP=O=8B&*Yge
zGp+CaXiRS&vZOxLV&TMgp}6U3>GHOG<Xyqm9fjD%-6$1@;hKsEYTx(N9`gjh)8xu;
z95WkGwfIsw)3X&hRKkkz7)e*yCn}0#arnR|xMPlGydE`Ij&+@|`3VaJ1D-9fXTD6t
z-jBx&)UtuPL$<oF0l4-9Ps_(lDMwczVF|{;2VKz$)EYcncK*GVH0>TUKu)tcXG?RW
zM2e#+O$%Ayx+&di&_c9*UHMYG;6c{q`FpxT>kcHCX!nGE!U`C1C$$$I0JYeGIRpoS
z36+EL<?-*~o@ocy&F2<#2kii2q-s&QSa_86!u5~pXI3u#?^h1dR`J1n3N4_5Tm$qK
z9|&%y7BmhpVu;~&5yKXDgSD2=IFecszHI3dE};!mC>8ocUnFlFS1NYT8mcdnLlCT}
zRu(~YfKMkmZICmK3}L$wy-x{e#Sdd8F$bxmE&vs9vzC^3@-}z6-4;a>!i<m@aW+Ss
z4IE~m#MsX!%QSs`T}FDt{$MJ88)WI<m|>Ol()ngdNPuJ?H7#79F%ub6mA>qnl7u`V
z%NQkkD)kxpgh%Q#=I~=Gr)Vih_<kLteDfJCJKScCJa<<^?Xr0!LlzlIbjH!PXN5T~
zDZ}A?hWgo25g~bLsF&FMq|vqr2k0g02GWzji;|I)t?x}OMrMaBN02frfg)-Ot->W+
zNm;d7u(}vI8I|}(kuNf?b#am$U9nG57m%_NWl-iK99gwGa<5FUzRy=r*5kXW$S#~C
z#~}$YZ@$l0eTvx4i*`;Hr;D#dQchLB5tTXGu?@C5mWftR9hdd74~i@(w8K>gKIPNV
z;Xoilhl<8RiiMqfJ`lEUepUMaKm#+CDpcjj+gcvg32MSG1d|wDoOVQ7lTxN`dsK(S
zPtuR~o_)I2dm?V^39hO;CadM@d1lFH4KI1yzgZ>kI&76Z$t*ci^wkMe@#{>p+$t#!
zv+Qc|Rl0ZE?x}^W>~-xD-j&PaBz<hWX?5^64dt61T+95YJ9uBbgI`g1BIyjZWzZ>L
z4+R@An_eTD7iku42%wU3O#Ck3O3KOl_#J9yNQt_SUs0ov={`;!?Bmr}nrO)zj+RF_
z&Cm$nik(srUakgyIRe5roo6B@VrXi4d-W7c9@jKm(~E<dSLo$!=!Fp{^dfX)yi!sj
zG*d&JAPz_(wM_jCAO>^;=uE_h^y(Z&x21T&AkVO1#n-QGS!pht`UzJ+PSEMYj8&Da
zC}^rb)cIjAx8TdePb*&3<FM0JQqRbXl7M~;zi?0@?jr(m0Bi8hP@Z86q<XfttO(Z!
z`ypxl%P=Zxb9y{t>w^5N-YzeTJkSq0;`5FIA`wZcs^Ix)O=!R#JkMwlke;nNrmfyC
z0C628RHYRGE6&x3!&(BFqhH0^8+J>2`iz2k3rCLfL;(H38}ij~NWS(v+E}C?>gFAd
zVb9&C(R1dfaX9?IK7y;9R8O|Y&tF0L4@eo%#!amfT(@27&OI>#d9iWq{({tgb-wQ*
zDSq{7#?yi@&(@9Wq&-H0&v~!$v=qDQ^ufReNn$t~?RQIQ1I`(9qh&^d`NeD>-~V{F
zY)lXVu+5z$uXcI8DhWa7#srb<@s7`jjR_9(-NACKImuP+v+K4?WkbJ{YH~Gpk#Lr}
z`E_j)5o?g<XSQ<}QdiB<AZ-wI+!LcPLwAUwv1c~R6B2&vroEE+#ae0i9wQ>1Q`cgr
zQ~YuM${$0uZdySMDTHT>zkgZ*rV9LDPb>JEpMhxw1EEjt!MCmA9}=<&{Z6{fZerPp
zNIx06a%SHR?Kw|FK6Q%|4LuG)sb`qiU!rP4Grr!MD`fk49DiHyU-u=cJX@byC#l&l
zJ14@|WoL4^PinuyaF(pdU$M8-Yz%j*Za2Gg)eb03tgVO|sdfdA2?VE&JKrJEUG{9P
zH+xsNVZfc*HIq=`hqq0e#tr7#7oRYm;)CgJth0w7I`|g#zF{t$#<X*;XGalvpzmW&
z_YlcIS4Vl}#TI$mrSy~p6a7p+0r1C)6+LrzCLF%CKaS+5d%Pu`o@p<y@YKA5+sPH4
z_jujUejwUH3@H!)DIPn1P68=UNTQ?1&q?Z(9rPa~2u2tR4g08{*`HM|DwW+6X*de<
z%1hL5iv-VZjc-A;@!$(m-y&3QckNN(=bx5z#{D|E@4*KoZuM#5`y)EIV~;v9YSmxE
z&+DkUbuk$RHBXqAjT??qf#)PdID&@`@ue;_Au}tOS0~N-8Ie8!YW<aPq?>fQX2wQc
zkNM$<A}FlWgr7dZyRUoI)y9Jnsh6*9^;BbHgXFhrWo$GfHk$Re=Myaz_n8@1dBPiC
z&<*KxH2d0Wnjsk}-VD@gp+>z1Y*s>pr4F5vs6i*y(2!FsG#=Fb?0b_s)IXr>092_;
zy%|xjtFqeeC)%uo4yO+FW*xqCyzYCGI_QE84a9g_Fl9BbD4wuE&=P(sA~<E+V5Xsm
zK*6PZ!%t~k8zwkU(cW`}?eJ{*vhG89nd@jZH2TN%N#Byi&}bAxVAyGWP`5VTr_Ybv
z-DVWs4JK)%bmBb)3}r2_ioDQA)h>M9_zUvC<O_Flay%(c-+~Sz2hiXT9x*gwvO!^Q
z;hDP^`A(xdtH|8I*8GW!1oaOxOgz&jJ<OQmBLB40H|g#At*;D@7mwG(FS~li!G3o4
z1FfF%W|+h|8FItpBuwH`P7)_!5|?q3I0@s<o}Q3v?(Wk5NM4YkuZ>`MwrthQ>t8%u
z>OJzt%{V7UD-yL1b9{yT0Q)EpNeB9lteMV!K6|I}-e88dVB(5!%6I+o#2*zw6HiO(
znzxv|BKJtK<^=Ygv*PRI@x8me>HVu%bP}=f+lUY`ry7cVZ}l?WGsvZw@9sX2*%kFE
zEtlKsT+MD1`KaN%hl^WA8z-;nY+NjU#k2LA*#o&V|FvcmHJdHkIe%l1hhdhY6=C;m
zDKF?=^{gc&G}<kTetQ(6e5~3WHM%W}MCu1nABKHJMTM;^v5}N{5%+i1cL|R;FNYPx
z!qpj<P_eeq4irfOH)Ze4etlCocu3AXH$VqSQn>`@+3H?}csVbGWRT6V-$;4V_ocD;
zka)70%`LfpX+&XvK7j~=5#r9?hZuqBY%xA_Iz*BjJVe#Y{2-Jod%liU5Bhpp;tTsS
z2OM0Mcdn#<-4W;P619mbpSjU$9IkoZ%xrNqOZ6kpdHC8WD^Wi@AxRwn;ttu(&W~Qe
zQvAWtSKnK`LgU}}7Yq5c!#tnG*3TMo=d-oB$(hRLUgQ6qA@a7ZSIr$@C!CWqg|3)8
zp!;F2^uu4-14}2&l^)m@?}66#!b9N77Vm*>>4828Q8$=9(5idjXuJomR#)gAIIRTF
z5=Yg87ai|`Wzqu(2|0$@z$R8GMkBu|Ee9M3@|#kS_p3|a!HN-{B#m`g7-U83%fIv;
z?uUW{&uql_eITEkq=I~QzlthXfc!p$D<J=23J3W|Gyme)j|^Fme<<RdTcRdXk&`0-
zsEK^;GIh@!n#3Fj=KfiXo+7?M5l{}gB3B+^zmRUoIctV-F^5f_t?06MS47r2TR!x9
zw&o{9{=00##_SW#o?H$QjXh7Kv!~7R_zBRW5EQz-{N<y-J&wOQQn>H1CnRQEIdny>
z>~Fkr5NPae`DDDWbQ%_$@%Nn6^r)+zQ5(&8YINhW43DpL`l{2L4lqe=Y4u%G=Un|o
z<8>Jx_5j`{V$t#*=h^b=c{}!gNL|w`m~zQt5N@7#^$gF}sn3XfPU~gw{jlk(jB#Vw
zMbz%}$~EYCMG0-Zii*+<why>xNy$v9(`xsb9eY3F({WAR96Uu*ZBHm&o?GuPt*2O1
zN#0ZMCX9F{i`A~iQ;NENBh$vqs06fhIqTl{KsHozx~K=_U{eekm4LENc+d81oh+3h
zMC%3cA-e52jYgS&B?Y0(k6r+hFWr*N4%yKetzb2s!#2)%_bS;T6PhAOIgkAhI5C@+
z_0QoW>+j-2?n$J1{-c9c4;ToCioKq@WV_1P;(9m_bbjr@3ptcYYC;pS$lin^;*{f`
za$i7eB1l|g65F@*#v*PJIOJSi&sTN~aG{D=q*W1%Tp_d(syLAdwYjCgL(Scyl!#tJ
z_v*Exk#Mo*zwGEENc4$$EuBOz5Vv`yh~{o``N_3r7dnY2fDxU<BDdqPpbfo&nX4Cd
zT_<`u&x_Q+Uv)qv2#r5STjy-Z(($HmAveV@qo)U@2FQ!d#8;Y$J0)=se54tg)78nl
zl&;4GAW~PI&XocBl3N0MqZlpWlrfs{gdGbR4Pz-8Qe%UgQ=)E5<U_RQ(&Hp{uM`E5
z(&BuGG>>EY9Ef(DNp_xw^>j#PdoTmfE8+xCLxj_B-K$t3hJew!Fyx0gg&u#9*)BVu
zyJ~^{4bq%V&*yQFNs<K5U2{p|*_sTkQZtiUPcb98BsCxue*)<yklZ9)N=b)K1rbBX
z!^}%jnGBH%lAVe4lOd8~yn;}Z7q3a{gzUYA&A$8!O%JE%%Oh7Oka{Lc4tZ-Xh!1v9
zLwTTBYB@OQg~;`AutvKSx{X@f_I5fDm<eq&{Suhj;wyy0pCS%(u!N`ku%mKMfN#;5
z@Nv)_TYzr=&o8CPsGBhNc1?z(^MoGf$r|ISZ>Ct9Yj&1&6mvqKNHytDL4!#T%!x_@
zcVz-~Q<FV%1*4+~9{FfjyM%M)?K-C6;*@Zfri!pniNdLt(sT1)h~S!xoXqXPnF0&K
zN~P8Dj-Qi}e`41M#)T*9_F4;|DFB6pH4v_@`odX5<4qc_G$}jlK`ltzX@CO}q`mhZ
zTMu^lBHXdcGt;jy)6aW|ks!;f8G6%@!Sv=}=nt$>L)l$|F*EJ;X6RZ8{mo!#&<wTe
zQ4p_3#W(ALVcgPkv#5ZXDfQoU<=yd2XOStiBV8+=Sd~Y3mTu;`-OTd@4M1|ZugPlg
zr+<+=sYCOa=@**m(;51te>|T4MV&rnXnJ$m9elF>)*X6~J?3%Q6J0I*5G%3Qu)~+S
z9Pc^W!cX7Q%lh&3N_j?>$+Mw~r_q|(K1-%y&&FM#3DHw?Q%Z8ACZXx&d=4|3KXEp0
zyy#2lsPX=bzT!ud&8h>DhJHRc{v&5eB(he@dm+G6i3$WnG}q7oBMlN&QXYF+fJGVv
zys?)YI_*n*A!$a7x$)Nkmno$FUS14cRM+)TMpXc`S3OLii6Le7!rfsDqYu8Tsb>&F
zTBvo`DU<<C;w8<mMWtpb@Eleto6J)3<E51AQjYhFE+x+@#n9+7blowdi_Q_Othp<g
zVkH^uj=}Rh!MpLfo`2+IXan~pT(vRJ>Pen0?U@}dpLq9v5@!uQz=$6lO!*)O^I(?d
zU?w~{+E+e()fkI+xf|Z)()Vh{aXVV%8*+|;I0d%mysy}m7WVJG(bc%YT^sYR{*K|1
zTOr)-;q0ccf6Y{2o?8eriGLZ_-p)~TUA3>Vs`a6UU)WEc%#^$1b@{|`&E0c!`6i>X
znq2ke!lala4#eYal{dZrIqpHe-#p2C+Z26PNkt<e$&MrV67_p{%<4ScwIh{Kztjw8
zYW7YfO5+M*a~htvgqojaWBgT2dD*z~y6&m)kDcwa^KG@_dj2`ik9M1Nec71v!1GMH
zeMmlt^W4)%2J!sa+wv*Lwc$H|;)L;z)CnpVpys761YT3&bIh~c77RW`VR@r!p7<mF
z9JX7nkIZbK3}n9-olx*E2piZQzVi%c?Ux?Wkmz%?&oW`w6V*O@j^v7bcV1-S^Dm0z
z)F|jjgy-=0Bf>*-NCb9=Jl@%JaO;M(T+RQDFMOVmYdqr%U*&fhzX$jY@Oub_c(#P&
zjX6(0zaqSGwt(O&$<xml_*eK|TlKzaLR1sz&nId!r%xcrxM9P)2LrR4*$(A*ds-50
zyRqaxrTj(Pdk$~8N*u%3X-loF8))YH&QF&h4sN9%St-P<N)nQSWHtU@;i2)l>ssfz
zxfxkKDNED`qiwcI%OhE+BNi|Ej=`cIB*6(qw~BXPPyHT--mtPBm9hk^=!JPL)v&qa
zWLSF_x0V|h)xPiWKHCA@@T7WPX$xraXfF`qYqIhT9cqkiB#!e%k9KnvzQ#2evC)h$
zy~pbaq}~Fs6m!PeuhZ13wAKVKX0f@|(2iY45Z#{Sm7sE0xZI8Z>_*&ck8dn>s*j{s
z+m`GE)l%bF)tGIA4j)eDt>O+Rp3zovRveo&9ZxSfNqf`i!^*$}!&7bNYSz&3p{{dw
zww7arJIUC!`KLIqQJa_mt8wq#Hy&J78W%|*$4P(D&7c+~e>h$XYyQWq=TY%ZOMO2t
zH=Cobr)gsDpfWHjR+FlpVb-e*tw^P{2c>eyE3jmz;0Md$GJECv0+)q+wty>^tz^2b
z44o}TI?luHW4X~ANGhtm%ohAIv$v>RU2s1G+))XOIHsI^V#l|n7u`#iViiH=D9Qxe
zY96f--_?Q9)tDX3FxzB0n37(>B}FHjEM_t($ZL$1)}kp~jApSD2R+RiCp%jod64kd
zYUj2K=mYi6WG!AT#;{E;E0QrwV(C-NY8I9&KP@-<I40w_va%|j&W&81+CJBNIS5i-
zDiod-AcORlxY-%(tw$tu^ClizpK1Iz5{MgwbOG3|W>AIJYS*?>sn3;sn7%%KBe!Q3
zyF$zRvA2#|CVqmhHk{iq)JyYl20oNNio0WPnh_HXj6Dyb5Q(8J+heO;%GO9L#7Due
zC|W(s+GCENYMc7=1JXc7ZlZQTq}5F$^E1@>@RGQXw*_Q`k?yhM>4f-8BJ-!KQKaEc
zEPcQXAdZLw?%2u<60g;Xbxdh>y7Du(S-qp(r*){`Q;(haJlAAXJL_T4g}ub8cXrvl
zZHe+_SHEDgsifS^(l2o!6-Ew}lxZZF4@JV?86-=VTD8EPL%%A4Wvr6&6z-B@p>yO_
z5Yw;jC1z)9*CSarO?1dypu1xQ*jq@NMswp+*A2{=EukA+w)O&N7UAu7i4_c#n_1d)
zmXhOHgh0(WXiMEVG}@XJtehKl)SMG?T2Z&_sOwIM8dB(lq0#X|jn8p;-=6d+<FrKG
ze5UBMxa^gTAa}X?fIE%M3WFmEJ;6xvQFR75sk-JF4n+!&mZ+U)VRoC^n~}6m&5-!V
z<MF@#M*IqiKNyb>Tk)mU34-AN<e(JAjO^z8@-UZYW;Q$y?&acXz~eg{7?Ur79nAEr
z4i41qCMui~kra~kFj<F8Fh8CS2}~`It#KM_m?%Z5+8lmNm6tPnK=dDKJ!otGpew~N
zZNNLwC<Qmw%Co+C!&KA;PLt`bCQC1yyVTCv=B$aPGWdbA%PXpF#xZpl4KwCWql^hg
zRyFv1gak$#!=@+rY3RmjIDVXNMY>B={RxrN;eX5#f)*rV#y&2qf9$OLpccplkLL%l
zDTo7SN2nv=93Nn^dwd<-h;cuCfZi@b-KRU0_w+vAZGp2<n>^?7(Sb8r^<?RDsri&4
z4Q>vMg)2gVzEU<-i(5$`l%p<?)?uQBi&25Ug0z(C1UXr~Z(}^0qdeMfv_)T`n-_Og
z0G=0w7P73)Y*-0YDdnyTo!lIP#jb6sI}*IPuE2OS#b!0OC3u5}x9x_?*vREObt2q(
zyo&inrm*S+ZGb22Pz~iWn!78*tDWlpf8k0)PhfI|@nh#Rf(Im@vvGHAvmJSCX*4<X
z1D7p4+o^spW#l`<v!#JtRGY$gC0|QqaS)V-#9cYI&*=q^s*}`fU1|Zp+~{5JHj<EP
zLkp+N+|*a#*|-A$p}y~V?t4yNn$x?U<d^-93;lk8uRfJ>#+Io%jN{9E=!tGHikv;p
zMfN}qF=rU9Eqw^eyVZYg0um<Vw!Dl;c-}d-S^!QWDdI#-X%qUAb6$(`ggRkh0-oxG
z#)bWji@$Cw9I!2lj?QjwT-@JQ__Zy++Kv=AQruVVC}rvGFR=`Fy_qD~PNxD+qcu7~
zb~alI`vUmwDn8cI=^E35xgb4j%E5svyQg|OYPO=pKsT#})IFT6{!M=7I@J&PHRdtq
zP;|S$nLD<yI~SIz6luUdj=FQ5tJkF(m>q5T(t&X~^ztrsd;X(^I`Sf?JD}yxx385$
z|8FAPD}{sb_vy`(ApC|n!hd8TT#bbA_o&VZ2u~P>@MZV?Z$fwiHpJ9&L|y+B!u34k
zZ5B$0_^NGH53{Vv0I76p?CW5i$Q4hdzufw(yej22#?z#kd>P$US$veoCgt#zomd5z
zU6m&xn>(4CP6(c(gAWc5F44hic<^;P_|Wj+wK}+ac<@FYd~|s5gF3ixc<>WCxPN%?
z4jpWRXFj3c2XwG=cyPB4b`1~q?v}>8hX+s7!QSD)`8qgdc<?m@Z%!rjM8sC<)M>+0
z*X!W);lYpU;EdtH%{qA6@ZdLe@buxqN(W~R5AM^!GlvJK?vcjl3=f{EgY$+5U!#Nb
zhX=3J!E=TOH|pSd!-F5y!B-6rZq~si!-L<@!Pg8AKBR*e4G(tVo~(THb;E<xb@27W
zgY$Iovf;tk=-{g1!MEt(TZRYM>fn{bgE#5m!0_OQb@19@!JF?S0HcR8xY<O?sK~xZ
zMrHv2K`F5K@x5l8*@$LylQp|}wiejD((U;JbNv#WYc&T>_q7Inu}Nt%)L+SNmMC9a
z@FP@OuGOn^3I|&hS7DX3kOeO2#P{M~?zx2X`M_J%V`Gz2WM*iN{@JXJ3|*@>lgKHx
z5l(urDxUavs?L^g&e#8FqZd8La7G@b*##xxvDeYm*ra@^b2qE===i1vu1d#+j*Uiy
zF?`GSh-8zE`l&1f)M(yjvz$CBN9PNhAgl$%eO%fo0-qEX@AWA#D_#}+Da(MbtunIG
zerJNwo!y)r%Pq{PsE|l5LSyAhI0R0s(_@q7Na?#dx0Mr|8wrm%Cq(ACd@ZLnpWPC;
zY?hq9uQ^5i3`v1;AiTVfla7pb$E&ZhQk_zwo<Ue+$epiB!rkqTci(0HZgt@eg|kzZ
zviEos8<V1SwV+Jk%UW%Lm9{D>QXz-1@Sf5QN(?3oqlH-wPyNfpJ}Wh7Sm+L1U=(Uw
z3tI`qHpzXzH`^dCsp6ThCNo*P*b38*i;uVCJD6jcsNNVQji9EtSS^@XqI&D41ycQr
z!Rkj7jQ0pADyLk|j5)a1Rr{P$rDE(HD=Ko=r3Ft1rDar}_Bi96J+Vw>lddv4F&0dV
z1yiH%8Utl2U4o2WIqsjNU)v(fF|Hfe|D)QP5rMy=^a&y5s>=~n29rzFeRq&mcR30U
z*|Fz7BtMrFf0nu3=-x9>y)ZWOi{0;-?B%bBGMU(kcO*uZ#G;PKdb{td^}CT1MUxHZ
z7jKXds3rl)9ih_&<&VIv!Zob*&N@f|t4A5mKRvNm*5>SHosuD}2edha&qnmRtE2?#
zk><r+uAMN1rhYR{VMH}nSrVHx4@8+mN?c$tE*T&d4B|2w`_)sf%{+$Yf@f=rC*pr;
z1qQE^BK~yG*4>`1QzEkoK$7Z;%qE1xHlr2WWeD~HV^_e>OJ<w}1zJ5@JFxGzG_&Pe
zxI5oinRgBc6Arf??s@|eeV162VkU@=m8QS@bC4^%rF<N^%l!CgaV!4MxQ+gMl6HL?
zMP1TMf*biZyFzw=h*R2=mK{y-nmfUL(!e1*K{>Hhwm`O=s;0|hygU-wwMDbkXlOc`
zs19-l#6eFKgz5c3s?bK%D^AoIr^J*f542G!j+v^xRq4;N-Tno8BIE+Olu#*dUokk+
zMmBXmWi=Ll_@upY@y8<X2+g|c1GeOzhCdP8o+uv_WmDfL9cKf@>NBJQ>K>Y;9_CRM
zVB=AB9S?P{AVt{7bJb`waeCDviOrJOb9Jm)AY7mA!u<e5;ROLkOkGVt{eDlwjq<UA
zVj0Sp+1O&L8_oI#@N?*{P5_(eBv`VZ*qgD$c~lS7a93bim@PFGfKGR|HZA^`EvORf
zRh6yP$!ZEkzFO_B$`?#LKm#6;j1A2juud6WFmJPbsk5n8W8uN$NJt2ltG5YMk1+wL
zvqkiJjz&(r+UEe!+y~w+kSeoxa*X>x3o19m>Z6{fm{{<jnjWvwJrpT5x?XDJplH-@
z*eZE)XGvW)NcX%!>AEs8#BQNjLLiZwgwYv1Wb$yS9mL}YFnCa=Jhag9i6_BwoH7`E
z&tULt5U~yp#q7beWII*HSahkagv$);QX9x<zEzWp&1xbVk->Rpsoy_dYTzO>XpV-D
z(>U(5*-K+tRSAEwL5}>dr@foaNww8juDBQ%JZK?}6V_qKG1u2BMg+Cegw7oJjRkgz
z5Hm@Uh}naQ>S^?(kHdOWL}feNRua9yg*vBJr&n_RUFh1|VKVr7R^q$dn3u<8u&o%5
zDNS`SM-(L8+&#^4*!N~&3R8;jO7|*!54#+GH%d3ypP%M?Gx&)%#%yel9xGQ@(p?Px
z^kt98z<aTT4#TH))X6LYF&Zz!ZH!|WbYBQ7^Mrj#tD0hFNLE35J({Ye_$BIB98Sn2
z;=n|+y6+J=GHGRm?xxK8=1K-~t9to6@*dPF4n3ydlT|Z;(Z7*c9VAHoflod_jrs#*
z4&W&oM;eL6DbmStE{8!RldqZ}3q3QEs?`|+?y5yH06yI;!$rAJB$PFFKO<Huv;`=Y
zT>-#o^y7~uxh?S;GT7B)5Rd9d$U!C1FrdVlW-UjP?`(2ZM!TM{o9o6QckQf&<gx{v
zPuLNbqin<+o+z5`>r^j@0TthZ0?slkvq>sLV?0&Mq;7TQXP^jmiSOzTjs%ZZ(8(`J
z)pbv^TE%-Bxr1CSD(rvkvBzGL{AK`I%&?_xiBc6iy|c5mI#C@<l+oy_s+G|ggtTPb
zZ7cpBddIm$*}TEUkL2-Fw@p4u3Rz;WdS(m+z9P2~8t?`$gRGvBIL@s~)dLI`nF%qk
zj!5>-GcD48!j2nnH11GjtjnR;X3zc16*54q1Q&8TdE!JSy}BPHQ<g`h*}+lS&CdwI
z-D6_4c9wJmSNO#fU~qyA<F~++{65Mpq{>PQ`x;{g<3O+#dY^@ZQGwq_PK!Q(@}gr*
zq|f;!d3yI%p4QyE`)s+n4}2->S>|Okc;7svOvhQ!rRLFM>0tu9v;TZpwf4nghr8Y(
zeaW)eMPS5+;(|MKS%w=nBs|Sf7WWBR_S0(8#RgA34!8b;Jjj0jm$EHCdA3sSM!C4Z
z`@YA~a@x)@EtOqObp2pxay&FZsGOIgZy~mRykk0ex-sA~C&StMzIe~=eII-M#P%)|
ztET$xeaGHwiIRNrf3VwgGE&Dh2gUxDSP=7Ozux<~&gtfNZ?wSZKovvmFp0fT_nxjj
z`}cgZXWy8e!K1xLjBZL#B?W3Ky&pODtQzMd-5S@bWQ=aOYwYv0Uq_xSFzGZ_rAgPp
zGSPXlNsD-?8s)S#$0l9RE8NsFest&79m;U9hD}!OPuhjZ5~~v`|9tM|l^-%>#@-^&
zNmcSZeVIHjx?Y~MuH(64<D^FYGxkpXbNV9vlX#8(Ij2PboPQNR58jtp%a2iL+Z@op
z&dqE2#Z>y{diicR02Q<+Hp_TK-1Ue=ZoZSR_QaJurQYp{0Uaw0Nv-u(?Ob$oGY0hQ
z`DSsoncs%y+rn2R_VL})X*0$ygO8K%s#{oK)cY(Hnq}t1N^)69NHdYJ{f{ORIJf$L
z8VLtM!vDFZ%i&t1wBBr4vTj+|Pk%V{_~hAXa(uFumY?kSq?Yh@yTr;kw~ioW=vF<*
zJgAQ#iiB~}ktw0&IJGD|8d~0GgMzZ4AWqY>WuonmO$zWiLta*zFXC|`Ht80fsGAdn
z?7~CYh5gwrJ6p{jDzA8H{zv)Gy~tD*^Su^uHtY(1OW`sLC4Jv(!Q^MICNesX(9vVZ
z&&B&>Cxb4m`?hz_(y;E-CG0cu;R&iXVNW17X)Ul?^}8B-F0)wcwx1H-s=f^hF!>pB
ziK!!n62JMCz*p<GwSOZC%`=BV8ROukCx(zfwL=|)NZOqluR<&lO{t>(usKC<n8FPk
zndrljMtMF^FVBZ+<@xlT@_b<}&lMXVcvSyHeyV>S3h1APmHOwgTlCNGs`z>EzJ>?+
zF$$gGhWmMm$jigLaN7#vkg;Lp_g9yM8#d|K$E7Ays0lejJKXJskF!P0Z!i2U%MxdO
zPsJwP2}(H6TomiwA1QpC1<`E5sr%`&fmU;Zh!pnGQ8GiY*1GHW2VFE8Ce>C68y!05
zVQ^?`Eh~R9?FonXIeDOijP>=)U=K%gG_DU_V{e7poS0YXVlj}k8Io2W|0r#IVzhp%
zuJ_u#)~dlQ=MAIy7vV3nleI&y8<1G`pGv~Z6+2?|U#w+QT2|O?o}BB2XmBquxH<_5
zpCg7RY@tIL2#scsI(_AC_=eGH7d|G0+qng_g_d_?x;Hddq7vk+D15r)iL5(N=J};@
z<l1m@c#SiBwF{T66>fZ5;ynk(qON!D@>?<WuP(aj*5y}F8KdyvMYjf)-vXK;Q8Q~~
z@qsYzIQz#G_Kj%|uXcvN>k5~-@pe;q;GFKuW1d;fNp=pHW?he~%0SwzmGU!bR!Ne>
z78pk$Kgk3-Y}ikl^*D73y=D*VmuQj|u<j@-K?i|(=Y`eDi?Vl~2zL-9{y=+MMUN#g
zF7#T0RfYqfvrCu!8vex=SYfu`*`BBkbwCP)+gyS9^5YH6Md`=Bn~MWn2oPqbxI5ID
z6zWR~Uhs&ZE!5#MGcu#vHcLoPYdWHdj&w6vxG5cscN#f<&gU;TF~B$!hWA8*kd@e(
z*`b+{4r9kT;y%&Wad_1jqowkGG}N6Lhg;95%C-hu^kaIswA9j_OQ|p%#yqdF){RvL
z<2A9kw5OqGZ64M&Zf;4z427c&!B^-Qt|Qn@g;dHFxtQx&>|QsTPhTo;>l29$CSw<3
zKDiru?s&bx_tu)pzL(cbgww;lPHK3O=r)8)+%!Y|{)YH8nX2hDQmjJDl`Wf%pd47S
zr-x3sgwF6h^yANLUaCb$Erautp{gQ<%A{VH^HO#->h%j5)@)s@V1s#6Pr^B6b?aQ>
z=PNj2+pC{qkhj<^I&Jw~TPP^ByaO9VuTJX5TA)ZTBE=oq*uC0q6sF>2R@Y%4vM}r^
z8HMQ>z6mWqNFK%CAzOI)!SD}Nyh0t3!Va@S+=l>~+@;se5I$O+ok2i80T|L?#up_S
zhF=M3Vp*|;{gsunM1<BIvIQnDGftN#(i@9A!j5HO{S_T$#EWMI0e#YSWg_=z22K5g
zc`Q{JbYK^|jUV<KKj@EjUb_>^US?O9S1dC$gNYj{CV~Z^RrccSJ^MA+Q_q}6p`2fa
zI=>b~6*!j}vvhS9_l12{Wkg(H7Fmu75H}uDvUjNg?fAMpR+AE|aZ91zSdFk!>h(;S
z_|r{66lKaLCOl4!Kbtnr%LvbRsw7^+D>G!dm3Eb@FU}%vWrq5j{1&@>yOtosK(}mO
z28?t`2KI=f$s9P3iIg~v1URr!(a%K@K7qYd<x-QXO3U!1<d$Q^Vz>G}bpzG9Su0RA
z!y$KmhV&6+5WOW@jRp$G$179y6Khbsn@!NKx)pA-6$HrkBsfOU6?Ch|;2^}^xA~tw
z5EW8Wcd^`X&4|fMI^qXu#?9%mPN11R7dnKQg$iyGG1qDF9@uA}2_P*6c=$YxF=j=X
zi<uiy?F26(wX5CWv<2oF9*#u)ky3k;y?|ZhvCNmt$|IHbGWEc1Agr4M{=k&jB^+oM
z{43v}VHb-X0tHuFzSCZ=9$&^%wd7iCt6~-{Ic#q$aN10T6X_c<h=~%^#i~w{g}!AI
zoA>mLF=-!js2(M#JiI?Od;8vwRxG0ncQ8!!u38bK%HD9F><ueLheAtR19dq+SpCD!
z;4PuGUPo|6-P)A&#GgzFOyK2Ac^SpaS-b?lYs^cdiF1rnC*sDbva?)3|EMeIGiw2h
zemlE42Mu#(z#h97Aw+(vAt%M?0GAHYvf&(H*!GaEqsm@vQVGNrTZjlmj}Nsz9c<-i
zKu}^z7G(h$2rThm&~bwjTEW>u#36R$cBf-IGvrv~3YU>`is2sZ*yU)k$Q)v`)#WUh
zJ-ah-MqN(v)%>1fHU3O>3UET#r`o!HdmW_WlCQO?w)HOc^;CGfd6=tR+}gE?I656;
zP;%IhN{6fR#Rp+KBkMYkJf;O-fzx}EIp#6Ogu0xi)MsTn_utm0#!pu`4hXM9FD&5h
zNp=O2#d1{s&+NjX;ua0LS}fQZo7BjFw}!L1j#QMRoNrod7K?^0nE!0^4b-@>4}RDE
ztbn0om<D^@$;F*xwKgQ!6FtwKBP$k{A?_u#>qDrYAX#qht4AGq6rKddxK^V*yY1H=
zG6csR&mi|athC$^`ZYOw+hqy#G(05lZRWf1W}at1PFOwGNTQ{Y8Yf2nH#iA$tR8>F
zvwmEt%N41?O46GiT+a65bBuL*x#!uB9G=iqysz-wHved(=BU9v&D)lELtR<?7NzsJ
zH7in+6*?y0dslca^}Ov~;n^^iuTJ^eE?;xKeEwNJ56S0k>5&attG7mK++Dx7itdZl
z^hK@^D1X0fDmbKU`5IETd=8fFik4H_{QgKy|36V@>>mv&SH6anE1!eqI<fn`YT^;k
zZD7nBsi9>Xz?e6xJkP%WP3*pZGVF5j_S6>$EIZAP3QWXSaq<<RHf+z?%^<FC?$I<N
zwzylm5{^6;`oIy(ctB^%i0mNuCV9Nd-#-2h@n_M<CMj&_JGM`-z;1<rV~IDznu-!I
z$sSJ|nK>?!=h0A0P4crS@_zcrs%eVx78S{Sxv41DI5#%`>d+_l;1QkW46+z|s4DTH
zPo1I9oL?V#te+}h-$Pwj@>t7XBYzL_7l+wY<Y=7h7*aR=ePX@LG-lWdZRu^7p%Cy~
zG5>05lld9^+#FJ?s_H(iCA#i2dD2};{LT0BC{O3HB#Xz2d>*%!@Tj?-$NH5=JR6ev
zyP9MhDoD0rDakh6NU{yLk!-^nl5N<qvaU<Y>}{!K(hhE-`K!(jeVQKnj2wettb#&a
z>AfwTlJ4E!7LhpxCV?6dgoaWw<IoHYMwxOwq0j7`4M|hPD!}I!R-znTzRGReP7iy9
zh7SP@X}rIo<&)&VipZlGeA_gACkeI7I4hSyxrE`kA(_9cg+MC^qAi4Db3vNSqvm=Z
z>sJzSBVn|U#~Q+DUt~)yrAA(o=as?D)NLtU`$-~;$e9sDvnSxwYG|Z}L7jeO@UN_C
zfh;_IbtRx(eF|=SaG2BPG+V@i=P;?gXzmrkUaR`hWSj!x?Rgf~+J?o2mrIT9vP?R#
zy?sjKWSy%;B?QJw$;@HQVDo}UD!aO1Ack`A|26;8xt;$t|2{j?{5$ij|E2j?XUmAp
zA@?SET*coa{%+xKa8CRG*8JN^)i!nW=;P1TZ}X<{H(1yIntx?d{;&Dh<Sz%;lmDyp
zubfhNw#cEyTU>~BimgSl({)p`oqxhF-2EOCytz_)?lO2E!tMSB>U0`kwhpqmp+AxU
zGd#^0`fRp2Uc(7XsNEa-xI6PTvxu6j;!BCSfNWwJlf_SXxD9jD<&h<ie0j)1H}`sZ
ztTdOn_;QXwI2Qa<bdVQcec2#PS>w}K`-MB0%k}+q)^);GAL?ykvtbK-KXRw1b1>ej
ze{YMh-hpvg5M%i>zk-K*TVU|n8nXPeG71O4xm7HX9&dqOUlI4s#e1U*rreB&AvBSq
zUYf{)-yv$ffu!7mRL?I&b|vGvj2+hk4scxA`<t%IaQAN4&`-gO%Xa&Pui)1dWsVEY
z(BLN_<y<wP!uYD?L+*LXkJs^D^t7cIvI>lg=g22V@bI;*lJ>90=<HWsiVX~`cN`0S
z9?O0W=>Z;<?Do1qr*UOJ<)3|FG%$q=)V#WRO^9|Zjre2Nwqk8?sXV{d&widP)NIMv
zk6|pP9E}rC{b(3DfO+bV$W1PJ*&ToRIWKr@(1CgK9&}ZNzGC+@ndTWuzJvhIk1)-d
zkl7dH3i5h1ru}x_A;0z5=<*ZJ(fCfB@csgms>Pr>7CpnWWxj(rM`lN0f>x0JMRUYm
zsN)d6Lahz@4t$Z*=XVCK*5&)1762Sv`V%bx7zgtwjQ{|RYJc*`0LCGX<Z6P??}`I(
zSpd-X_K&gvaLv#^dISJCfAEhP8Nlx#Go#4u^Sk2!+!lbbWE^V&z>bA~+z0?L72x-b
z4B#pa!0YpS10|&Nf^e?|VLadCEeI2MpD+RhOoI6*jtt=w>EfakpFbtugcJ(^_hJ2$
zEC5&>@SidQfXT#79vMJb14#AxQ{w<qEdW!<IK={RD(|O`005U){?kSVFiitU^ZC=_
z0MaY~r<3t?3jp-!KVt*{+`{!w9T`A7`$JJdc-!&0V~_7`PpFIa%yGoAH}ut1&pp2)
zHkR?w{T{p5C_3o#AB@-HpjC^%Qu<%5T71O&M<dkYW8yv@xfTV$F^ZJWui^ld1)z(J
zT^4{(c>iPs08!$iBLnD^-DS}spZ`!Cz#$93-^lnk3&5wme>wty&xreMWB?m9fNr0^
zI}V`R0)WM0|K}Ef!@M6J0l*RBj*JXI?~jX)`us=rXu(eJ`lA+vFUa|Y1)+!co)IAQ
z64yI2gy&gSjG{iDzc1c|J`2DxG9I%4e98NlBLMh{xUWV65L{{$_51w&@xuG9!o|Sg
z*H+;Jybp{}IM&Vlu@MVr+BI61b~#2#8$R^;Ka7L<&;oOi>_W9NuUk}m(s|va;t}Tc
z;LnYskA41+<Ar~06|N{;C{_x$DE6d<n-n}k;rM`I1u=@EK7TY0AZh_P1OTB}0bo(=
zNdcG?JR*R%+2$HWpZWZs#Q}U~0pLcGUno`pSQL9w044>G2w<%SaKz_75(jX^0sz7K
zg<u7MMX)CYU=r|%0K`^_QPk`6_v&E)Nw4p<Ah3x0g<=JQMX@J^U{dgi5T54Dz$p64
z=l?3+gs&_BVi8lQRsdL3dr|-<6^{tu8URodfAgVdPyHOePh=vxX6QP6;PZbFufqpc
z9X=$dkhIjnBI%RX!6fk!>#&<y-YELW=l>`UfSFtKKjutr0<g&XqyS7Z9}&Q98o(z$
z|0i((%-kA)Ia8Ye4$&IO`lJ9%G9MAZI1S)apa0W10A_9tz?`W~02W!F6o5(QBLesx
zmwJt&!#@AvH~?mD4ZxhKO#l{IpA>*e<|6{QN(1Qe`Fk`eL-^~NxdnnhPS*6YAF^H#
zS)UAoA2OeRY@|8S)9}fc(u6O4{x9QAVCL3MFlTDB2^LwO48VMo%tvfO7yv7bqJb4Y
zKi2N=;H&Fty_CQ2^S`fK^**(K-vasptr0pF+O_ETq(Du&9ua7YZq;9X{=ddsB^-$G
z?iL540a$c=QUE4hj|kvNIVmgZ^7*^s0E7b(02T+L0a$c=QUE4hj|gCa2JknZ|8H>s
z!hr|?iv!UBEIK|Z0F$mq1n@aqLZj$&pZ{~+2~hfaVL=3f#e!%E79pP$f=SpTLby*u
z_`>J^BHjeyKm>rrfoK3G$8l2Ho!=+4Ju>ZHpaC57`H#f`2nQknEDl5iu;}=tEimbN
z#1{M+D?pSMXFu3}K*L+s!+v<`7eitv?)kd@O-u+Cb48a;;f%~~smbl;Ua?zha=W=#
z?AA5u8M0S|`M)B*R~&cZG;g#-%PEqxdmKjL(I#`Zyp>XFkv(&FAc-2h9({`ZlwFh%
zeQ{XYPGWT0=%bwL;^BZJX3rK|^uMF;&4rgucO}`qS)=UUug2KDTgTbG=kWcS%kKRj
ze3$dxk!bh+knbG6zZh%xuHf6v_gkaw-k<QD$oGFF+r2e>U&!~PPP_L?z9;d$$8Gn{
z=DUkBp9028zCUo-y&L&1<9i(6L*?nBPar#QF;|Mp%>V-U`A)}c+3p;5)t`k{UB-O3
z{^quDS1v(Ab6fU)w7t#pinhX-4XYNB)z;<L@)8bJVZX&44~O;Ie2HkH+|L;Rh~dl~
zLl`~z&K1F>;lhJ>Xw+&e2g9@bL$QItty~%6{GhlmGB*K>ltx-z#94>d9cn^INK%Y9
zRr7e8?GN_G;usf(QZ~$sI+}`O##f=Q27)`WS9d`)UCwm*7o9BSolzwUEalI_r^Jj`
z)Lt@kMWIi9NkC`^eRR~+>}sWI)=_j$Xx2|TQnm%YQzgIZ>M+i)c5vh!I1S?~gc!Tz
z4q03m{!J{i>XI;0;x=}xYXCvl=dN`JCYZnxnsum3GgyF!7rE7sgmEf9BpKi2s9Yrw
z{i^yif)jNrns};!@3_AHUa-k~vZ^A`)YtE&ft(+4%#V8fzw?25wrE3W&F%^64RWYU
zNlolg1Wa0aTfIoAnT*C#Szik`6**N8wIqg`6Pvu3jt{2RzaBW$RARrh)E-2OCV~4+
z^{)pHM)#d2p1iceg>Lyqt>zaPUv6ZTs9R^#;x;j$@cH0Dzo-k$dV=%r05`~rNx&5%
zZNuS_TKWTh@xZr*0?9M3L{&|ofNmXADY}S1;k&Z3T>XJgqeR6nLTlFDwTOEJp;=Nw
zEa=E?Zsq#OBpX$UT_j-!rfj98eU+iFVu8sx)TpeEnNccV7m3<}Gkbs3UtT>8Uj;9q
z=7?U1D27ZZx6-A?(@n_UUuK0lbr_Cs|B~HPu4?^MZV7<pR;L)ZIiW`7C)TK2ZKM|}
z%Z)xWJtkXw!R6UvgsAGy33jjQVOVUI+E<Daz1+{J610`5dnKdXTS!)->K6SgT{nn4
zkk&`W&{&NN>3nWyJ^UPcCHA+NEB7<37&IcMmAeHwl`c=cIMOppT-XJ5<)(TfM<~;f
z$*y7N+C+?FIu47$-gPPUJMTyr4T{qq`7PC8gwm59qa%Lt<Dk)jhD@QWr^OXWGv=iV
zh-amHxH<Gke#7G;b6q8+(Mx)g?SWaM!QrX@A6EQ-<2SY@1(lU@b>2aJ&nC1X#Tl%S
z8(Iq_ANn=Fe^+iigp;BLxl2=n-_jrg*UB9|vg)$cMx6w!iGTf27ZN=scTsBK64GS%
zBs;5Z*LogkogH4>Y3amZdSMK@Dsnp_ig<9i=8MY1_M)ieGz<E+|0m;ep{T=!F14+5
z8ponZkvrUuADI?>f+^(-N>My1QxQFXpz&u9oXI0Nv)Udhq5-Q@)!z<C3raAuRH0^!
zq32TLF?)x^Boh;_;4obrtFmfyuBnd`T9+=iEz-1kX|dsxZeE)bQ%cy$G76_dB?(45
zBeO)E`!)>-X2dQw??zUrG`$CR=A+<3g%&_H+B!unI4!ms#VRgPa(NkzwEMNOiX6H-
z8S71d+^1bV>JcA0bPbAG#=6w({iIB3T)YpJtj5JLr9{q)LzlunXxFo`66qNB<~)%S
z5t9X7b(e`=lczy6pF``t4*Y)dR=3{NZ#sn+t=}}37twF>H0&licS)M3p`90%$d)2^
zk=IlI5In5v7503kSAE8BTj4&tk)MJJp^%-pvNu5m&l51gj5vr1aS)>{5W!JWeEkzr
z;J;H)?xM873iY5AosT->LG>@Zq6JhQUX-R@;kHbr+;E(OA?4huo_p^goAC;s8;!Zn
zs@iv$aIUgD)htG**j(+G@l||qb_g%_cp{p5=i6QLB*Q{+(u8g;rkqh)!vN>H=flO#
zaoqfbTqbT<W&R#+s)^2Biq%**FOWb<r0{wEep{lh(j@zYri9<3pBY}Ld<(aELLY)e
z7SfxygDBS7H!wDZe_K)P-I43^-1j8WzIjg1eZP@(YrRIkTO3ZVL&fve@Ztla$-GHo
ziqeQNFr4cQFWen2>_D4T{BEN5+0eW`Gggxpn}O<-5`Xp30+cu%XL2lU^Fl4G+MOij
zcH}-|A=;w{LWSMleAGsLg|DJiP}mXuV=Ra!DK~>MU?cR!?BEV`KZD&uX!`CmCXS9l
z2%#O*jfINlgbEL)_^l@1^(}fUXK@<$Us2%uB_vx}nX@<+Ty7-eEi*QCmeAL#irl4X
zL60#P6UPaU+XM4*7pJ2wZGCzgHq*%1nlyZPG61B%0}G=WV7g{1C3_m`C7SUB#w$t}
zK=|cq4MFH`s%7jOprGI~(G_czDooW?h!j7eJPd)V1I#Fq!Y4}96%0ys5y`_)@cI05
z@hLnHoyrXGg)+ArpAakQMzhs!RRT>_sAQD3=+zSS0-|~K04l2H1&Vahd91q}2(<x5
zraB<J`Qp^jTJBTNmHRsS!hW~fL3r*;S0KCYa;<BZS$DbU-l4D@INNNJz7S8FD%8h&
z1;=6m-nHb~rChEErr-c9j4!|+yKSDk@6%XFM?05`e~?{giTcmiff_t0WLHct_xpl}
zR`0mE4Pxs<?XJY@z;JwFT5iIIxtzLe@Eccp4Zl0o(%sVObhPNjiMwWZa1kw|$Ce+Q
zDlC;?c>xRnx85zq&kEHK?=PKS+#f3JODO`%s)xHO>0MPn(?kf0hcZ3+g+r_1#(izB
zEpTg3LM_Z~Ad#gkc!RMNiwwTjKvrb7t7*!mslik0_Xj34RoX9IWDky$JKW6)Tv#}W
z`J_b6=unc}=gsU%=B{i{f-7(;3u=#z+tWP>-1hFV>EMKbBfAHm9Z^`3d}u&VmQ+Q!
z-G8SCE0tgGQgG!%9iJ15d`Tv{+?DCUv+6FD$uV$h-KF1>ew<*~&u;a#uNvJ`kdB|3
z-+}KQzjH<4Te-J8%{#fdL8$Qo!qMvnJ8qQ;0Wjja>Ilod-HlZviZDq&G57Yg;5dq_
zG72oRUt$6bUK;w5*Rg75?vGMxzGL{)Pzq(;JO{f(87vU#^sW>iw~(<Qt~Lp|%N=ov
zr<=?gc&Wq!bpUE6b_fRK3NQxO8gUKXp42S-vT2+wbi)vXYaN8Q+a*@mR@oOcJ4+%3
zm;+vn2Ptj{p4wbF&@4P-bzW7vtjyDPL2sgf&b{hp3{ts`+2{)IW+=qgq(%y#V$Fgg
zVI2xzRWDNplO3~_dP%=Rl{?f^yoT3$)o&%J7+>SuMCuo9=WyZkXdTC!$BKwoueH0S
zT`Aa>z*8^Dy8cBEfkR3r;!0sA)H2EmU7yZ{>l9-yTI~Dic~SW<Q*uRGFN~c=1*eta
z;x}@ycGp~b^V<xn1HL&EoupcSma&fa$u6>QIEC8;#vHGcsxWu%Gn}Z~cSc7Qkkfay
zdlg=y@pz*|kB{+&SK-A6&lGOWWpNOerBuZYQkx+cC<pJY$jn4K9N8M+N_5w0=d0>J
z_JAt286R&(aYuNbSN&AK?f@rsmuqe0?}j$8lor-)h-)Knh-)KnFtw4-3$1Hr@M5MS
zoeofYm_X#B>cr5x=WT3E#CAZ18YiJ#oOf=!MeHIz)W*0yA5fvSX|~|$f>(7nvz(fu
z!Mj9ZJUlN=O?iWKk7ilp+f*CYwYpgANN1rDJ%Wz(Bweycb>I#wduKs-Ub@jTsHMzq
zU{IZ0cxrIDSQzI%QONFig#kJkJyy@XZhg;P{g}dH`KeM}ACqTQXdvdfS9V?EczX>D
zk8rq<fZ^`OZ!3L5KiNWec02KbTMALQ^x6VJR5^%|;W5`03v@fxOg_a9#3A*r(5_IG
z05P<G*yvBJ-c{eGH~<GPW@s_$uu-CUHM|%P>uBr(yoR+1OL2M!uP9Eps_%U#zI5QD
z#I&;JsjsC_<Ff4i4YBpN%YJaL@c;RGv6sP!(@i$!a&?3@9c5BywfA8e&9PlveJpgv
zR<ZDxs5|xaEX)2B&E6a}mwi%`i<N!D8_|R(?cx=+P?;`pQHu;dzH~`bE0n34FEDFH
zyAY>nt#f@hU*;gbX{{)t>x-yT$NV(Y1vpbi=#aCll$F!G>Otf}U51zY9V!BPn1*-b
zX7%00jP!*@6syAEI+*wjY>KT^-AszbTud`90X!l%PiAFZ#-*gG%Z#yl6alSv2Wfo;
zu2qS?0%uKP^;j;n>N$Q$`m`bG^S$3ltS<&^mMa1$+(?r3%DkE@4iQopE+{E2t;#xU
z@Xngfmc0Xe@vddzbEt)ARAw2A<kIl;>?y`dcW7WB;G>M0p)UslPT%303nDXXBG*0X
zHO7SJxkEp8+JdiEiP0NGGb#+RYi~L7@pC?+Pb|An1^^=<m4&O7Vx7GOPLN{LX4?bV
zz;nqxkq+f!;aX@^rE>ctw$dA0nW8R(tRUvaIt|STCv0OW!tHx(A-2z5>K(l|a#E<v
zI5&2CTI}}J*zMC)vXxEb0Ob{B28Ix@x%9gDnvLzj5*{)#;}g8Nx3D#T3yw!e;|qo8
zkB|w`=b)|HwxFsDM3u%S$+aB4>H^oeCBwC#6zD1HVGUhhU*K-&0Z@-&J=4Hjg<2Em
zQUjA>iARaUPI0I`H8haAYCo6i&8@Z=Q5M_763^n8esf!DMP%C!zS!K0(YV-Ho%OR+
zG3p#$DwY|jU8(fyI#<^t;KG<1aX!>X4kL?|g+j*2oKYVlD!R@{duSgEU)+axY|{Od
zDYr#}T%Z(jMyRhMcu{q7)ygjtyk+XpGU+FVSl~>;YIWGY!LYIA7zwgUz&>sdrQnXX
z9}@=m*rTWLX0+WS#tV}%q_&B&iJyq3k`Es}4dwKRHr>w}(H8AB7vhRYUW4-^YMyLN
z64@EPN4VCqd+*DkFJmGviq1iA*opm$JZ2+d)08M$X(I&~^KsLJ9IH8jvE^#(^Tgeg
zO!4mOnEJK(g+$c4SyS~>np3q&9%4lgan%|M6Z1=gd70~u+h~D6mMo5)lTPW>w7lwJ
z$))p)xjl#`PZJoJBpbQ8;1g$GqDj1w&lFFUS3NFSb$&6)hpm14-_4paB<mBBRp%G8
zeOz&EGbI56RqiQ$6Y#VlxwlDfU4&Tot9GhJa>tu{Qfpw8DaFPnrJBV&lS<!glMc#$
z-PZw?N*|rJGxYvfi1GY*cgT18_5^!0MQUl_x65A?LKGPbkC<FyGAV&eOlWe~4M<tR
zPEb>>{@WpHv(iZ$hL{Xfr=1&Lh-H$lTkEWaj5j2CUM#?_gCP%-ax_oHm#Gg{Ua?S?
z^QxbH%P#$Bj@QKuSh=|MjS1&MCX*CnUOyAg%Ukq>gC&${3%J*|Kp_uh0Jy#}-^h5I
zli^)hQaw=h2vDpGzt-egg1HE%b@Ojd#x$8cW!j7dE)C(&GZsj~hsyMt^O-gc_mepO
zaLc@T=aWpFlg){9&XX=}PRNj#<<ud%RjO^VR@Tg!-OK_&oUQH-r__OUtki8RaOak~
zu)@szYinihDl2_%6WtUYcl@2A+;VkywljRQdtqtGqDs~yrpDNAnMYxXQIe~6+3y(3
zp3|ic-y(Zc@Rrb2>}qtyID&w!!Rk-y^RO;sTj@3=c|BNU`R;7wN;a%Q+f-f-c<YFD
zweTTVG|N@*G>Xw2Mv;3{i*i5CR-=K~a)mKjVi3!w%W=SI#_pCclZ?L5$CuyyUXCN}
z0aus9`%Lp5nlN7f7;hg>QTyX_ZNXC|uSfEZzWKErhg;|9DLCIAn5MS*2dnh!OOQzq
zU^cr{i^kOvwy4Z)T?-k1vTv~F5`#-xaWg*(EkPRwwr|}Yi?J<rBaFeMw=~2=)Z(sP
zKcrA^RgRz{fmEhkIYs3khdTqfOkFF?D`J1edU>EzESHZ}rwt~G{v}d)utdE}X_cXM
z2PJZ#Kx!`hK(r;ayb~<;!@hAz%v({e-dQDN$#jDc@i?c3P!CbK+TNn;+DVU$5@StD
z%9NKTSh>M^i~LUab#=Zu$koMq8gkRKuBt`SoNNk$w~1w`JjrP?hwd0I?ve=m1@xsQ
z78i12Q=7vzGOWfU<#BJ?qmXo@=|q<#NJe@m8SX7+LlT8QBNxsUOoLhMRBUPjU|@yV
z<WlNK-;z33Pp?`lHTXkwyatb59IwGei<mMVxrRq1?QT#S4!+?-!$hp~cE&C#QOWUo
zU4p+0<7&*{b3ZS<ZU_6ZaPg~%k&qA}1!Bh(DLjBQVF!QvN+QJ{E2p4j9sZV_(chd<
z!<AHHu!cX7nh5p(RBGrUO32&9Q;O7H<B1!dHkxyZR7Ugh@d9PM(n+UVMY8YL?f&!}
zDOGm}_Y39fF(wVPt%~9p4a3X`drxi(R`aVCaf=y7IKp*hk%ows3bm8DT&7$Y;UGet
zqk5v#V_DzxoNCN-Z{jA68cW|yD7B_FCjv&UF}q_nv3ev%cFf^l=*n>9B?OZ&^hSc-
zLYIx65`#yJTP2~HsF*8|k=xzIDVvP#I{Dn5?acwdk;}#3%)YQ)teeB%&#1tZQ2Gj*
zSE627D^%<D^##UMdlz+&N@9kHPB4;~4n#VZRQ>g$?lY52+tV6|bxbp=T$?<pjDDwF
zZJ?LrWa3OniF{+EJ>}{p=ExFt<4V9tq_7H@!j=OZ)@Hd9JcwKbU*M2ELU2@xG9)IN
zBUD?Whd*a+;6$>YO$UJI2nT%f!Y%}a9|hThbPz5cX$FyO)pL@%;<CZ%=F)5$OZyg3
z(TdP(F)Ay_&&4A#P&t)Rx7{hTpHo*o=f`?LH#FaoNZRPc(E2o6U@Q_&_5B|avm%Xy
z9Cf-(l%^GB=A3OpfcL&YHMqVVl<_`E?c{2>H3L6;p$R|FM3lQ6;PA&cQA89Qc?WH3
z`PsY+xt8m}e<Gn;vq^yRnfc^ys=7kb%X(X$EtjPAKb8vCm8OKz-1$a1-18sK46c3$
zU7?-054MF`xPzvn+U%aq&WzQcV)dSz=SVEwRr{p=yWq->51_qgSv5jhpo-WApKR>B
zPZk-D@v-wq$z&2`-63(dVlKjeg82=tOO=U*1B{e#!^6neS)~3wZxBWQIzywVYZAj0
zS%L`hIz@z*7Kz+RVs#{u8Wg)CFKptAEy3&m!9Q-`z92<~IukIR!poTLVVxlS(EWUc
zANVQH;ONE&M6{1FyyUh9c@qJ1q(KTYYZ7Uw<-LR&MRd)Wg|Xiqd6YnPIdJvhH$VS0
zN)W-l;qOAbIOguOk7)^{al{C-6uix75P(>UJ&&u;=lYJ+oD;p)Fe}y)D5hDHF#O<b
z^hC$TQwE9~-N}*2K>@WHP_-{K@(Q^by4j&e<P7EOrHIa8;l+3IQ@=B59gvBkU9o6u
zyrkfk>VYMVS51vYpU~s=pTYmPe1rI(jFg2TG9vz0)0zKo;QuAsKLr0b{cps-xa9kX
z_@DXPe-i&f@5}<N9Nt;8z*7i0K(Y9<3CgzS($KmTTg}X&@<w<c;quk9{lX6+hQGtn
zmV|}-fnd72Lzlz=!?>Ed<#@4+&0?8fL(e#Af-RV|P0X>h8g({4_b78bij`9|J&x5e
z<Ha`Ac+|PN2#k2L;zY|ZVdLn@{e=|3iQRzY<X*dWs=J2OCOV^B860>pkVU$8su**K
z+$X6OHe?vs{ZHD%I(3Q43o;2H*Fo%}y;4~VS;{;)C7mjdQ$lJKW=Pkij17323cYzh
z2)OcA4_(wSX<A{tsEhwL)n({99c|GBhn$z|;*ei`UJ;p}Z|EiypMXyX;bb_Ko#*Ha
zub*kWW|U8BczuJDVV4!T65nRHQ=LDpH|Vb2o@MN-{W5pG8`v}L&7FzP<b>Tu(ac6~
zZ2nAR{><o~F#fteCss65<O(vs$?A<ctCK>#TSIjV)OG#Xh5<B!Rt-DJXdlxWm{q1N
zesFE3tRh@AO(j*?ZP*{Uc2jLj7QQ3isXeBvk`k{<hg8L7Rb`8@u75~v1fyQFKIPdx
zxk2yxOoR<`4#41455VtpaFrBGHj<-BAx{i)6P6DTfI;t_?}%(gH^s`DCRxeHH0xHA
z$s4*no)*hXR@%~RM0ovSJJwFZ1+FmuEepKif|PJUYPcXRT#z0v$OsoqTM;hE3K!%w
z7UYHN@}Y`w-5j3G&$7uA?1|4GhK_Kt7}~jep2T9rCW$3Md~_nvN7<+_C0xWgc3QXy
zzlqrAWW|uYnB+Z1HQVO8ZIPvDGX!wsgzcjOXLM3%R(cd0Ou_MwG{26Tg5!}L@-y2R
zEhty3S;w)4u*OwZV$8cLJjR$e57R2YU&l%xyF|Ugui+8Ky-w!XC66Zr$KtUgtiJ$d
zXK~jKi)!z{V-65Q59_&@=Fpbd7EPR`!u$WbyrK&-*ih6La)>}W%HF!tNT8K%p|da(
z!oE&7sP0gJEXUVIP3}oXPK65GgUMLENWrC7Mk2DP!MuJUG?rv8NuW=!QbrM6y19&%
zz*oewVE$t(of0N%B2G)lG-T@RVP!Q}8lziXLb0_k$ZDn68UbUiH5IX^WsOu1Q4`Dv
zi{NN!_Mew1->=MxPd9+BqeIHrWYjj&cEi?`+Jwi^!1$)!P1`Ts8yHp4WN+FH`}R2|
zSOVupN98RKjL9nuBoi*7#-1yh?0H#%W0$rD?N>A<6!;q@yoa+hU4ALsTiEn@Unh7Y
z1)X`{TQkA)VvFa0q9NKijW7%>BIDXgE%4smA*ouFQ-%giw-Ah#{qb*RuWgj<oszxz
z<_=-FDZwrYPb@(uOV5i*CF(V}$WY(%sJjSNKu$Z)7Zs$+;O9E>k3_PkS{roWkCw8U
zP8os`8;&=dlA2z|Q75R_89XvLqC{YE%vd8E_0j5=@TRa<Yuv^en6-mo3~nOA2+pe>
zU0R}+3mp}Uwp`e5%oX{%ORXeFc&<B?a~2voh5f#{-c{Ty^fE~&T-c0!Cz!;Pmk>U~
zl(A@<lZh*GuM9eMCHh44$!Xd9bC-BM4bRYh>I_P>7AX%qYGw_D!Qmx2;U#HZ4J3#a
zd2^SfdNyv9_nI{H9`RaMqDmpKa8Vi_ege;j`jXeQ$1)ne%HdMdE;WH66)g<SpB4)*
z$!J`X6<(4aUNXILNgf>jF13~ADf(?*nqY0CXM~qbi=N5X0_qo)+_%X~GA{}6ohVh*
zb7F%wqPNM`STsYFEN<qTO2zIjA!X=Ac_w%ouGFbgyDsN<4fUwy?*ab)jlW;<_gns+
z=I=%R3@j55;-tcR0!}&vC!^unEu4JCUh<#Ci8j<X3@1}B)i^m_T0J68HZwdmPHIN;
zGKiDQ1d)Q1U&nEB78}67gA<Z&MjuB~h+ttDihP6^MX6m`{BAOG?cV$O`!#=m<nKBD
zn)%zw-|PIHfTL_(=!tam5lo|nqqola=W#Rz?q)dMWcxIZj)D4-akN2Vg>DwW1|G-J
zse)L+QG*~$=w=}4@8W0}Qijsa@9C>;{Qa4~H~D*yzk~e!jlUlLkao@psr114A>|01
zg@OFQWX;!%;X9ZXx+2{bJ%y(e<LOtV+oPj-rbnGTamn1OV7cg-;6(LXj^ZrLJ(M9F
z7+d~URUVIy9FJZ<7;R2%<+!i<+)5cZyQye~Ij$S!;JRP^1SuJ#J26(23e@?jF%Bin
zHQ3B&m=F?{v_^_jOJpFM*-O-9a>@yY+38ibS{!69nc;b{mBq!?R+Psi&qDMmBgH&~
zm{n#?DCxsN%0PAHH_o5IV$QsmqF#bSwHo`x*_z!185ow8)lf#^NWkg_fz6cK#sU6t
zEOX*;7}p+$an*@1YVVkFUZiwdAbEjW$0=oNs2~NO;3=5C3}YVc4o7G-NNQ~=n2}c$
zJe6g>(-rElc^WQeJhm64F#*}Sehh)-%|{E-UhVqc+1qveDa40M)6@s72v*}{%S=y(
z?wD>1ew<hBx$h5T_SFB9XWkWo*?Ct5vh%J9oSj$YY1l`YQNRpU6?EsrQK5aH<+IfZ
zT{0uL7fh#-wk|1vcSgLe>oFciskbR1FFTl8`y=~>!3hz60<p{&Hj3z~=Qr=-;3VQ^
z260;;aUwb(E_!p`vOr4SO#yG-Z2@;)5Po}Yz?ruwSVkJgk}Y~AFYG^U(Sp2N0^iOH
z1WwIc6BwKKqu>l87)`e5G+t!45S_}4poL>4X~8W)m$aZ7w~W<}Md5<!{|K8mFiJ<l
z=Ka$LvDt9ue__+araACAS2RA)-e0|_((_``j8NaQ4Yzpee?mX_S~grBxJ3M+)!)x&
zsBd=Q@=)KL^{0pW=6dd}(?MluzU@-)noCE+!-QSf-1RynTy3xRMk_+<dsr}1$$@g2
z%z_`5k@zfnJ-UaNWlmnO?Y(kCu@rpcdVt>)VA;PFi=TbB1)nC(Rg}zyhh6G5C?opw
z(EN07Sv7}8>J}-*;N?eB%3ZwVleDXb^(UlOd+No(pq@Z?Gl6;<<g={nCZ0J<vOEnJ
zP($OD6{sXME*`)f^^$bI(Tc50n6>)tf$!kIO(pS?)K=Jke$-X}PGAggna0Z`iH<i~
z_b4Jq5tL5Q!oH^R8MR-o4J6inxhObR@+KmOb3Q42)Bf5oZwQR4{jy-tuRS6iCerk_
zIb-{?$Y4c2u{P?cUbLuj&e*Tf7XwU%u|6ZRBsFt=PDF2NGLQ8XrMrW8RH#lbQDvxJ
zh_d1iZ=}dwQdX+B%_bjqJHytPk6KELa!`%au&mV6Vh>I%t1t_y&MHwUqQtR-<51A{
z8EC@;>z$_?MV2bp@uWcN`dlZKLum74P4mJ3H_*(l&8768qnS@-0T!Cck|p^c&`he3
zhR}>wMHoUeIYKHzGeuI0(2Sd;|9_#G?_rd71e&=C8u&*va~j#>G_#Ds_;+Zg`?C{i
z##|{gWTh-a)oJ)j=@P!CcVAdI89gPjmk;%gS(EPBQv1s}obF~c+{+J38KVA#MLe9*
zW7V!G79tnR>E{L_gZ%x7zYu@-@Mp6p*c=cIJ?=1>fr?NO>oWp?wPKzz3!P1NGv~%?
zrVF!zHocSG^>6+L1G!`-&Gc;b)HfR~feCOZ_B|>(t~#l`XlBYlf_IVdEK9>hIWi)w
zT_rNG&$D0mSIG2a6yf~yj>#}kc{i{eGVrUDSi#0FLPQfiC79AQe@5-G8w2=FsXaC~
zm>4dfW^7Ls*TIqX`6b3{>Q|hR!^(Mht>^W8i6X0Uk4OX9r=f_i&DOG&3m46#QQW0U
zDKiQ<!05v#ID(?Wesv`|4J~xTZR&pVycers-&r(6w=-5Vt)!Il50OehrpYg7A!QtS
zAY)@92<@20EOssP2d5O%II1LjtY)UlVK%6&l(yZ-GCwysSx*{FcY`S|f=t-nm(PTs
zI6pWVjO6>n`s*ebge$<vt>m1~>A{Nh-nOC{t0O<MH;wkg&mGHr>k0ePaCuIgu|yJQ
zb&sIN>>(FbrF)n`bFKa?Gu!Fen%{4>R9bXpR9aM&LyNw@LO4tBwMZAwX)DSS&lXy~
zh`-bX<29?0ru_a!dwWq1xVFVH9Z2Aqc>PT3v?MNH(bJw(O3AJ6N~1&0AG+*;wel#x
zLY~>!=m|_#85x88#-u5FQB0I22h7r8tTK<=H7WKPi~6JAGlQM+VBF{A_eU>>P`OJq
zYj|Xm=Otp#l=enX`)1^e1Uo%j^80@#B0y_U15WNMZJ2ncvmv&6Z0~!ay|&){p`H2R
z`RUTX>qfN~O_R1q$3q*T_j?IP2&zu|1TsR@7<AHG?}gU&i@HqEEh7MFa&S~xg~|of
z(WDCXq9m0SBpFzzhSuj`vj}-(ZB7=Bp0)I|&7KvLQDcb@M5My788R%@vjI)vDe5B_
z-uV7+vS2SdN09y=@}o+T^JdE9biKTDMaCK2#n$s@7(uE)a>r{pIXaGe%Bd@ONo*=g
zZA_Mq7s#zfX}Yo9T%bqQy<AI^!=>ryk+{@p2pu>{toF7SOk+9}_E;ET<&f}UQ^=BO
zbPlw^J+NTnb1)SfPMk-+-xa6QDTt6=FFBbvNM2SUvx#bAOA(!@BV<C+5vmM!zq0c9
zyn;>@+qrko97Mz}<fv={O4Q}ls<JhdYa{-J<MIE~jAsrF-NCuy6rRa}iR$OaQ*0be
zVa~Fg?ivM_o<{K2ic+<B9wlr23lZ*~CfXLK7~MD_{^)YlHEtfrapY;eizxRHjc(E4
zI7U?MhI4I8Pf*a<b%KIMikf`94lZ4X=>I|6yMRYkU5(!}nMpE`fe8{I2nB>-(TJi!
zO&l)ak^pKnF_I89&}-gwZ2MZ61GFWOIEiF(oR+rQ+N!PB)>d1w6$#c$LNMW02w*iR
zD7IAhbka5|4FS^3_gnkSOoFxV_x_*%_whVT&e><*_u6Z(y{>Xki?QU)L*{Uld{BXe
z(Pd<4uBhk{I8Y)$9VOo#8H)jEQZ(OXCYi3L0#~D*H?EWkt{mn72zRx*2})V^z<P9S
zM6{3*<(gT5%~INNmZJ}}gx+w1R~qQH+$!gY5K&0r^4g7aZ2pyIAvQ`IA-`s$yV~Oa
zFVA)y-zEicxL@o`iHnDo`wJSYut=ZHE9mi06*5fjl9-n0JQgkX7nW*~cV({eVq~&h
znj_;A`PSxI*IdD>1ebsr*DnAnqPR=G&sG|gaQxqO^oyVW-*mM4f7j6k=XbRBd*^j@
z=sIM?)&X`djCZ%4)k?QjhW|?{h_T+W4L-_ATw*#1(C);L#7L`Mua!jnS4Xn5?{axh
zuTC;gi`othf}=mDEe9+D`z+I8zsqGh;+dWH+(?@DGy$4i(MXbgmX7BglVyl(1;Ma+
zs4R$za1M-7w+c?854`mRa}eqvg*H<h`{0jqexg(CJ?g&&@dftb4s&m@dJsI%X?!sv
z1XE7m;p%!Rj+vD`kb9{yg=O>2SBB2zcSchITMq_){foSnr;OiQZ+H~9xTh^}Pg67*
z9hbGxdT4=tuILWKsKu<CDACgjVvz~;L<PEY5nRYDF3%9nXt7X0@frOFoa4I*ZNOat
z?GaA1G3wdRB(TLJ7qIMTCd@&Z@&i$GC{k$00GgODpcI2)16mFkbD`&;)npXsKgu&F
z`NRJr<kKhg+FAt8P*EbvNikvK-`*1}hsw0>=%?pdrcEg0d5~OSA38>*40iN1Y-2i#
zkWsYJhM|oY00~iN61<*ZOb-nedQl{3c!)m56(KTJ%f!TRpR;NSzYKg?s%T$@#Q$_v
zv~`Q*3kdH22UWD0gI$_LmxijMRUekwim9Thzj3O3sxrn056W?4DPz0@SfGdGs?L0w
z(QoF9I{i7I?=A__K1nMf4XU6*P-+|0xE9j3320SnC8{!?V<n)Qs-?G)6mNSC`m&FU
zdX*1*n4UuVX?t8$uGCxQf-KyDx$<T+vVG37;MI~*?H!Wq`SWun3k$oA$eph|f(~L#
z6*^SN-SNSD5JpK==9?TA!P(7_t|#W-xjWZ%>T|?g?8=md7$zqTni)oFM`1b>6AiTI
zE~y(>iawz6>?(<~t0C;p0#|Obv>^~zrc#bEAK8s4-u3E6qO((!ts>T9h3QNoZadn-
zqEIa!g$LY5S5#}3sgKJT=5#&AxO5F!h~7e9y)Xe&l`y7#W4Ugi|H3Xx#(F4-Foy6m
zY-1PO(Mog$5&6XSfLvU3qgGUJ-Rne}728{<m8dILv5p82i~14HAdmS5Xd0Odl(QxH
zLcEFkOs=f^cYn-;d^xUvb|2GY!8PhLmkK(Sz>4uj7v>(SXOB^2sQSzrDP&EeTvf_Z
z<3lF+xjQ9{WWQ+fCFFcOA?Z_`(l(^GAW8K%a!F8yb}e?dDzVV2yR4im)FeykU>qV}
zNSg8LQpnvH?KWYgXhmA|o<tnA`QHOp2qpHhw`biOp(SoXWwtH9Y~f}D(R*`dBzcEK
zN%1`U4ijU3EP-`<WJJrcXmM|Os>Pp=WefA4=V?44>5_<w>2dumDqr57HOXc>aW;x?
zK@|JsBj5{k>~^^?S>np>v8P7v^nSSdtFgK+C|6^TGB4sM`$4HeM3M-BN9b5*?b#Tj
z^hF%h1$3@X@eQoto%7vQuC9gzL)Gm>357akznqQwOSxK`t=>cHlFXgiJ>EmB7gAqj
zy62T7tet<r!AZ0cK>cb)d6SlWH|*Jj%MUED`tuo|g9ydwc6%B|vs3_CSk%7J@$;ou
z^bB)lzXOk|4Hbj%vyv<aXrOx{!4nB^E3s7l<2aw#KV#K1kjt^ze;B4J=IB6Dh~r9*
zfRiB!@^Z>L4njrlVvJ`ke4j2SLlJ6kV15Y?71?byB7ywIsPe%|mr|)l*9bC2&NxP0
zH~2Bz`WTtOEU7d^0&+u2nYK4r=A;a<L)a;heE{|f0qhrkI25pdkMQRI6|nbEWGG<&
zL<#|untl_g27Ch_3;@Ai{1jNQ+<hy{gwVTU$7C^NwFO$-Jr{8|arN4qc>K7@SuI=w
zUlJ5c3qdHajLc&<=)?Y!a`g`i!zSxeuihd{$PF_sntTT+jR8eIQ=JcnE-#H>HX#p4
zG-UG#51Sh&aBuAvFaQLDG&_t3v=PvA$kd5$@CZlwQb=D{;BzjPD~3o=5G5x^yGBZH
zj!7))Ztf(~bOp5p`kek@>;{;n`Nms3B+J7HKq1gFFqc)_v~E`j)dw-JLcJ6+0rk>!
z?GA;V7gKe_v{tkot)>5hKv!I|0xL|Bl`|N@OzIV&y(00E3CFBAROU95EXvzhgYF_~
zcdv>Tw+8jt{h<?w?0=fydM4%0x6t$siKaLAhu!FRpGh&_<<r0Ecc0~+q4V`FLBBgw
zb!8-mzXzED!)I!NY8tO}i7Sr3(Ft=nr~t0QdnvVNQjE7*3HAd9B0u4P;DyW;=1A{u
zBQ3BInEpLf7upjP8_B(4S#V^Q-Jh0AEEJs{d8l!Gw9w@{jjAdjo8L1GI;1TU1aQ|2
z;Qs3eOj8W}y@Q<-frqTk%s|me&Zoa(xoW9i%65?b40it%#q)nsTSD=Cj}(ewYSF9`
zdzx|TjnRo2=y2I=NB<r^#Hy5*bM@p;^?W|7Z)~yIjst0ZTywS;jco4OWV21%UB!@>
z21Z6pN{&y=Qpdil@er5ii{%C_o+bPfDRew}3K!9GZW>*!$M48;k=Hj44%=cb_~Wg5
zD=H!@kN*95_}vq|yB2>d*Q)P_oAsuEvjY8mJb6Z}5?uwg>RN2-d2(@rL?+QvnN_gx
zJJS8*m3`_(x^!G{bOr(M6W}F>1-RuMsMr`b6aGJw%l;@3Q>BxrKHbG;ld0`QzQle@
zY@G~2iReNgN<a|~r7)>%y!zf?Wp`6q;$Xrhfh=a!KZ5$f{YH9TLB`rFG36MEa8p{i
z<4H}sk!Qz{JnNn@-wZ93t&}*#T;@XP^PUKSUkGjm<kh5`?|7a?8%iklQxY~_f_&j#
zxc&+-1{UkF)34CH&Bb9l$J6)`E9>32CJ7S=&a*DhX6trH2>7eevVKlVEze}Q9531X
zF1gKRzwnaEzA#ga%`z78JwyV&wGJpk7cY5-{9(4-93QQxjh^hil=bdg_jRn<17C32
zO7Ig<a!W8teKD7XELOYkqn0jCG`jLF8dzUVep;#Qi(GPx`qnx!$stzF=WL4dk;^#8
z=EBTnH!y65N5DFJB}Yj=2Wc@K3Xi7?L#J}o6M8C@1M;}T2A{_k{+d4Ox_#-l^$bhT
zJ_B|r=qB)voO>v~b?7At->frbgqO%)IRGu=Fs>p#RB>I}hYdiaPnQQ|ldjl8Lvl7=
zrJ>+5)5v5m&E(L;kc48|93=3#)f<DgiUC>`(3I1nR#Cjox=LKsJGha>AT4(N`3@LX
zEVzemY2g@|9g$WV({?0hG2xDFXEt*N9T2_quK^8Ur_pLalb9=mvlO<x5N;6(5}yv3
zW#k#|)t)j)hxdM@dq}BkWUOewAAC%wKx_?DFY5{-ZnCc#t)7*)sZ!meR&@^O*M!0y
zR7UplbZtcFo=}sKvnQuzL0*A-Q`&~)yaLx6r+Ji!^IgEcm6A@%hotm)-|=5|UOp?e
zZ&S*K6mKV2^xfVM3H!Y_+B`NXwbndq7G(xU1;6RkNE(#cEUU5iJ9OIG)WhgyY_8A3
zp=U!ymgu>mk^x*G1O}3fw*-aCvObC7b{vVuCtf@a$p#oo_=-Fl!uOXnW8I!yYNHg5
z(W^BXNoD1p`g<i8I1+Y|MRabAy*-s;tl<&O$Gcn`zk+uO3?48{JfY96mR!@V&!gH6
z_8GPf*YgL9q(ymHOfSYON7*gv_z$V~tn_KOcVNRMo1ESQtEX{O4HdYd30yxWG~n5C
z&QlqI`fnf@xIsuTOe{e`TUa5YsyH&c^~c`j>6`wFfyxG_w`1LVQZ$d0E?)cA9d;bt
zY7a_~tV_P>inQxZ5bM4+JHS%%H_-pq)H17rD#de!?{r0s<iY3}d{hbDjt2~vwzr_q
zqW8o_%_i}!*%)BEI)o-&6{FAQ^vdgp;<2s3Re?_pp;0u+Vlmt>=->l}9{sTvBGcqU
z;KYJC3)leGM7Jsz2lH^=I`T6`e^{rdZ=n;#>Ioc9p!cv#Ja!q*v=&jH({OYC7ME`P
zR&TdBmS-+G2!4D^v3&Z`d7tXKX8=}%N|1nEwA_!KluP~51SEXLp@tLCjk1>lKO=^$
z6*6@el}OTEBv~0S!3#EYku%gFAA>r&X|UmhJco|S@BLl!`|#`XyRB1xU*69zp;Y_y
zpHR2{^YCu{r(u`=^JI(u^Xr%R^U!x2diY~X1Xaa@4yAgEhYsCjER<@n;iS&wrg6F>
z1Z0DR;nl^ud5A|)6*piKOgW^xJs2)kn9UxU2WuJ*G%*d}?VLZXQZLm|Pn_gqX&$eJ
zxQ!j9W$ImsKF*Iz%&m7Yr*Iu6YmZKYSa8q=7LW#(#Y2TQ85Kc6M$Xkz8}_{{*AbB%
zun6G5y$TMvZGX(dM0@a~G+Pz@;WGKB=#=ac>xJ!(1Fdn<G1UxB$Xs7Cmhxpj`zzxJ
zxm<>Mty6C)Q2NlY(J`(;WjK2oKqp5=W%y?F8fd2c)w}4|5WDRU5qnW{W;D6wgSgRl
z-9RxdYrE~?7!Jd-vQ@~2wNT2P1+L6wsfAgN-}bSVmEufO%%)pd3<;ZVUGq?zZr!J$
z^;jGN_3B#CxKrKF9EfWRg|iBIz?w!dX>E|HNw5R%l5d(5^gplzen63-x2AxuP&W_B
zXWgCT=A!NSZeY+tL~;r(QjIquAR&12+nQI=gQl}w6-vuXQ8?gUQCf@!h5Fr(1RrNI
ze~|oRJ@o_3RG@FFr~aQj43b%h%J9LW9$rHIUEHMnTt|CKeBzX-KeWhM%p8B^6E*!d
zUehmmC{^A9mLT$LTuSc2im%7CIa<tHJF?)zTx_=Xcv_S2QG<b^qb2I^$WkN7ZKhPn
zd*DkQSvDzD(AQfl+SW-%UT<>e5yIsej9OQ;n2K8bQ>n(a%$P8wp4S$iUypgSo9?3a
zJ<=TJ*b}_tU{>sD@xh5<4^xY0Kl!JYv1#|~SuT;Qx-rrsCJ%p+QB*|yW#!dm-o&oR
zVc++cbJ#xuc<Q5pqp)wRe>t=0FZLyg0^YJ5dSN*eyh11*wo-ptx%zsdgj-5XlM<66
zBQ$aI72S~8hxIK(&_-pl)63<bdIq#%buQ4Ip>Fgee-;w88xDZa$+-nNCkzjZUBCsg
zoByYZ)mlMBadc6ls&AxML)ciq0$waOmMxKszJjr2=VL)2%6^d)^)e$bR%ev#a?DZn
zB*Ei`XdJ5r2lkC4IWD!y%2dwQh&%rFD+&%40eZ;=7^%xT1$mw-_BjR5KV#*pt?9R6
zX-?o@%iJl^rNMHi4#vtc$u8ypUzd9+UQRr9#ykVK|8skmHGw|{0r@l|*4DbS(W_mU
z7O1}w@O#L>&M&YeUO;*oEAZ0)RN$s~0qI_>fO&oah_TXg|9r>^z^^2!ig|BMs`7Ri
z|IFTd=nR2PL(U1sY6qH)U;~f=-UD1*2bVx8%LM^Z2!yU2*IdQpn7o|aF^E@1*Pjm>
z-xW~N98M&8gAjD_C$edXl5EM3u;+(l{Fh+yA)q#Yus%`Ij}dy^D+UjK;ZYFXCTQSq
z?j-&i&3m4rN<1V5E4zZmQ^Cq-#0lLt&_Q`<qbpeXdfsGXVtKWb5d!Q_L7v<Jd7}5D
zr{OlT`J7mqwp;-!LUN*holi=V=KQFqt;Cb+0ZFu5i9fUwPpH6<#5ybSnEJYvC_Yrw
zSFOY@RY784*POh{*FE(LS}Cvcq^JH}A)1Q1#1-c2I_-p~exH6g=BeK)AKMz8u6!*;
z+VD?8G#5v&jgGlhAC{i_M<oN!ar%-yoA2k@v%LjLP@vDgwzO`3_+OZ1L8*0B*V<@V
z)%sxDe_i-;yWEkS(DJ|MR{mYCdR<Km#SDYUBUj;g3GVHPcIU_`m@X`|dwVv19N3wZ
zdm&60V?UPHFT#_M{wCM)w={a~f?JAjDY1M)zMvPNsIyc(`G5=*jO(elXu@MVq!`(C
zv65mod}p<Mit0k8YRzDY19C(aoRrKWIV+Aioa_n~H2dtOYK2}kjNCl+Pgpr~4hL#>
z+e3|VGF1gfnahs_i=M}=T<E!4QW`5ZHQu(VaZ=FO8v3my1dYzdNuGP2<S{lyND4bc
z&Gj;sAMV&mdiF;z+Q=Gmrd0*UHM&y}5jVOP)SZzdZ$p>{BGsW9J$qlkH&)XUnY}X4
z3)eDxK|>~RL0!bgCJh$t3f)abHb=W$&RasW*WfM8>}r<UtAZ(^wMmT`X^o>7dR|y!
zU*zrF_&#;hb1DsVB;jYkcwD@(o;3S>^DBIlLtCxcBw8(RRZsFRGtkFt)ss(zeyiWk
ze*7davRL1_mzF`g%eXFZ@Y#)g^PVjv&6J74mU}K`?|~;^d$pFI?2cm9tdm#@{q`%~
zqAy4#>SsL41*qWl4rv5aEJ-#Cn#C0B`Jk@WEZ7><)!{2Fc#l+qk4CJtA{R%E*Hxud
zh7W_~`tJ!<r2igM1^mr<o4Oa_%u!v-TZP%SDl*5^EpVtfdZMo2Po+5+>pzwLccjdU
z;{Q#zwbkz6NgA8w;Hl6ly@UAGqV`u-4>`^R6}EWYujQuTR`|2|fxelmKMXDSTcB^$
zI-D~h2ny9LX32abE4+kypVk^^5&tC4*XEEvK{03Q+Fd0<m->YuVI(M$6r2TdthOLU
z19PS{Z-q(P2D`aU)x?vYv69l;)B~J&49n#kt1p%ny~)q>Ey+LiJQ_F^8W>D7#%9aM
zOH9(ode8E795$DQgXN+na$|Q8Uvy&LmJ}Ri`M1*NZC&?7;2H5aM*boi_tdX;GBe9z
z=^`YS-SY+BL+hiVn*h^3cvcPB0!+8ysIxC{)^1#3u5pI+wWYi`bb~YavfNUt_mih2
z=vAqf5}?_hbC?^QU}$*R`H3PJLVw#C3?+(`2h-H+e}{NFY_^|9=7Jl#J>I>+aTE5e
zI(;<f@XBDCt|JG>5~r9?eA^zAKfxLmID^&nf{@!30f!aP4a3M=a$3^tkW?R{>Km+7
zw{Hn9ZxL(1Q#pr4)&lRUFL1~fEMhaAL}iPz;%up%+3?w{L3QX`mo!owTI19)l5Ki)
zWh$GF3Qh&ymmi~_yMyzBi(uuSny}~e(NzoLo%NpaY@Woqfr?9O_M6_l8?s<DE(pzj
zh0Y?9H0PP)z2}S(OC<nq*y-I_^S4OS8vDYA!=CyN1l3>+SGnJu{eXGn1O1+t5o>kg
z{>?w^)yecJyDyUb>J%QD<tJEkD!YS2iF5k17)KVpengoEk9_&Wk@wT!l5_^nC9U<)
zHXqEzKkYlBh83L1>Fp>uNl{y1XB2;@o<>ov4LL7l21HZf24~3qJ;6>l^oQJapi6H-
z-@0TJb>z$^Lby2$Y#Uz$xeRpE_A+L8Cyj_h%Kjt&V7ApL=AXZ5AEot~?WWOfzIo(*
zkg)@$n;^b65nSze;0I1R7NBEkJ<tez(59`O#kZ&{XUh5=yM2q<MXfuzZ$O!vXM&Y4
z1q(o>$JkEE$N<(}D#UeXpv@lWj24%wvulZK)i?U1z&?!n$tLBb2s#ff4ZZ8iSG&0c
ztt*bfOK~Yif2Y%mx}_2%BK_(`%6s2feaX6HZ$bassqj?;ZBc5Vc1KMo^#qn5<7NaE
zL_KR?jX1=QU1dMLfsN~_{|)nM7VXc8;xKEEzf7;>F7bMY>P1oa7ECQs)+}f_{pCLK
zfcFxA9fur!ro%iq`Xh4yXQHiZl8Np-x;MKu=m@kSA38?qz}LF%)L^ujxYDEc7H|8y
z{ME^MHO*`CXy$TOn8RTCE`hBx=5PYu=Cp)vaXN15AKl{E7reed&?)R)9OV6p8W>Pu
zc@J>Bd#UusILW#$R}S1eJ}+{WH*A5g?Q&jk)|`^<As&9ow_E`m00STzjL200p=YIQ
z0fJA*n#@qCGn8?6=u25P2{Q&T-QvvmI#z!aOrvun0&`58ks4@?2Gfj><-~d;h89qI
z!tKJKa=B?=8nk1liMRcXT$evxbwO3e7>0X5DhUlP5!ej`?N#9IDq0v*Mez7^^{c_$
z55{uu56rFo8ww4ug1cRw-`qjCNPIU<uSG&Kx0cOhc#h7=sxqBfRe=+msseqR7z6H=
z!e8d-<92j(50Z@IL`tNTTZxEWxD}yWd0GDi>%6=8K`CE1Cu<XaTh(mRh;?Y|*+do>
zjsbb{)IUTqwTw@m`Vfy?XeCw1g{B*`JhkuDdKzv4a~}Orz5BS$R(r;7Bpp2wn48f}
zzda3Kp<rmlU85Z7FMft1;U{=ce7y1ek7^zj+$Q~VsV*Lms&~WRO7@Rj5V`W`o}+(x
z@ZA#+{?u?C?>gRfRNdD0PU~%LIeQ{wbN1lU*kemuoRx0u(q$i_tc=*~oGzWM`;&a<
z^zGSXq@+=~@f--fCD83R_m^;?k~u<j^x*MtxYPxZP9VpM<DYjOw+D9l<uLg<)oF)S
z;YFN_QgOUNm#3i*2F~#=5;I7QZjxU3=c+21ov&tjTK<-LdU4jcT3-EQ-=5hs)sbHR
z2S4-EEN~Y7n8HW@UjGMA{X!Y;iLjSHGP>|p^4_W@k?ZJ*dg3%btlK%>_4dr-X}CFK
z!foN_rFhHH{;s3X*_fQ48sm<Q@H5i`t&;lAQJt1F(AsvqD}GUhPRO<U-QEJXKQ+I0
z4&tR#aRPuVM>#C63kBOAP&;TKCmQ5-vC$peXqi&wM8z}IWHMl$Z;bHS$#<B1;0_-g
z-<&;FL09B(dAToI=7VdQq5dI@E&LT@tmVJ2Sbg_2q=kBwU(*)BFM!*-#Jv_?^Ff8U
zQ)<Fzsyn*Qm8j$Ccpd(imSWQ@T$xypg)JQ_5HBVAx_u4vFXx)RQK2hRyActZsDG=M
z;XqWh7iQRm0~Y_{lmvAR9q~=AfHmA2sB+tMrkydHbcl-&b)*Hn7nFsZ^HGyTC36bh
z<c<NEGdx}*GK_L|u=Peaor@QzTgrE}(0s_lb#Q~giBs^i<<gnEAj9uy6rTYx{{it!
z;KWc7w*wgBV_KM@N>|-Ep-I;i$=#?_No+ms)+(#EriW8jnYBXWdR}m6!Y#o6uVs*L
zwub*fvgGm9|AME%PhlY^b6To6#2O0*gc4Zqv~RrJMAJgG_HllmDiQy*>J<AxdoCOe
zZGfsxPKz(8vGQM(sfdhKwqD4cJsq}7b!Cl}{R<ik{zaXAq2+yz1!t)ir`314e2!a6
zL`g^%XscYHWEAR4s8{F<lrcIN1yr~kC*xd>w#ao{?~Jj!=PwlW$ptR{F*4cn!g6Bq
z6r5@OlPj%LvYc0T=O7-YJspQct%TaqYbENl))ezCcIk3y7lV9`eTg|v@S_MOoRI@U
z1EU5K5xGTZ!K;D3@#`FcR?L%P`H@PM!N41hCL}oAZArYx%iJcZcah-u#)>@a5DL}e
zxuLDxJe&OyT9Wh7?dHx^1pp<Zc5igA0vQo-M~Xcq#im9&a(W~CG^P9K6F4X=E9VNl
z;aehXc|%-){b{mq%8Klrr{9`zcv`3TECSazL+-20b`fUb>&%~=PyCWzb9eRu?_N(s
zC-a_t7FC81PB{8r`|uxoydD10ul>_+f9+pywy@tg*rs?75_Y%1jYE+X@e!W90NHzQ
z_JP;>)@kR?tjUJegUx$zkM+N7-dJum-Qy|W<LIO1v7U5$mB-&&<%u_*PUC<5l*S_$
zit^N6`Lfg7$;bvfws)1;8b<<yGvv8<J40o$FdFk;B!tU{p^OFIkNh&Zd3HYoP4ezF
zPGuhmi>GSy(D@TdfkS`w?qoJQ8ER+_UOrIGbtg(5l#++e$dp3Z35gq;b5r)tz=;!%
zR+-k2yD;K;?Vm<!VqQC@c+cp0<&*b})s0lT(UC;@Df6IICsX_m-DZkC_dY+^|IZHg
z-&21*ps2^-sh=-MPLHD}oWrw>V(5DOuSa3r86N>l6FAZ1AZT!5<N{AR;iQeh<>^SL
zud+P<VGQBla0bN}Dl~hc_l@(W`v8*$Pj1M1akYDV7ovvPCMr`?WzaoH9>%fj28A->
zQzsb>79rYMYh(z0B14$-4aWcFlV~=nE8q%R0)&{@M!d0JEp;C`FhsF1CSP4fL6NUg
zaGn&juz~nV*37o-_CSjRO;CKjA(5W&_UR+jy2MQ&c#@8!4TgE?heTb%-RESC2GrYB
z*mdQRappX35+lunG3Tmpvb%<p-D|joL`|Gq&El{d!L@kO7rB$WSUH&l?Zr}rJ=p4$
ztI5||)8eVm6KER?dAv7tx3CD<3?n&_^77C=ZFRF#|7q?M4%;Zn_f3~*Xr%BMh$b6E
zcL`Rw^22=;3q(c92!B=)neajgV?0m0;b8>6>4c7vy%SoP6)OH}Bqg{4Wl*<wCrD(a
ztND928!iymE%DE*%Yy)H@n2Dw_Z|5=r7rKg@^@5S9{p-D+l((X*HKMmMe{xKr=&R`
zf39!7TmCF+u9rV^>hiuHs{{dnuH^Y7tCDT}rIODy3z-=i-Ap6!&zl?MPjYh;fAEM?
z>~jrHa7A#XE0P}lhLcearV6i?aaj@#5y}clfG%?GD*({BuLG|IqL=><<n##v)D&uu
ztD?GiR^$KMl03oxpQYS?5r`3WW~riCs`#*WZYQ7yg$vJv6E%OwZeBOr#RWZzsagx~
zGIOr>6MPWJd~`pbL4c!j`jD_3IXKwe>K=t+8DbN=kyhQ$vl3mgidb*Vl)Ox1RCObM
zxU1LmqZV^{si>&lA_@0OLXJ*gMaej#Jz08%iI%I~W>>e;Q)KCA`7j8J{C8>x{a-+(
z+hVokwA9tO1Ry>4#gE89cc!SH7#FDf85-<AErH(8a|Pm+cA}bzCSK8iR>?ydFY1Hs
za=y$(l=6|eYz8@KO%~1PmQxkLjPZEXA0F0d&p+i$kIo|1%&)ct?jmqGPaG=ckj{vo
zP(C~WcX&TX^qAQ^us3J#D7p=XW1h>n)Lc5pvAZs>xPXh%XPPCxQx$>ZjSB+b^p9NY
z4(w1=V)HvNG{PK7Z`=|QK#B=+^~4KA13WtBA*<GDW!1AuK~y!=Ycm}f#84}-D#Hzu
z&LaM!6RdneakAO~on0LLs-Md=>~dR8lA<Lx-?I`c+a49b*<yX<HX>{-lr>R`4^LzS
zWpF@{PM*U>m<nP-Xi*j4#(=?W51(Z`<tpn}L{t&x;459!l!K61t%PWP)W*$`W`kGv
za1~>P1fz;CRIO)>@5obl=Mwr17EFoA@I+=Qbkix3+D+nuBJP)`a3ydnkF@Mw70iuX
zB?~Jv#x4sv?<q!J*Q3@`lA9&HG{%y?^zl=)2-D>B<9+h*ZsdAV;;iW-GSx?qQE!*%
zqoOyBn)1c4vv5qdGw(XT3lGf;@^Xznvm-b{YLLtQyTLJ12T{E~3j|O{nfkjt!AP|>
zwzZC^jxuqXqIXyxn1=S6%VOq&;uy9oI7_oI+*j=(JYMbmsm6%<JzJ-G?rUAbd*te<
zgYzf3DOLOvr7nTU^}GTNY&=anly(pKyrijMfE_WO(0UktZksa&lh9$tuPKhDUep$`
z-z@v1DOH@!yvD4=G9)i)N{xIhiCamuC`MQCN(lsn6;DA%)P@l*no>zi@|!%hXYTNy
zu01o=xDxe~NxCJ!Cv>yDHgBpSaktV)$~nxX@V<g52EJ)aY2DeLaz`Qk#FLaX?w?y*
z6UA*E&F9P+=Dz|ub-D~u4^R*80f0siZpo0*MIB4RYoIEu3T;#vzEX&cBJMS}L*zOF
z7eV;Y+XSr3$*2A2&0mwp;X=+F(L?m^UURAE*`oB;_mg0Xc6wXaP6#<i`s~HZ3)>g9
z<Q_HSVu2Yqs$<p(uh+3M{7<C2fw?C@gX~lS*#XRpxx%Po`l~&`YY(JZ#7Sc!82~&q
zJd(N}@1{gf^l>T3j@vh#k7a6?{1KO=vE5!Gn=9uq7rT#}9Ffd9bN%*(=7G>R?M?Ot
z*h-zrK3M4ZuqlPdlc9xnu`#(fgJvzAg0Hh(@RzzT^o>OJ1EO?W&{unQuK!vY+)Bx9
ziMp@k76+{UBUz7<elBEV5W~X)#C~-NT?76r99>PL2_*PbWK_Ajgdx%Sk<#mm9CUh=
zBR&9&g={%CRlhnO$KEpiEY@T*rQ95dKu8?U;uznAUtyV=o-(zQ_lgANAr=&&jZPdv
zU_lw9QkJ_aghn}yyZ*tuD=5sgd6Q*QB}^e2g;B9=66z%ONyR=H)~D*J0ekumnSF%~
zV6=L!yq=U-QQ3%IEj6iS`cX>iNC|{L36BB`igL1?tDpNXi?*|l=VAt#IG$evyPc;s
zCx;nYb89FvR6pd4Qb?=mONE~EDvTZ*QsFWwKU57bR^il7RCs}|P!C*-X9Fj=d{tz_
z`g9%Hos%rbd;I#??KX)`(+4?eD>r9}R3e#P>r${vCqV<48=W~_=2}-yUrx`FgGUY=
z+2<XAvqM+1Kh`ErtpiC2*w`|mIkQlFa`>jK@(!&2jL%tKs{Y6>0DjPC|2rfzVjy@O
z+#IvedDtl5w<W$G81mgyUrY5N=X2&!iiT$Iu==CjGGfBgp4|c63(@O6J>l?au9JjY
zsyPKU6U+-OgRc(-NLJ8rzL*Dy&%M%Ms_MTToPf%18mx4CXbIcouac5h#`^-NI<8-Y
z6~ikGCu|9|;(G#Vz?m#HkCq23yWtz>GEhyI>f75GE3iVDd9BRXCTGq^IcJ%ugEF1a
zi>UfR-Zt@oRV3$@*tq<|$sFBkro!&_f0VOR`1gcj3y$N&i-UL%?Zj%9YHemF1Il^p
z$iAGNM|OKF`v~Y|R(2b3%uo5BC2A>}u?43hkBRm#iufBZV!n0p3hJ>1)Aet$)B3{z
zvD-|HjlpPwPTfH#6C{10n^+23P3077DwcXm4`-q#lSDB|od)kEDq(xFv|^qHaM_8S
zVvNx17WX+h#M&ZbQ2B)h+@B=GV#+Unjn&?foP~2pQQLqBvigZ)VYI`Ur3ueXJWI$-
zHIw}O6>gcnT$QOGcHtIU<$WZ-Z+%N#L)ZLVeuu+A<LJjKS^}>AK=kus$hP_z=eC&T
zlra-q?bhIkCYnhP)TL7pnO;4S$DH1vl{8K#$zdPVA5@A?=+_C7to{kd8?XvqEosuC
z-j{*{MMEk@6rhYT<*!!1?nuv@=O2z+j5bPC1m{_pt$H^UUG-9aRQi*$IBjYNC>Itl
z(PCBh3>^bjS1G>A{TIZH31N&cNA+9$iw~*c8eKzd@3ZLYW)37BP1eGa7IO$hE6kzc
zF>{FaB%9g=H`*fNUU-uwPq2oXobwt}mvD4zuF!|V6-sLyuI`uYQzHjq2_3O&7CSy8
ziI$-pXhkd`#(1`0RmC|lqRM+Eld&@i7D42F&-NtG_F>rxRtXN%oyHh`F`eKy$v>hF
z<u3SyYe&f7cwzZBt@}9PMLp0x16wQN=q-a8NzX2_l$~dx=ez-B=d6tvt6m7vn1thl
zH$;JqsE%S?NaupXR}uqOmK{AgSE#5<EqIy%7oapIJGVeZ5Iwn@GV_CQ7YdHydW{=a
zG0a5ui?=kr%rM`9-<K&T?75kOB)DfFJghyJjX(bychlr0<PO%jsi;N_OX*X(vA(J8
zvRQM6t;1;ua_Y{=G~PcyXMF7amyyxDFG#%a(Z~rRZy0p$T;K4Okz7py_E0Sj!6wXE
zf%}PGFtKZ;7|5flc)|M&f;Ppz#o<d|ndk+o8oQ&XdxOh~Pyznv3Ej|Hdq($TU!e88
ze(-)?KX{jZ?1_p%_)71AH8Wwlnw34?w$*7MrK0Y&PM<q6-1BU^&*k8ZIYpZ*7<yW#
z4E{%u>vRm!wpz<Q6~x@z<`T7K#a*<(9a#WI=X^NxFSe!xah#zRoRCH1l(6--*)0O<
z!rrzdf9mfA8Y1bx7dVIvlcc26@0#z{67yk|r~V?)KMFT7CUf`#c@>HPgFXQhHSLuc
zl!!&2|B67LKuKTL#_6i_-2{}hq7!;Pl*E8U6#rm;tBJpqR@|TkLt|k963=$XrX-)M
zjPWQRw+&%U8}EBwsLU*{3JlC-4EvHIDLh(`;n{vIT(&r5K(TtZzrlTaJj3(N5~>%w
z-E>cb1c0dWe(1UTQ4VU~bt|ec!W{0|-k#kWZX#tzder(JxKrLfmlDgphPTjy;pAR@
zct=k>RXf75QeWCp#SLE9yks!%&qGVs>a?7}wC~5$CMVK7cYllNkEct(2&*m6-Cr1z
zF8uv?y08a#AiS_z{Ns=>vxby-c}RNZkaX}^q9)Pn*-<<)R+Bm8%lj<0)u+|#;_V(L
zEznxbm{xx=(8Avy&)u((wj)1X*RZ-Mp7SY5Ju%Koy*8fueO-Q*l%E!8;cw5H3E>(N
zn=jN8Pj%YjKznR9@_Y+ep!Rj?zT0G>*119pf9Bb~JK_!%%HJxE|8*Dm#+y5DtMcxJ
zQ{QqT(305QsE}vajO#lJGKMp#$O3VVaWl@!P(59bA!^?WKP(S&VEvRK>>tcY-KqrC
zi|fjGI)g$5jXRqzXBk{!L*tvZ!n6H=9{h6PDF#MqfKfor3eP2}*@B}UPasp?EI49t
z7xNZq5ja{ig6uQpL)a}@ETAHb;}corLpTgfG+PixmJ_@UtwlbB+a=5U8VJeq@+Y#$
zhp>28ZLVTEbk~3Ki7fIVT&rt|XIb}&EbmJef%@jEv{)^-ej<x}2w$hOXz-*jSAH@J
zAHw4#%lq*xBR`QvK7>y(`^{BQ>AJfS-p(5|AGBp*vjx30wEGiT<U{y3QcI@>aIy&K
z53NN$gazuGr+8uw-94B^FvCpw5V^D2g7BWzRk7mwn<PeVZnogOXZ7_%ze!>wr#U@S
z*Sq@i*td(NPDzZ6ivzvJKr;no^wA{dB{O57@3KID?Jz)I!~3ZC1A?g&p#>JWYh!J1
zLB^U{=s0)}t{!ec$m<g%jVpNuM+kZl#9MX)w=rl=>k41Z@lYmEfBU<{w~n14r{X6F
zSJ_gv9a1lLf<%v=e}WKp;Xj`s@0jn1v~DFAA~YO^$Rc|&_R}W_Y<L&Evf(8qCagUP
zhZ?l2NB9b5DFnp+#6NCVgon~00`JJmINb)qiu#MQ_nzMAV5R)yJTEv$U6*7m1;<~v
zFc7h?o!z_BVT41@QPa@@u+8n~XWd(-bCfs9I1-3B*JgyaMh6B40y~|jJEyh(vX+1T
zLy+{hw?!PZs)ODRF^A^Z8Kdla^kZpIeT0dTMW*McZ;4TZkUMU*kB%Yvb>quwnR`ob
zYl<;h?SY2wu(A0>dW3zvWmrw|@Ecazpf{iq>LHzZDj#qkh%gKDq^F1(C3VYAl)5E|
z4Zhxx<^L8FCoykw`v&4BQwTPENw@1JP?L2J+ENi25@V=XmD-rh$bp7NWU6j{nNE9q
zkS`dV=L@ViBduKZ{*)FOJKRpUvfs!H<d7IKBa^0w0u{z6X=TWuA`U3J+gHUVMIx8D
z)i$uZo|R5(R$z#2k)gvjisHTAyfV8dAGh8NcWLIb;8J)S8?$&T!(#Rpbt#6I!ZAYs
z$n70q#M-42eCx=U#gD-R3HUhnJnJ`y)3Vx5ZWi0_-uxL;{P^K3FTX|YT{Xmf>)D|_
z$Nkb+Le}Gb=@!+@j;6(>r@Jm}85k7c0Igi;ti=*fmEyALD<lG(vP!Ioi<nX_Vu<^1
zBG~R0B9U{+hcP4<$~if2bMaeLiq(h@xBFwBvKY?O<rc{66V@wi)IM)P5Bz4_nR6?}
zA7@jWcrzcu^sEer*t9Vc4D*&|40>uQUKObMD}w(YF|qKwx<#w2iRUsi2kQ?<JA8m<
z+Z5zTJsYr*EK^VY7%qj2n;0v<krbq0(9)Rc_nR&uNEZjr4EX0a-8$LXyVLH!rgtaq
zjtDZj)#~UpvjbmrmbqbPE`=N!dd|5gFU)LOJlWZ}a0aPMH2<~VJ7D}O!M8=s#i|b$
z@5yz{)@1`5GoyYtzXSf1+M8z7M!sowv=`2(3n+=y$9*T2A0MIPegDKiVebmY{S3W9
zK@5}n5pb4=5%^L1C#*#<0q)sbf-7;@Lewbg%a2?V=yMoZJh~#2B%z})6TpmWXDs9&
zZaSMg^0hygC4neDSj+iHw}r9vfH0O`xRpy;s`~X_pgHI5#>x+n`IM?v4_KSTqpGP*
zO`y>4?0k&Nl{gG-O>OE`3b!>?en17!O9gVvMnUi%@h?E*BgJwSu=}~ZW3?=S2t_q|
z_3`s=yeyI1cOvKTiqpL)^Q@ljc~+bCk1LF1sGs5#gqo(5sRtlogx(!f<`ZKI1Om}9
z&sz(3G%`ZvLX3CVI9?H8Swhxk8Qz<v(CFG<(LA3^b?l)Ic%M23+#2#?m=sK*QcrNb
zE4Y4QFgLi~8CaU02%IM4gf}O(h=nLs?3XI6+d6xLu+M;X%y|TxoM$PnleD?{QV<rO
zC(4Hw_h!*mw&bGbXT+rs>|5>TC(z*zwEZhI@n_6_WTAO2Q*x^nPKr=g#^s2XchD^U
z6Miq?jt{ooY5RIS&kcvERoRc>X>TXlCX^|UWRu9B=ZqJn$tkuth|-H$k&k@2phmVX
z3|W|8cX5K4sbB?W;E?Wjs?Q3d8fckPtUf=F&)4pd7V(&dC3u;7u$lTJzqQ67+=`qQ
zxU~dpdNhLt;VvnP<aQ(kaO=<Ddh^OTtNj<@YkG`&05M(cb{*`9M#Dnub)?ui>LM55
zx1hsP36G5ENEs$y3Z1}-t#pZqAg+45y<ot0RrEQ#C5(8BFEIWCeWjbK{CGE>;;Dau
zq<~8E&yg*4Wk6;6vjS>3d=KUHG<=B)iTpk>Ffu)IMcv3+@;+w|i$J$bz0bGE`tA0s
z_C$<O!2nX7)ihiY`7#9}fss>wXK&gUxjmq6^%n)yNPoW6e}%L(DWFn_awGMNysAuX
zp<INOs+PYOBTA$$8ARl_*7F<E($CA(Z{%-EncB?Xil*H;El5A^Z*laAX52*fS$))R
zUs5}NivMhV)EJdJ-_w8q3~er#J^VBeK8NPql&hCDw~D3nG{{hVQvw~13O)DNwKDf}
zjk}iQdi>{n$+wqQ?}t%Tu2O%Zj{wd-R~_V`(-yhT=i=+@`fC{6sX@W|nq-Si^riCk
znEtvi@pZhEwcA4O$q_pNKV+fnTf$}ZTs@EdS8R=+d@UNiT}QUkI&9X}S|6Nx@BLn|
zeNU(c0mG9|K3QAS2b}uLwZ)Fsgu~r^50~g-we=C{6_;=$Poy=L*OwM_s85L>mjVpv
z^{&g%TZ~_nbTinJMQpx){Fd{kRi)#dfE#JrpUM|M&^SBW%>ga!A`Q-bdeO!qY1$ih
zTHn)lp8wgj|I*e1Wu^;{u+_r39a6l&EecEe8&x5)-fFK~=CpAIi#PCTIX>@<vX1BF
zFs8!`qr5r17h}rIz<UE*?SVZ>!Qtlh&cJ*9fj!RP_0IDH1b(7t`RDgc#{5gcyGE?%
z&hx%khVKxBfMu&7%%9%`!h~Ugs<CJm{1pv{iXc9ypkr)!_7NXqpKu`7yVx}YEv0gG
z6*Be;4zOm8m5tA+?;Vg;w$vqqDe8V+Et-+oW<%6kV)BaBv>X$F6s1S6R2Rb}k6~I!
z6wMkP7$9EfO^IqE6+~hy@Lnw^{+hW6Y2T338z-3w=Vn&lrV3+OvtZ!iiul$LZ#!0u
zLFE8)BcoLx)UVY!72c@{;Xy|zb=~*cV&V_&s8S|lH{3y5D=oXTCl@C=<-z6m1&g+t
z7L^t>o;Me#;L#+*@lmi~OVD^II;MqLkvm9ZX{hKWW&aUVQ`8cwc_OFfX>%D~hU$rU
zS94#m<`{yMfDXH5JcSsy;E!UkQ;C*;7YM^<IveCL4Hk6Poe{gSm<HGK=L0R5J9e7;
zf&~xcPIUQG76i^DZ}_KK^AJkw*?652!?o``CKVKPdR|zZbh+o1+Rnp{bU2p#QExBk
z^mcf@n+A-SM;i8QyudUbXmXBiTs-E~Lhqpsrzm9Bpyj_2`@>FV&e4jDeLsgk7G{Do
z_H4Y!T;64#GZ}Zm){uMNl2|_*@33F)J-Y#K3dblGe0T$s9W1z)uzx(D(NkF)sM+r<
zf$*gxL<cRnH!|Pz0@%G#I)`7bPVYg_cb{V9)R5B>IO7aH?5AibB)`Fj*Yiu^V9oyg
z603s!RMK3mu6ji9hIlma)Js%!MnDX&@ZB;4Mb9_gYM<G=)9IhowAg-m?Vrvy7Ie#0
zqd3@!ZYUqc)Hbq6(*CS|xQjMkDEf0%-o&LfmxY!fCf)BXc*qmDntDYP(#&KGhw@-1
zbbHHmclSp!efDzQnZH3s#6Mof$I?<?GH7rK>b?X=ZD!4j5wSL^)Ne|@DKWzz@vs4`
zJc5x9?jWPamgtz5^v?3si<+HjJd<tQCzczhv7^i@c*JveC&{%ne;jVi#!{*jC00C3
zK2j_<fY;A2&lSiPsCmThxmzT5(Sm0Rslr>sm_kx>QGNJs5HvwWFE)*1tf=FN<B;jr
zkk{nQS=6|A_~op;x%_$WyBkiJ##4^dwKco3*n28cN+H5hT7^DYMCboY<bb(+t1Lq0
zpJOfv1xjL%wKv*lItwFPV@RXmiQLNF5U~X>#r1&;Tp{BLM22Qx&L22BAaB&hIRIiD
z!;5$5L9zsj1hZ!cRyqCNzBThb+b5T*jGuv5s)*w_BLI~VI5*rF;~Q~%sp@A|bb5Le
zJN!bIC^y#huih6yQ%3@}2UFxc8x)UOG55;UlU)0RFkNmAh>zZA%ALLVR(x5uY3+tt
z_;sG6+Bq`K{2K$!Pcgj`!8h^w5}e0r6%;Ea>YtSv9kWX>v%ZUQO&a3zui1@MUX8v1
z`d);K7Bb>u-ijl{z<cvs`%>=QlPih=vF!(Wc~1O0Vu9v36l~~=$fkQbc>gILo_^Z9
zcg-5}Wl0Qe>*tqu0(~u*Gu%jxE^@V}j3`9MB2;h==J3f-gX9PnrDykqbUk?KD6<la
zajswiCR&F2n|+bf+m2Ncc5k{V@7~o9CuY$hi-*RGIN9BG-H?@QPM5)50}J^7Zg4$%
zaFBEHK~48;7qjX>-*AG!Epp)oepOX)9zne@?c_I9aF!9i8Jh_`&TJgIqI(f)kckSs
z4_WwWLzRz1hbj#-)Xkqd)T4Prhnguvy#XbHe;X=}I^yeC7F$K&86w+SN5ZR0GmgC=
z&ycl@Pn&1Ghlq72J9nETg&K;_(362R_$T)O#ep-!jbXkKw^aqx5j|koz;6hCTI=e!
z<>FqwoC7!%5;!Ocg`{Y9>!H44vz2RowVW~Pzx{%4h*LHN2PtF&*h{ou=Bt^bP&X;r
zZD1+A_KvpV=r-wM0w^waJS<sEUDVsPdY{>mjq{X3r}t&)t>^ASGAHINMZg0$mjWJ7
z=2~+`4BkGWO@@<G`T-e`sb;scG*fJ9K7Xx)JN!GQ0O@+8NY^c@z!TUk)ACO1If>Gz
z-JW8-XF4C2-DwdAUnx_`@DwW0y&)dC_TpiE#=uwSfJ^o^)NG76c$r6<#jmw?BvhuB
z&;ZE&(>zdJLT9xHs@tW3HdSYpRrd~7SM#E#HIz{xH%v<eHA6Oz$iFe@>(S_}T$Ezv
z7=sR;qOOZoQ=qHSyt`|xYQjH~qX#+&B1lHtmy0OP%+P*b5mYwaaor`g=-?rCM1dA(
zWZWA4TYDE@2Q$gzOVV5%^}`|=55_5>nv+kLJ^i%uoa4@iux)<*+y3bT`zXtu)3f;{
z#;qM~cVVMn2RBqEp(hM-m1MFI?z^<CSiOjW1@%S#EM{t$d|DJz?S^zPV*!FqF@l2`
za;e;`h*D!Wz8b5QvJyErvUBkL)qdW8JNW(q%|;$GZ%oe&)pSu2$jxVa`e_ltlBpEd
zj)j<D_E{*LVB{RRH77YaV%;fF%;_C)aslc~eaS1m?YR1jz>JNp_aAr+&I<nw5*fEC
zyi|mLz;kREy^GUl<TIb%3;mx_+jOakOn~|kk3dOSxF^{K-Es$sU&Qqqi%@<h7aY_y
zW2}tb8s{6CW$NpcjZ@9V>H~<;3LI8zz46Rf*#*u;)Q#S_MW8POz%AV(O`*@yYafU8
z*r93xdRm#<OW!btj*L{pbYF#k`>C|}`wJ7axYio}iL?@j&jc-wvuh!h*@Q3h*P5`%
z=l?&T$wvuBn4n5xwcnAbT@`JoL0lat&U=oy8dte`p;4wm{8yn}aMPo*y+uoWSZ^(y
zEF0>`foPI3u{Zy7D4*i1XfxTd`RY*{rCf!#-M_nBt(Ir*FZ->fc)@}hxQMDlh7WJ>
z1MQ0J&A2PF_Qj)Sh(9KGnZl$J#tUB5^h(F>b3%!rq~<nLanC6+$*1e56rLs!NkfU(
zsfy-TfsvkzP?7~D22;=rAEM(X$nL~CG_VZK4ckHwfm66)O$RB;BiyhA2o2$eT}pR`
zaKkKqjVQ#XBbV3(`&wVFZzmVK7G;;NcjQS6C}K#67)PRs0Qo##a7tym@LolnCGHN!
z0DEFi=;mFU%7ukkMeLm+ZeXT20l)>P>ejooXN!xf(Q2SNnp73{Q5UMXXdHNg!p;ak
zE+81Ai^gbWA%BYJh19B`J*T%Y%y`jhK7~RBs(aaY$yzb!g{E;Tun}XgOS~(c8$O%U
zf&~IR6!tvvQJm!%>|rT4?`t$gK5es?M#j~%YB$+IH0D}oBqv@br&mhR+d_P_4a3k&
zrBKc)G*bQfRhh<1rHcom|K?bxeI;=Kr_11QWSuU5*yV%tAq$gmQ}_$km{G^z0<Cmw
za*Z*0HR)?X_ROX~>7rZ|rC+2mq2OTsIs$3Yx|($M!ltsd8LEuVSlTvApND}KBBKN~
zFH-9HMw#$#IIl}Fb=8x8nZD-s6??W9WE7WkfmbC=J&R4fNmw)YIXBK%PHHq~MXt%y
z7H!7LD%d6314tEGu6Y=MTtE!swIdh?s;kFKG_a_Huh5N4u?MTIIi=0kRNUkZ;&_$p
zOA4k+!8;mLX|1cn0c_YJ+#9he?-woWbR6QAqhwlEqB6cJy_&-CN8}m(#-kMYMbHs>
z+}eAAzHb@d`9wdK$NI5E`l0<S=KYT8_&U?1L06`I&^4Me^~{S)N~|UXeZDqVCQEo5
zJ192<bwZ&p?TMamI`Iyfg(snr;33H`^{khAY7+H)<CFC)U5cVqCfGo`^YGN25j8G<
zYKe+MT*a*+l#5x>wImw2E8f5Z(!j(-1L^Sw&^8t<Pv8H=oK~D))m20LIz3+13aRRl
z+>rE`U;Ax*%v>9gQc;&_r@mkRdwqYRP@-#plydO{0OlH;?*+a^LCxOou+?IzOIol|
z+<Ng);Y;qwUn-;Kr7F1etNKslY8rt9!%N_i8_8*TyXvuY2(i8p9YW#EbQi0eShj?c
zVayj+9~rwv8;J}F_RV-%_xR-x?|LY^38LY`1su3ksE>YEBn(-lX~bRZ66vykc!~Nd
z8Az>&-Ze*k&U%jCHA^jzKh9Ry#~*Xm{P^PxH9P)znYtwYn6D<q9~Z09vB#~SW27pX
zH!MX5hm>rMn!yawoP6Y8z%-7(#CX+GuIxcg%$gKoSM?REcgT_$uV#vEywQd%b?uGn
z`_R2+;f)nutr_Xhm@CSW*!&aE!vKB$9P1}UVX)|LBocw>LXVRatTy_PC~|iCFM{N{
zYr0@)4z<y8u*etn5J|B9SrJiFMAQ{O7!w627OPw-hkp`3CvDVNk6zTdh+k*$K{!?L
zl{UlGUt%&4LD=4B6j~SE7>B2}SVKAFDphYmFjhob%43O>bWvl}U^X`?<&ih5MgOy0
zRm+^&)DxP_ber!Yc+B7cKmG26=(KbAIzwgt_BM4H1oD2}oiZ6|CI&rOv4N(FD06+}
z>xs@j!xuXH<#=aH|3YWAD!ehKIM%C1@|3A7bXVt~392V*jV@?-;+eiEnIcDZN6VBD
zuXOYr-e?66W9R@op-p{%ht`1q57YYIwEt;ZldPU5ruCQDf&Kfm9;1#@6%a4DgVWkU
zB9!ltY28N3;IxjidRt`m_7l@;O=|VXXYJ{#b*jzwcnpFJ2i8dH3brIw4=Yxv_#jJ(
zpnjVGl@Y~Cl)3{Wq===Mi*NuyCIU<haA6#{9u>cU4LV%Ak*e|lR80eG3?I)dO1b`j
z&pc!8(9G=ZoIPdbuS8Rs$XpXuXChB!OlybE_nIG>9d$q=9v9jTM}Fk8W*hu^@1aeE
z=<=RfGXi_jVcs4i+2>plNuSo4wwEw+Ns*6zj>tcT*gyulIk!2_CpJXCNwhM#u;C4F
zchs2Cn4-qlfyb7l<rSo_%TV`0y!xhMdZg~bIbOIWi7vsbxxonoXEeQ<E}fh!KSnX$
z+@eMnycHwUI?vErc}fc4l_!gB27ksD-bjM)%VnzduW}jyvllcKO{x9R-tt~@ZEJC(
zt3BU==Yw!L*)Rd#y=esF>RglBo-(tLR+|c@gv#u*?YPN~IwT53)bf~th`IGda-bzO
zh>NZQ%stau(F`*tHKv%0oMzf|Jz=|vnpeb4g2Dq7jyT#=uFTmJT5S&+r%;1;Hnm1Z
zz?@8kkhe7^QCgP;i?4I#rFrhz1$g*onTK}3$F^yFxE!z5_^{bnY&xdxG)tY+4slJh
zoL+cd-J`zpffT5ya<t+=Ezp;@*5Sa1375*EZqGA&ov^FWHE0bx5zF0-dm-uqePW*e
z&1dKpf7dVn^m<28FD^%1Yp?dr3Kd3gZ*tY1sp499rqD=k%v>7z2g~FwIOZQ+dnONR
zvFK!N>va*lQ8XfX7|0h!>F9E%2#Mcz!g8~_g(nNw{Fr5<hH=KJrh@2mvs+FiJByh{
z2SZa2z0YdyhG>ISeoq!XyQpVEZ>TtlX<t8l6TYHWJAaoQ8GibxZzhglPQP<|;|jZZ
zmUbGsWT5ge<M)c0$ItP;)t@OXE`^%<id6ZrxLG>soP}4U#v}s!k@u{TM*eA=k^^VH
zw0a`?8ebywoLFY(EV4`H)Fp|mlO*f#)#J!IoUEhBdixg1XyvMHoz>`RTw*u-YHMD%
zt-Ku$ZPD&H8Q7tTz}Pjy&2E^;9SGZsByU0HYE)n)J{PL~r;6E{<=TI|I`JJa0y@LH
zGV_Y`mWKThs5vzg)_yh;QZ5TW<3Y*@-CUBh$NJbB`{X$2Xf0N6LlMi(0=4t@RHT<|
zKuW-;WFHY1N$AdUrEk2urVQb!ifoBm(^*8P<xDZqG7MMS>&B^*5K$J1`NmTq)>!Zr
zSoK+Q&6!sdjW#Wx0%+7@l4cf7q&HDI%GM3!N!NuHCdx;rStT;kHwhy3aUgf5k<#v%
z8Cqkf%`r`db`7_uhHMpXKsy6Hc1MS!2P%@zpo7zv-R>xGS7(jJg0M_|0Z}V(MnFYl
zZRn<?+yb0%w5Jr9%O{!(T@vr_3S5K*{%Zeb%IUY-3+*#~Us~mTbA!v=`Qy`3TVaxK
z_|R8}jo2VHnMnkG%bR6*d=6~EaC3iWzHTFS@4?%W<&uL-ia2|TyPFgbYjGc@?wl5p
z@xqP4@G=9n02TnmIAo=Jk)#c-H2x@tuCyRd4Htcm4w*$DKtw~1_F^?)4lZsA!KqnL
zYjJ5Vy)3q@nddJnizKJ2F;V^C+brMm3``eb79d7lR$G&4^JjPu7}ET8da+uoI-I$)
zY`mH8vOcLZL#yoOLT5wErZM<4WFgDd<r<H+J7%$z`Hn6$x^9Yp8ZD@~fZJyJkY#i%
z;zEUa4hU%a=`Lv#{l)egQB|@kJPtuz=9^WjY8T5?Pn4;KToHlC;A|(TJs?$&CsTNH
zJ@E<dIe&uhXQJo`uCyxM?599Y52I_vxl})p6q-GrlSr&p)3aNdo|1Av>G7t)sdd;Q
zEY_)|fxi9?+1`#C;_CI+3~x#)6qCZn!U4UfdbqmDw3jNa_Pi@Iw$~)x+H2O=han-j
z+nvYw>Rvj8<IRc`rI$8Uy3wvfsfwd%jL(g}?+SRpn*TeMWrMbd@#t!|&s=al-<nUN
zkATawQ~be6Bi_H7m44iXQ>^A59`P~%LQUo?-8%L4z-i=lT@Iv<c+EoH4ngpK@!@8i
z2u*CDgQ)tPw6Ui`ID0SXcJqXE825IWJemH6mqLY<Z;s7Cw$beUXhKWAqs`F~<>M_S
z>gayGNmfBpd+J%m#J=c!BEB!IC{-7O3DeC3<wH$0WuJwdV<Eevb7IxRSOg^{f|TID
z5KgG_S<sO7z;ZKnVk<4~5yTdK?MWR~;T`s_ZEY8bHZZV&Sg`{IM57rf^h<1Ptjv}e
zP9D%i%nF>q@I-SLjJ#5HT!>e&<>fhh@@{Z$!rgsd+M1O1f<Al1(O3j44J8a5XA{Or
z<y)8Nu;}6GdeW%}V#tBcTGEQZz~?v3z=hD?7htyXcV`4g<Cg&l6rYlyUa;CYNPCgx
zfxmy5&;Dz0^yeS{DY-6yoR3`biJ}j~2bSO^7k)~CA8@CJB)UDe_eW^KSW94!J#Rz?
z7X<K!b#1j6>1FC)uL~!)2a$$QOrCo7i`+;i|A5&*%M^Mq^;NO!iU8lkC6N^0t76_|
zX`h5{BD|#)xxl!k`EK@o&oH~03L>6aE&3yBLATKPs8@~pE31{N?K>_A-IRfYhu}@l
z;7HW>P_i5kx6e!s642NsrBK_GKaszPybou-`uNngTQh~8OmGp0!8;sZrvCIbI@Y|2
zxr%WPGd1&2IEU~j`sB`k{4(a{%l$}m-J0(kSKZTWhm@J|yFFSRHVd);LyC4u(Z?vt
zPJu1(!^dbRUP})%bzUtk<V$b}ekWN)t*}|DSe2-vG+xCka$kE@?xg5`)D6twjSw62
z{AuN7>R^K`hlt~xk@wDP<Bp+i+^pM(krq?%-3`GmeB3kY**EF(IJ1X|ze+t|xwPhr
zb)A{YJvvx$!d&7M_jyaWSt~-1Nw}CLMBe+Pjo}H+SWt4l#m^E9jU_OIEqd3D+BN(2
zoaSaBt~9K0ZNzO;zksSRZ$dtn5hP-)r~X;lCWYzZIKw~x#odg!yvodlV^Zb4&X`mM
z^**M`T#ujUZzT~C0GEP0og^A>V_)i=0JXh}a;eQzn4rxrD=-}G2U>0{R==pHW@+;0
z0cpYs31Hgd-qdf7ds8o@ulmxd){*~FnfHo{m1d)GQ-dQO;NoSvf+L=gzxmF`ZS=2A
zS6U*KO6}jSljVpRB??moC)N4B<-$<8g*%KmJqVmzzGh~~T?zc#N>ovpRPCX9eCP%{
zUb0*z<*NIM*unB?UaFt_8R#*mWrvJ1e{(G6I3ex0YYEFk7ENNLu^ti?8wVVZ0qlvR
zP*ZH+ChaXPZ=1%QczJ9w3PYP~=}}eQEdSWz>ZdX=p~ppq&i2z}=}tzS_NGvkcddVH
zdG#|xGt^iaWD{924@O8IHMEt8BO7RkoVTm@f_!noeE@{b#$*9J+f%q&XfGEiK-qkk
zqeReZ%nTJKRpn*+r~5p`q0K1F*?f3@IQn>ON<0mxrJKRc;s-6VtNIZ-Qik%U+DQ(5
zm0RY!>^3|VdA5(&CJw~%G4O_)zvjx~GGBhV`tD#&!bdlaKHudS6LlG1@@y|m0@eb3
zhX1ZW-*SH$2Y>7g4&c#ntW?q+IJe6Gfz)KpS7cJ)Op@^iretdlRl$QzuJXQRbnrdh
z>U*)89B<E<Pg@+&zRRRJ3?Vr4DB`K_mqVgGX+dl(`0wm}Ovb`E*c1(7z!m-mKXK3e
z&psTVUBPf{*2&-;AU_jn4D8{{iPQD*lY!5<Z8*c;NJR;;NL_aylQx8oz&^mNoJcLM
zV1sBs2OoCv%X(!5Uv~2(7S|GrRL%PvsCjv4X>~Ak8R?;=Uk!$)$b)80CO<-+U}y#j
zoHLoI7B)=exjYyW{pnyRi(fU4F+t_Yh`3zi>!K<!Z;^3TRbE+=ahbVIny;>BF*RBG
zGq|Qeh-4m3W{daE0sbESH{S`}fWvnji-HJt;_&_Gp>uWT0<7hlwPu5K!aPuArdN4K
z3CcJuD5IF1B{7uI3d%TayaUQe)`lH|cRok|%?26J|8ddjGCeJ$MVwRLLZ}t$fNU%)
z4u&##)F$2fxNMN)GVrn_+N^Ad`(-YR{i$jOZdW47>bFnH6p2#t=VMu_WmwT|GAK1i
zQ-x4AelOYvz{3!~_YE@9#)sPXy^ux?@?F-VT>b2k#Julj_Cnvbhv)OxnlVq{VV<i3
zFH65|p8D@f4n2rs^**K+GCALl<)B8J-_KVbsvB9UVm0U1*q+-IOTJGhPmd>8n+LIU
z7<A9y#%hUse!5r=R@^2~q6UzB#{lEAG=(46qJB$_;hk|7=0aDjL13s@yxSwgyN3gx
zNg8hIR8UA-v&e3O`qi``^xO9GvLUl4e&g-x2ZK$C6uz9RZDw?vK)PB#_~}vk6q|)a
zFINnHuj9M8VoUK)(cZ1RU2Ddbm$94zK<bKkM&pi1ngvu^(r1QbZ)rpD23dC$=<Vji
z8eBE-bFtw*_H#&94FUuMX$yZO`TlJR!_6eeZ;=u#)k3wUId7MlALmu3Z=6~ls!7KK
z2#)kE41PP>YF4djg<d0l!=E*&WX1XTe4+wOy#rr9MFip=h-6nXlCz1B%`v^?5oBY}
zl&c(0EDjp=CX1ksZeZi+QzxKB80nlm5{5%O6{DfYvsPb}0FDq41aO3aP?i`%lop{U
z?}51G;*>a`^j!@JX7$fgSW%--W&eo`T{$gy3-Z*9kzhHlxAC7y{A-Mb3ui@Vao|<g
z3g)=_CGH;Rd6$4P$`ye$qs@}SZH`-9^#-!UKHcz8Y(6{<QX}n$mO^z969#t`MLquq
z*aK~e(}W+O>Ip5UJ1>%p5@zjium~5!So@>168$Nc#Uy=K=G<<2<+<0#Mhc+8ZCr2O
zGy^RfU}Kcop+#Q^VrQt~??M=wg;{`lI;pugqm8jPOMU!~kd{?hHY|ApRTFK&l{12c
z@ylYVdR;z$dWAdmr+=&PF-aCFdRDM-Vz5wZGYj)0zm9|0{2#?ZtggG0={o-ak=vP^
z@WGdJ2ZVj?zlakly{x!gZ38s|b>SxY+mb}M8)rwjhL@a{j)pm8rY<(^Y@W=n;KPfh
zI0w$H<lt<$(bG^(hN{5Eq(z<vu`%V*xyo`hT<vGZ%hV;TqZAeF1(pRs@Yik2Za>r)
z)D3v*g-Y;wS5)OWJoOjwY`!cF|6ahNqd{(GqzN9#QIEe8-+2?wv>`Z4_s>GDIB*;l
z)ujS$?z(fbiW}QZ-8zSn2C!0f9fmiio{O01!yRkC0gZ4@0BJON)2g!4P{S!6HI5>f
zj5aaQr{g#1QpkDD+!X$L0xS6y{Bdux<hIIyYNVEORmw**Bok*H8=eJ0{T4~FQi;a^
zk!5y5X8A>9&$E3jho7h6WlEqK)ezR0EG&PDIo=zVl3uKP6l<tVwVjsAao<a@4#~YI
zR6fQ0FnE7_wdzR3S+^bww0e~{&l<duQx!n1|FiMKw<>u5LTWd4L1-z6cTVEK%aUj_
zUW4t@8cEd$a?T!lds(~#1PPKBbTMm?$&2v#JVFXsiyTQ^Wa`x}4D3v|Iu;m6_Izh0
z+l#Y79H}8Eh@_UQ2Sp((ak|u^EF)+~EuS!mPD}3_g!PjE;vlR;DG5*3g7t^9Aga}j
zlPu+Was_p~vrxkvQmu)Uhw~@$TOhjFL>{I{XiZY<`%Y_=!EL$ZH#6p$d#lV@fhWbi
zA2!ZcnmXOMIzE$kLB@OoJ;ZGbCA;-8b8sf5l<|t$AjK2Jjge~Z41ZA?3~2xwJdAa|
z1kJ!cq*%yV;1pm`+m3<d8)lHC@A^}yz;w@}EeJpo&3lEcfaaSbFE_h_p@~vjH&GJZ
zCRGI+^7$=RufqY>3+HLLgIZW}=?6<DpM%bMMg~c}8VZI3wIs4wqk%<T`gb46lIi4N
zy>1g<c%Fs}1@N~?Tsxu@=xH|(1i7PblS<9PDb{Gfoq&j>EOB}5{w1dVywK#_l^&YQ
zoWV)v!;&Ew(%B9KT3x}FPE#+hRlikJFeDWR&L(eoJ~9oOa<b`sgU}$0-*5^yLQh@L
z`G(b#AgSauzJb~h9ts*xQL@;#sd^UZf~0LSM78<~!HpAv^f}go?GQ{<b<w>AlAZg?
zrqzF|9$<>2SNC(>jMbu^yAn{{V@>CMt$Lf29qx!+&{M>t=aNjWBxor@dgy^INso*S
zoJ%%_#osgTY;%{JTbt?4pdUk~SeBLU+-NokFb3VZ(dYGit3Vf16%tT@n&G!3wh+oE
z9~vf-1P5XX7Hx^GHGL#s*jjaG<PPt@9^U<)sH4|he0l~4najwF`cKbLmr|aGEOn7Q
z#9AApE0r!V%GkoYbAuMVF<{+0t2>UjJM2svrX9J#8{eG~skLUZSpKP|E%A-a<){oi
zkg0BZFhR}C=PS3n@D~J*^4+Cda^6PKY*Brir~U>>iU)smlhTkkm~u$fxABosSaBog
z@C3fbEvyG)bBdL;OTCRY1)2jc%Q9P(tTNHFDpS8je~f^&BR<0xLSLSNlBd`up);Oi
zKv*(+>bVO@*R~McbCuM!QObx29-_{r?y}wn{GuugALw(u6DtiRdbM1CIx)XOTk~jj
z`c;lryr+u&b5s6|th?vjjnEit`zbN&bDrzg>*$uo#g;{LN`0GO3^1)XSACoKlF=bB
zq561=VzKFJ8nqzkLf{ga1j;__xxbZZ2)X|td@`{yD{_f#I<tH`d;!f2s0`o9KG%;q
zdn&`L$q3skvjw(S^>`K}p_{qlyE0bc!Ns(8Hi;I^<2K~h1dZ8r$etb@(}k{r*`x8Z
z{_yX1QMXa2aM>`)(sohTORZK<VlJ)B136bqrGfV*iw-Xnd*s02rqHhNs_&Zw*|<f1
z<Ow~5L$ctz(%Y(^k;EtDN1kAXZjXQ2C5bP|k369^DYq<L=Ca8oX338{`CKXx|FT#T
z=g5yd`O?%^;$QBN#9QS@o_r(K&G9dON&Kq($dk{b#Ii=W^O7V!FF*3+8?7{$O0Rn)
zQOS=y`S4^AFViK7o$@13z6^zM*Q(7ug+!<P$P<x${t)|O@pvp2Pxvts&B-C>!@{97
zA<O%>KnkXzCE}@<du*h}ocQov<EcfA`+S7U8grjsM6@)~9u-rOKwr6WwJ){$E~c$i
zrCa<du+l}O)#|i<RQNRh!z&xYpjZuPkM>dv(o~VwY{q<_C$oJsTt$B>iY?-smG5K3
z!nellX;==z5lsY3>99TWPdyL-yR;nX#(L?$V~geQ4Z_^qo6`x19NFuAQ%689;RHY(
zBC?G8qiD=&r+Aw8^cgN(3?(-<Eb$z7#0}JKcHrZ3yara^6#NI`J@ClE9PJr+vsXKh
zi*1pz>MWV&De@yvzKQDd^fjjX3HgZ>{ebUm%&FZQ>}nVg*lq8Wcm-wZCc)C8ghcp;
zc%GHS8pw~cB$3&w%6KMGkRV@N*)m=rGVOd-DsFK-7Dq8=`L_g4geVg4Ot&JFmQ|k+
zSnrY_c_NO}GqTYweN~B9J;Y^hBqcg#3iC7QXtJ#Ol$7k2A9?aQl@6*MD=unjLq;P*
zU0E5Oewoa%=!BP5I|XL@rMNu#lGWuyTK^Blvj&T2O7V30ktbh@`iGt%;YsvL;6Ry6
zaQB$Y@U$F#gMPbo2WBK{Q1h7(nadt)E-ChjF^|&7Mg13B4e+>;l2j9)JvE!+de!Lb
z`He*~q@ZwNqhnsDRI!ebp}P<p`vcPNE%GBzz6;b<=XYKX`B(*3|0C39RhVgY0}QFB
zQFTBb>u!9a^P|OuF<nq{B+>m&t6V%nhWcf^+<$^6pcb~C<|T(86_ny0I{Nx}@y{Y8
zmEMZd0mA2m2rS;;SpPry&FULwgwnUAR^PJXV_Fce{NJZmpU@7FR)wBVbs07hTyw+^
zU@DJlqWoMbKZWvhyZqcGKMnHp6ZzRAKN7Mhe3YLZa+EX+^2j;t-5on(ChQ5k_fDX7
z>cZeGTpN228NCS?4kD#8K3n#Rpv%BKaceOT^`z)E7P`W=U;BNK`iv7R#oQWmp4=7=
zOYa5NVaf4vd1LIP^f^`{n)O~S&Jp|-+KYwh+zR@;-a5lYi+-$5j?UhyR^2MaASN8q
zf|K#g;=3R^CY>2f<lBtNuvJ+gYpbm=@=#pFB<dj8eyCn9QHa0P-#3#{I=DhQ_!Ck^
z`hi8r(eEXQuD$n=x;F~qyjBdQPjF%jRMoDdC<@N<d?nRlXTeAFEJj7~)*w2>I_FKb
zS(?K#$TUt!_6jL#o#^-z)h%AA{%f$s71HAFXj-TCQDte;U(-w(h!Yeo`|>JWH4gm7
z6OFkP(Zr7NG_#j|FM<O)(e2&0X{6`gy|nKA*mL(zJ!VZ4J=MZ)7xIYc=sjlpguUjW
zu*fB_@W#{uYr=!M!Uc-i92fOqE_(@W5=6zcXQMs5%>83r*t~^LAcucB$_sYv^3CNv
z#?*v)Ow!CGKW9rHM~q8-iHj4vCX6OJ)UNiAQoA7uJD@zMKM@#TBUTYdVSAB_z+rC@
z$~;cI5#}5(?zcejTAVyRACV#oqWmQWkbP-8xgh^Pw7m;_RMolgJ;}@@LkP?O0mDTI
z5)_RWG+K!R8iWL_LMH?gqH=kAG}5u{@xTmt;gUFsX0n}A&iiSPp4L`>YHLq#wpLNB
znh;C^TJDuZ2nI!6=|l{INx+!-{?FQbCIM~xJKy)d`XjUV+UxSHwVw5?wVvz#=nV0j
z0hWv?E?p#oD0LaFA@_++767sJ#AcU4n#eFn$@j!*cdz~QsQpIMVCScy&Md8Lfya-R
zg`VWb$`}x17v_106EU;IjYxc83XX*rsM=dx7qdgvEa<$h8N;6B+rrCEMTxKm6ODs2
z2Hsub22)OgOFSK#<KfD|UBNPC)IWibSD+~9dcxie8<MP}@cnuW_GHESansNdJhh%N
z>?=km=dOCuYwj!7aS+7+4@N!bN&h^!P6^&Z==$J1J(!(TXDoD}7*(VmX58^8!<gb6
zwlICvlHSd^JL;8lc2&I@6RWnM6Q>c5naQ|;OfIvxb|8+mAzl-5SE9a017>{qoiQX8
zauXK|ySxp(o341xM&0Y3dCR)i#pg<@PN8c2@5U$3RaMX29E=XpDVa|gEfPHwNo=}C
zg6_FV(;R^@wF^2K!0Vbt@lHds)ZQ}cpjIR}wWwHqzfN~uJ9W=A&d4s6p-M^2X&iqL
z)u>TRJn@r|Yy_`l3TO8d_h1`KnA0vLM=x19jL3bg?X#vtuo^=U+Y|oeMLu=rO~&nQ
z>}Ee>{W0&4b@E`Gy!-Tw`u-Gj@zY-tJEK^@oz1_jVwI0Ao|P!8ulkf^--Zn=zgSN4
z*SpxA<*q);=y~V5v)$DPc@jI*F1`^#6^Jo3m1io%5cn`eOjuSg=xpYE6sy+JdcwJ@
zJo2A>*yJM1gJKS1JgEWHwN)S5v|+s~Ps6@$P2_c{m8grok%)fk&U;LH6?7nzn(5uW
zW(J--h6P7O=Ed-Lo{40mVn!P3D)=Ns8`Sa@U~djJCWZFdW_w@KWt+YGiBhKF&1nXU
z?YhIG9+Qqnoti`<L^oA=-s|rlklxl7h$7R>q`*}(lL?py5km<QZ|k{-a_aLIq>qpF
z9Gub{7*Uaz7KGiWo1Ei)KlmAk&lw;$JTu9i)0lfGf3K1lCuRXSFxN|odMN>$P|9?=
zpWT^chsmZz1^R@rtV6a$>+#|Eqp92>GQ`q1Wgbe^eLJ-tN1;Q_Z)W~CI>ZZ3Ss5Wg
z^UJsxMn}AAgUQ5Gq%ec95rvKw;f<LhlP`DKRt#t>V}XMg^ol`lKwQsfp*!P@p7*><
z$Awwe@VrB77K>q+({CrpDT5wrht({{>0;w>QBmj^$4JK#<8DXz`$W#`tn92|!Ux!T
zCB~Yp$ec`(->h-zU>7WR*aa7c?yT$g@r8dLz7aJ&iyR0oDtt=RhbadGM+z<H@Q2J*
zEnT1^Wn7GeZfe_{%o41Xh$-i3JuZ>u+U7`%IqE4@cWQBYb`;@U4v#oqhH-~d{0~rN
zr5pjL5P;?WWw|=ir{~`I@V59Krz1lk<q3T}3HN+~G2I28B!X2Xsb!Qc3w_+vAvaB<
zVM>9Ap^=mHT=T=19aVh5)vLP-PP2`2F4OHAd-r6rpx9RSs(68#QXg16OXep)tXi&V
zfpN&>zl$zR>+!>5-*0box`<!bz1{i1Ez$XjRC&MD{1m-vaO(XNt<;HUrMlXjHmZqQ
zzpd?UV=)%*kmZfTS$9>738KecwTmZ^7IXai&m3*G&?iX@XUF^P-P`B74Y>a{@c~d&
z#L%i202;^NOkd?T8`#;lq^tFK<(XZa05_!O#*XZm7rpC9s}!9b9Ky+h@vuc5CYPc6
zRXb<!P`f+S?7{s*w|DP`>Ffg%)c90)K^NGCnn}{Uy{fz56l!f<0oO1}SMap=Z|F;h
zh~d>Dp+MUBL}Wi8Zp(~1bBPK#uR68@%=f6*m}+L|tL_F*U<Biz6&UKzQqP&GsKr-z
zFGuC-Y%92P&%lb@Y*`bm%OaaX?heF$m=ig8E`1ZA>P%-^;rY1w@pRXFh+9<Pdh<to
z7_!uXUmR|Ryt56}h2}ewB}|r1_zyFI91b%9#bU`pAT5`fu-Q!TKy_H`7#-BN<1R6G
zwky=`xpKC!dyEu2GBBOuil^*VR*EB@Qm^b*QnDmrw(ep_)k#wtNKv24Jnj)cbE$j_
z-IVSTk0Yso9h#r+!u4GI8DDf5hneZg-P^LTSt)Q0Sqf-zOuoj%<O@tpP6v}Omh3Kj
zbh5yk6l(7mhtf&Wk=E;1LmQ%9k|m4yJ+In0P_Z7eX31Vnz{GmaXY%bs;*y!gKM6HE
zkn)-@(NHr%{>XtBrTU}JTvz4McDTA%VkHS!S)mPCw!o!Q!OE<oXmhuM*sj*49{qJC
ze^JE<tz5|`SF62ssV{n+)H@q?!G{9m>@3Q(Ntw1p8NM%@V9Z__&my(7+1r--)NnvY
z=IWEH8)io}?1#EG*Yh4EK^OKD3Kt^E)0gt(kf$DbN|vY3<S7X=$_w8&lD5W9%F3{d
zt@$-#Ykq<J872nj)9`2o$%tkdDN|!CvtdFo!YNUYydyUnCUhiveDWA0iSPoUc3k$^
z0%N845Gg)x@)-CuDO0u$lkw$@qaOhrbvDLoc_6iQwy$-3)Y&%M*EW7dT)B@v5+@0h
z_qu+5*JY};)pEAIfTe*j=X?5PvVPH96(ONHl8U$}FXJsAER}!@_WJqjPefCV^tTq1
zK=fopuS+0-qT_}eEOgw&<2Z<5>c+@XG;5U*X>O<-F45$a>kDBRwn9WA1?@f+nkNfW
zHjdO1CETU5wu0W}(ed$8YBM?I5S7QbwgR?}bYYNd2-}$O<84RZZ!dwW-9MzQHMhG1
z%MKg5ZyScYw>15#Ym@jZdXOZjC_b)w;PARpiG~ez&ym(Qgmk^%4jmB6mNcikV7MoE
zk!;=gHm+B=V!v-FTAlG%`@V(XK)ci(UgCP?GkR4%r5D-hmZtLXhT*pbhG-96P{H8<
z=C_%|RW4@03~R_%)YhWu?L?B?TY5;XKkmR9h+U-exR|u8kdc&#;ktL&O)v1sUQTUO
z-4$$c%X%YW$ya~WF|@fnyr7?<N(_c}N8h!HNe+r?=;(ayl%C^4EI5RBCu+0H8VH&@
zd}}YGQa)uTo}PoEP^-4eFv;79o&tDosWL!y91k4Pza(NM6t!*WJM@A3P3~dw(Jw0c
zNh>!J2DZS}v$uT8g1#vQ>E#-*-qs)Vo|Ts+gr=Pk&9p<8WwL`ETGsayp^zTJtePop
z%TE1-7ooi5$tI7a2w5G{dc0K~Inma_8?>r5Djx>G_z9q$)fg_-0m*0<!6QB?O2k=~
zIHusHXkG!0#i^Ov)4X`wPp|Oeex~A<)M*a9<KK}w?aPQ`RG6?9pz%r6%|d4ceHv;#
z6=%k|tM>7dUvXwwU}(*lLNK~R`~c!>bj^jeE=-$p>ncvCu^Z(lag)+d{mt2SM;aD5
zpX)0Q+M;4!sh}^S#Ssg3#?Rb=J3|{-<tyYuYl7K5H+9<lz(uu7Vp=8qSj8E<5!Z}~
zj=)ilm8E8J>LqX!aIkQB#fDf~FwJ`sOM;ZN!stW@SPVr8R?fH51O+{kK|&o3E0iX*
zhgA22m`CCFz`7OH&dr<le16cCo?OFIl)U2#b55S^g9u%he>}LDXVIR`9OHH~qJf*(
z0OfhP=MHnR9_CJSm`hpbO$BP49&J?Q<(%N&f;JjK%Bw_dDV}7!OO6GGmxsr2)|SEV
z)q~%;<}&vdq-f>d1zmm_eT1>lMH_QqCYF&lA4+Vm*T(MF931wEE3H1}pgleZrr+1l
zhQnxdMFfy@=3+rP=OolD(a`}E9L)OD@NqLHdL`bkaP4DFia$+Hi#dtq^?!5mnqz&t
zm1nlH7G})rPeZ+;pf8xtq+zoxdIr%8^|WF2;8L5|6PPwDR{(!H(gvC0)7R;K@DTi3
zb`kSZd(QL?@sG0#<Z$fmKYJQcFXeK_0?`-Lw}g+{EMyq3FVh)onc^iJP{g;LUOP)*
zJ(x~ighh~gG4{O#$`wD95y#k)$UU*z;Z-~CO~oAxS{&#ox?irp5&7vE$GVZ;ldFd>
zywUw~O2sSUV$Bxls2$E{>xu_y@~BTY%0_evCAI&BeD3@X`{&VOu+&@x*A&*=l6pz#
zO!8`ig7je<VRgA?t~)1m#xCxY`{KU8QVL1EH0SeZM$dc3Hh<C+i<n}Unhu#|IAM<F
zoa7!~QXKa+^l%RSg;$Y@zQagUn&MMafk=DTfXC41J%VOp{|+NV`y;D3np`{gyvwq`
zN^6cd#@F0(-erTiIFN8{M?qM&o=C<#BFru=7H?3!;{sQQdWQwaM#_@C@2wfBr`67v
zU@DK$S|^%z@Nn#JGs%(V$t;SUs~b5l2_=(>IGu7gE`rUOuDE5ywB*}zdaP;H49<In
ze|YOxTzumGimEnn{>ZYaAMtCtO6mA3LyW3W%}e~o{T2O+=fCT(C}|oOpNGj|xrJCe
zT3u#UJ4071&VZupOH}S`Ii-K2M<eRMqtTEA6e_x21NJ}jXcU$P8r1L2vT7^8W~bDz
z|BdRJW9k`heewI=H1TLr8v0WFHm$dcJe(-fv58%jox5fQzuxn)sr0x*#XK7g#@mcE
z<E=N0UTf8&+#KG3hpzV8#WSW=?R8gOBzYHjDo;Z`H?7T7W348#brUis9p_0CET>*b
zQTH}fFFxZTM9i4LUSshL_8&!M7uPI_mAK#7m)niyT;MzMXE^6Bwkr0gjymcweI{X1
z_VNR<*yQPI8$Xt2;fwdcKNr0+V*`GUtU{Kfw~ner*}!%*-1m0C7xXr-cFJi6-S**I
zh1GyNnj>4}K^^3W^$+V7Y2SEtyKY591L}JH2raU8h+A7Z7bAgGNA(C`8tk!fGCbGK
zLAy7+*qu$JWg(n;wGfGgkTpvVch9v?o6nrMtKJmImciMzU&8y$G<Vf+Ns*y?&ipd3
zCYg9|y_n1qEOSYx-nVsKjTA|vOn_5PFI8AgP*aYsDR39Z(SPB?Km|$gNr)+9!m@&@
zs3S+}z!v+QIxaQqm_i+stO}%Q_7r=Z?Yg9MMdRG0OVf(g1%i#7lKxF<SrCV$Vto?4
z<z@Jxg5;=#TfJN8NpkSpu-$O0XcU~<tN7fhbF^!ITX0gG?)>&Xp*y>gNEW~ZCj8!V
z%e}pb;v+NXMK5kFXcq>aSyQ4OlW!Nem0WoXj;&i{ht&^cO9mhluJ^A5kidC+J780%
z!)@&>R>whM@x#*_ePr)v6&u=x346FWkftvGQe#B)BjxC2lR0HV=y$I0HX)tx0;je7
z&gU^aqhlURA=LW=0>kit3HWvLQ-@EbukPgoWXLs8<TS=atXR`^jX!hM<3hWB)(h?0
z;0ncL%{E(w_Va7et{s9UF?Ws7EAK3G&7z)bGj_9Lxr&%hV)x*H40mf5m)A2bDX_j&
z{dlGjCvgGWVjKxCJ8beUj>S=Q!0p-{iRM(H34vG|il|x!Ocm3dU_2s@7UMlCipyE#
zu!1DuaxwN?cGw8El&V%~vq8nynY~XNsQJt9le8<wDrr=o^~7lw_IJVxM9O?UjqJt>
ztSLA`?Wefee|)_kj4l8e9O*HA0uVx{=S}=^$MNR}<S!%GmCSwLlx@V!ZIb6*;wO?F
z1V5414syqp)4qxu9KpLzbW*lTKc@=1Y28E4`cx#docJW_tMGS*0*m@HItOLZY+-Rg
zLWY#8Dr}j{@K@B|zILh_s{0`XMTGWTH?O6ate=ld)RkO3WhosJHhA1Q*)iR(KudI=
zz6)`rhoI}771k|$!eQ`z&|2L9MM9++jx0Fy%e4v8`1sv`iJFpVzv>}7rjoEN76CxQ
zVbLUvd@z&u6^n8;HixC^U%zclZ^tOgfooMe0XWa}Rdlhm_odA90yxwTPNAt4Glz3f
z{DibZaou@x^(P(g@lssM>>_?j_YWyj7f+EoMGdt2HNKhiBwmJA%FU^syD<K54+XBS
zb$uI&Ox2FSMRGgfeB@KVovLXJ2avKrO1}7dz7)|>K1Hy@*iG@`(wutei7G-n4nI<F
zT##rgk7-i>8I<vmQx(VHaB6h6)sqoSQDk9K+`{xkbXrNtAc)t+tHJZ};zSiuJBK`p
zL?V{=$Ksav7^n|0-b4f4nj|7nffrs*R9+^FP~^1FNrqWY4o^o!E!OP!T+f6w<Solw
zXNPMr3y3$Zov1ztupf<yE~V&O>aY3*&rho9d(fcOgxxKI<YknqkH6A*h$J>RGSPy1
zj{LZnx-OrjOT7(iCu64?3yjgts~V|HyKlN*DjV(h84b%tL->|?{oGF>`!KXD)AI#g
zRu9iUHH*YtWcB9qlci$U>mid9*z{L^^h&Zvz4xi6Vp_hyV1zfcpuP{&1BiywCy7iP
zNEXxwVY}BP5cU)J9fGh+`KA$eyYew4MnSW<!XAvX2g1Pvg0ocG0?z*O!8pzyuyFS0
z{8}@8o#5=Bd1uPD!mq$eZG`*bACgd;RO7hT^im4xM9tY<^(e`OAn_p`zbkaFBPsa5
zz)TLn$Bg}A-X>l=IiUnka%&z&0)o(%oMp%MemO@tIVHuV+$E0TyWx*nG>GsZOO(>J
zk`&vDX?|9*{#vYMsxPLgg&kA)Yn7CXsuW!(MLAStF<c`<x>y}xN7ltUzTnqP`5jM*
zb>y!8Ij_>sp;RZZE@{Tz9%s}W?S5xjWLZ0IDsWlG8o?3RYM08$BHJ>Lu}4}#Z?G{@
z@1LcjeeRk+Ny-_g`{7^n5OG}RZE!y<Z5oYOWmNCm2ur@DcCJ&^IPxSYu}CIyypcbT
zuikCzKLQ2@idpx5>3&e0ghc}?eKpg&%UX@m%i<)3X<-gT$$XsAYfg~&%(`oF9g7tn
zzAnVd?^9ya=IUW8DTxo0Z<0)U7UhP@kOZBPdt<m*{DmBZcU!GgY}ljM>h}0rZBnQI
zme_2BOk=rF&<6<@ZJo;*@XPs4u1S%Tvt>8dl(%8<>daDeX@S*QM(%y;TKyuc^Wt()
zwJ~}(D_fQ)QKtJ6%TsE{Q3U%x*$rE?AfJS5yiIE_(u;E(pS->6MyU=?v*z+Vbf>Ou
z0t>XMjPQgD`Woj>kKyozCkwFpxbe02ZP}SUAeJ((wFJX!S8k3V1T|Sds`5+0{Y^0R
zj~Vb3@U3&d(LlJo`d(~n4i_Q%!r(j$Vk_IwDCV-JpevWlSk1B%H3grSMTh3r)o_g6
zQB!bYHpgf<d~h<4X`(BJqD7{=EE0TbKkHYkCkIE(DCiWo3hfCe7SZ$I=AD8`R<WT|
zPfdG#YD|gcv=6k@Dt?8@9MmasDnXx=@<Q3g@m{Qy6pU$6V!&FaSN-Na(pwmv4ctj1
z^IhKh@pW+EuhM*cM)waL)P0JPFKJ47=N+zWqwpa9JIZw7(LOM{DW$Cqz#CoBWTS_K
z>Ba0{a>P)@RLrPMf<zPMyr+d~@$cs+PC7aks%e5oL=<S%==T0tndPCcKv|tOnj&`|
zmOVmxsOB9V)WOP51S5mwiHLrn!XTd+hn!0T8xAMSmpC}Z!d^Jm?&=RHv8sYUk!mhl
z!amD@XuPA3EBGmfzzeK}G7+Bt5<5z}>i=)S#PmF`yDC!%gm&W|nT?6BSw#^REMqoF
zFSHGbi#(9%F4`DGVvg`C1D;V5dr5#&WoI`DktK&T`@|D^Ol43niM=EMX;nwv39Ib+
zW?2Arp_<c!??Jmh@Gk~Z4*bz|5^86r*_=AiB7%IYW4HQ~ed^kQ7Mjm(K|M$I=yOnw
zE5!6qkKF6>ms3K9oKdszzEMdY8Xs1xzt`A1;Q7kl!yK8`gHOG0PE)D;r|$o5Tpyf6
z*w<0=n0o$Oba~kXHaEmb%2)~~E*B3nS-J;kg@H&Bhs2<^`HI!JaWd4%2u{hCBbU@j
zhAr}K7iS;uUX8M*=n0hVCv2id*@*)vTl(ub$_`1OEN3DMYp-0y@%fiA#y5CM4|@;^
zZ?XCX+DYQV3TrU7Z*d2i9vkiBfGKFZyiKF6KG#6FO@}jrwk-*?-F##a+7=ZJ9s>hI
zQJk`X7ifmO%XW@q*RsexNfI2&*nrn8QT8AjxIwU=4cX!XbedeB85JoJAC^*O7X>PI
zB-jGIvMDWPxFU{`0}DAZD(WMEIm|+z*hGjmb0N<LbFh#naY&P0FXRT;cZ>=yv)LHM
z6nv2^=nTRGsK+z)49M`y$rav#Wv(XMw_fs39+W|r&0F@yts;x6Ug8PNK$at=UL=ud
zl|PbuSniIZA~}&wNEBWfFRbl$H5&q(tbvYP;oZjEULd{bV;5Q3lp62F1HYnKZP9;o
zQ>yMo6Xb|^TCu=&GH3++5}Ff-vgcisFbVWvTX3e&S5gWn+3G5KXq`WTmzS#bFiFdD
zyNlHtc_2Laot=rPed(|{wWi`^^o>%rP%<TM9gGKLw@Yo$WsPX>PT#0y=~M0cJeqy(
z@lm7{{`6J0db>xx0SO+^)c@TIkVW4^b&P0H^O}@<O*)E@`*(d^BfpulgEjJBk<#Wy
z0e;OF$>3$UAPY<msUhOiIz<Z#10zL#^NNc~`SF-P(gbe~{i82ecMtQ7w0jWaq}!Xl
z^#M1W-#i~;7pxMH+!D~-x(JG|1p88vUwqwH!g-8OLL>u7&q)2xNXySigU^_at1H-Y
zLUpbNfA*?&x%2<Gk}+w=baoFBl4=%w!WEbZLEe*_G6UD*7fm{Lf$rYL@;5jyni1+B
z8o=$08}~2$85_S9>L0V|$`W-#6IBOnjO*3p-wPszH*n^L70RLdHWona+7dM!AZ3q7
zt?vQO+ZG$``^%u2Es=X&SM2}*LSuyPJYeG@HWY1a*K$hKF8CyLXN#?|;A7y#wBiOn
zW*FM-i%gnUM&G}iTpads0gbSsrr=}T7yYZ;AU~4Ta#DaDDj}8~7>eK<gn)w!4un=Z
z_!PWemb6$k7wl2O&u_9lLK$-L?Si|9WysvvU3WV(^#km?cf8H`+z}Iz`t+!2$YCrv
z9LB323{W<wiz!~Q;bU9y4r;huz4jXt?_p=%ZE0d3EJGUUx{aYWHsB-b6B}w4c6BGi
zP}Wc~DA!qFXA0O04xlhWr9)LYl^P57pfizMr!K)_xPd{DY9>lG{4TgZzHJm0m4gtk
zYE_+bj-7-P#$82V-m5~Fcv^#yv-#=gv9aN3Hh;>t=oNCnk~>=g9^L!2q^y^}>i%^?
zx!9%y1c)u@BXI1Ldhvce;F?>DH?=g=s4t(gO}rfBB0V)FvF~CJjTaFxDpURpmp|N0
zk(1(LF&Q2yt3u@I=t6DTfnUN3paWMXYN04nV`S?tTfp7ZDw@fgBb9t7ua-f-XDZg*
zpKg96nkco(bLCMNgCD7suF_6gZ1gJjoo6ZtU6xzd0N;f>Gm2KNJJ7=sWhX`ZwjB-S
z?vZn|9sHe@j~tZW(LVjVxc76nr@h?0X3wSN?zie}<?fO*JiKF{DhJ$9UDDKk8v5K_
zHnaMkMY`an`oUgT?w)pabw!EYv-L9$J2`tp9iE{(D^F9Z!W}w9t0FhIZQX=;x!nE3
zo#pN?>!lgjN%zN;9XafA+NbUJNj!KVO*WBj@l=8C+@>c~Z(c5W%P!Rq()7}+tDpL=
zfKxJ6`tiAYX&0s6p}zgpw|^4#HBjG3r`gKwN2TXa>ALBT?iSo;UF8dYU3W&cJV?!N
z)vcC?#czG?zFkrC8ES1IYd!z|!oS0$@8S0&(i?f+OP(I;ClD&l*4s(i&%Z{J&X?v%
zd{+_=kpE-yHt|fIw|`#l&WKGF+?pkS+@bTF2t_`S=gYcou-WX}wmy~5$nLr99vFW^
z_f(!S$M%nK&M8h+w;!O5sb(9CTLD?pww1d}_ibHC$#VDheKhQeT0o!Tt90N!{vBuf
zM(=r0cm3$+?#miTJ3-p8cAd7gv)p~p$H#&8_|{D*&gATI#*QWd#AWh>0NefVzXw`7
za->b6qZO6)6=WiJJIztm((|Y5j+Y&z$@p`O=LUP7`9DoP-bGXVUUQF`cQ=E-mu7d;
zY}rA25!;HNcBz%r?Puu8Qr+LpI{OcIkZW;vI)9s(@)MU)a>rb%n^nPg^8T&dUDnF)
zTMRQ8Q`SY!c7AzY+RrbDU&gYyr$?HjihH8+aFTx?N-35RKg{pa?ffI-DArFK|DYGL
zn)GasJb$GIW@9t`2Fk^61Ipg4a`(m^vJ$#BxkK+UX+!Hny*78%DNs&^F5(0Sd)}+u
zCJToGC$9#N_rH3Q&#V;Yan0V0a`zeP`s`4-`#8TRse3J$eQ=wx6HlTPt2|@kjD(HW
z>t$AqhTPSUu<#PlF+8tIqh_s(hnc{x*-Lv;`^fX_H1q?t>zZCoirJZ2=oRO*&>7F_
z<t*Z%QtSEoI=@LfIxgf!PU3n^R_>6$8zCKQ4rcMtYcz`<z@}Mx5FT6&RPKk5$kL<#
z5C4^ij^(6j62VN@z0x&Dz}#MEr^d5L6!Wp23O}Ic15$H4H3Swh)E41d?6i6{h=83-
zK>h*k+H}3c)^R(631g4AXpL>6`ry+N(75sgS#HwWmGwu5O{w21T^YKEv1Em<=>nFK
z!-V$myExnNxqJD}t>Y=taTop41!T^vpCzgFxFC!*c%?gl{V>zX1RR8#%d{c%<1fAd
z_zSgo$8PQwq0=CZC=CouaPUrQGEwiJOs=5LITNc<Brqjj1Efmp^a5ufwaqEG(9q_5
zMSi{^i@RzPvu1WBPU+&s-BscqpKq*`W2}VjTaSZvnpI9sj1Ke0z^&OQ6S&VD=b_v5
z<m-h|!6Ac;!=5*X)7j21^S)y%yZ~Fr80zM$#xN>_$btm8>Yy?cB|Z?!*mZ-us)OwM
z`OTocRh>KN?^%OhKWI3YFx=bhX6?E+l_#j`&7pglcX!nj)F-3EYJ6+E-6GXD5c~B!
zJq~B3t+A8V=6pehk73xyFl^Jq5G@mc2Vm7$W;724i$*#Hfwqpbnwc&cx1P`2z}i_i
zel=cfZR;|iM`zO@I>_}|r+LB*i*Z1FE-cP=g|=n#gX2_JI3ruF44~#UH`@aXse!(1
zoW_!Lu-VK6O-r~Swr{Gex3S<W|5hPjd{9yPrffdZ3(>Ufi@E>(1fw6%XXU8eR>7u@
ziaGz$)w5{6@p<KO*$W`B|KDjpmCB}ifDxK%QTv_1N3}ig)t^ZXZA&(`h1#?1;8bbs
z71<;p9ldN2YzP_r{Xf1Tu;@=SgFS3AKimfzv4&6X1VWAoOWEfazs)aHs<fML$N2UE
zTOE6kM|#oB_jiD=$G(D8N!iA~hETt4)57HfEdO?sBF78%D5>wQIuqHpa_zJZ2UX%#
zYU^0u^@>U6?Q0l8ZMqhz@gLOG_|@Q=Ug7O)H3@3A=*6hF**f|z8*E9vhM=QLY7p4K
zOniEgx!GK?&OQ8g+{tH2lovp$>sYK4?m0RatoV3fEq&wh=E2E5u^2dNt5}^?xx+-I
zAIizG>#}bGQ&WYv4%p3eQ{~?TcWI&Cp1UnUovLvZ8SA*2Kbsq?h1u4h_G$3jtvgyz
zL?=X^&897z^%MVo)u*k0JF-LN2vt)@>btAO@Rz{iqBPjOEkBst`c>MeqFvsxn`NX5
z$v3nvka5+gFxmpi-G8O-qtT~2qI~T56{N7OrLE=AWnGMi2|#i~>!;*7_LH{PS5os&
z%m!u$_qCpAuyRO&GZbh@+Yu~oXeIoT6yfD}<mvbiX?8b&OU)z>Z#@n>GnisR6|ci=
zQa*gjhmO|v=tpfW9XC>zA93ck^jr{<g6=q^XI16sNY|y}A59?b0^IN8X$`G)tw#@C
zHhhZRbENg$o;}9LzJb<iACnPn-O+M1k=A;&wM(k#YiUJk^Jl?vt#yZoT|i}$MunsW
zhP}c_+qhKmU$plXK(a+oVB8TfPVv{pmB;-1lQx3qybG5JJ%qM$S6fPGdqCnvI6K7s
zal<=_|0?bu?hKA7H=ev5a4L2uSA5d{;tf$p`D-_fDi1%oTwwgI{C#bs0P<1zF$C=~
zt8eBQ*nUzQk-qFXy65zs`r7(z_d()1R~~iHy78X9CDh>YEh;jGnm6ULTbIVB{2yqv
zb%)t%>qizaB>Yx`@zI{I_Pka57GTu24}xjWu|3Dqw*NE8lv^-<M|@G-1fIm7&2`eC
zK9w<7f_Ch8o6X-Uy%rkUT6kw$iWj*f+ji)6c)hVhzm>n;)d)#r`M5#Wi_m6asqL`y
zhYW5*6z1bQ18tk_eN*`%R{3bE^>Cy<-sI+Q%AeJ`<C~JtttN?Tbbk(A<^!IJ*M(Bp
zHd&1%rR`{l$ao00-@$itd8EOjXmhUR{m2d$gOG$l*!9jkav$H`F1}miTI}$tqeBwO
zC}4}8NdXoC=(;PM{bMPBq{&ybNd5GOg1_l#WS3WNaBWHs*js<#+HqF(@5tIXd=ygB
z-r6OUs`ab3)&@?m4o<JE@6gUo<(vglTECy2(g1fAZbOP*JPn7Pn*rK<Hg0rGmBTGm
zw`)_t-j>`zN~kjp_I_+rcy4wIuSS~t+2*13M~Cw62&ZQsx->hqJxv(4Hoi6(bF*E8
z>cAB$2@U0yGqW|^muBCJqPQcwd={@0%h|gFqgl}UA^jE61XHjhW4AW6N={kB8QIjp
zUCXQ$9^Kc{0<%nbS0pOFMCuDpj#r$iD-NAGAFqxQLFv{8?aRPwq|Nzf27r-c#2Ce+
zhtK~F??Po>VddJ^G#wuH4hhjW+nj$oC*!m6jEt~t?avMm+b$V@Y^m5MxI=%&QD<4%
z^P7X;P9*LB0i+kZ5DW~;%Gz4R#vteLuojBLP+HQfO{a90Ug7_gl}QFsvyTpes}yy#
zwcyw%t}IVIoS?flwH{>_yJC3@GJ;-ls2vQps+PTCTjjjp-PQ`mY6CCrSxnNU+1a3@
zyIQWMvWz?S@{m^$FMrKI`Jqyt48JAA*=2vG%UV@qu|!2!Jq9lqj+SX3fgMGG#{^`y
zy9z-@tVLUV;kZ5Xf$s{Th~7?AfMA)n6)z^U$y9rZsnTW3%3Ags&8CsqsDX}%|JN+G
zvI$mo_q!!!xb)M*ekr5Wis?vZTV{gIEX=}dw!<~8UpEb<_})tbD`(~KzIODi%jIX$
ztSk8m+&n8+e&(VF6TNuW<L~l3Vb-sZ)UEw=){F9U$t?91iBo3j@MPHkrib9h4RViw
z;9~S#*m27m@Qe1bMhGO3x%-Ms-jE`Az>ax$2U2R^!)t%?i%G9&pqkfR6j&HKeM#V^
z%F`OE8I`9sSb3GFHC$I#o)*BO6Dv<^pe9$I)=;4=s=*pTox{Al0z**Qto&dTBaJV5
zk*oIXnNpCA=1<}UrvihZ#k731189+5#QE{F#Feov_(K@>Xat?7eo>TQYX4^;J{+lg
z6L}Y))*bi&`&a+ioV~ZXw_KeTDSVS~#OqQbg<0+`UG6P;k$F176`4mu9pbbmbP&oB
zV&ay!EAS2s+7<3CjmvZDX<L+Fv`Y$DN<#AD&~$o`lxVrJdTbn5bge~@YN~^cQ)vUR
zeObVPRAAG}-snS?#>4U50E9<wb#F<}jm!q1ZFm8j4L~B_JMG>w{H#QQvL0=Cac+HG
zxwkja9L;rav1=6}b-ABY;(}8Y#f@L&w&Wt88c!13Ai5V>s|(S!-oRhnTMm+xvuA~f
zZp^qMaorybsad{F&P)Ut759i-xXC$zXF1h0IkR}`I>CTDvw2#1fKAa-RYPb*IG!%`
zqp^%a!KqcY3P>~V2Bxdnl^ox<BmeKy^8Z9baVk-C$J5iPyhOY_^cne{yn9^h-NFM`
zneflClf<?R7oS9NN)Q&LHr@i)S|@UjWep%vi!~kE`8<kv6PN&Fm%3;v+L(vLA^h_6
z@N$^X;!nhud#F5bVlay=dCSv-Bk*g!OTEpsBIc{E<hxPms>zJ*F6KWZ{z%?3)L*q`
z2ZF%hn7Gd2>4lI^b@6xTtu49$g_3mdy!5r{K4Z7qs4ELzTU;DlmyT1ncr8ErdMz*N
zT0Z12wWQ1s&jZK-T&J5@o`^fL4D}{?%;*GvATVjiYs?3-49vJn!<j^%PQid4tt%uV
z%i1|b{;$Y_zH&q(m)ua~t6A2s)<Lqd6do=;5JlbM;v!WmRiLqipZH!}=q+hkgb#yh
z96p&WQT7mFXmyPY2m+->M;OUT3gw?eeuCr$Exu)aIZZ~7v4`^YXOcs8_8YO=^X|gJ
zb$oZvyHmOdj?!f8H$Z1Gf+gg&M7JRN&K#68?X7qRypd+S?*`j2o29bcLnxO7`xdFc
z{tLqaV4_kv3I!tS*JeaCY-)I;!nmO~;&=#u4#?h{P*|3zLAM$2<{Xq5I|!A<tL%-s
z)#Mv>t4q3ghqQERLp_yKZx>5oHDbA5A9O3AwMS7nJ{3-<FAn<xRNryV+Dp~J-!Kzm
zwlm#0S*)H8GxO-n7zcB<(H#Az+j&b4kKfU=cS<uZD)5DNB6h91k9>3Rt6SzhLZDs-
zE!bPC?vTQ$0Gr4xI99BN-I$OXL5d?qN!Cz_mJ&9_O|yIUgctOAo7cMh=}TA0A}B5)
zYKpy8<oxHO>7ZSQqC1A9IK8+;&0H4m6dmr%c|YQ~o|Q=W;3<g@*BZ+*jJK7C;{iG+
z=vLNAbk(LB>I(Lu`$G&VI@=SP<8YL!7f42gy!^K4gQ9{X`VqIzj)Pp;`8X&updJ9>
z#r#R4n!3V|J<F{c%0C6K2Ui5nn|XU+)XeJwZhY2XbhpOGX7BFchlb9EZeI1T$v*Qs
zLe9)f5^3KeabaGnP!JOB+m3g^*IJz?_Yl>kQC-T+>uMW<$uA`3>_(qycKFFv)X;;A
z*YERNGQKYS<UKr0sSiIH;5S@dBY&T~m%lYnuII1%-_(gxj1)tyu%%d2sz~HFyvy#y
z>=dy>RZA_!Y@D5JMPMeDN;ra+&Ix=sn(!Gd9TQ|lRZBXu&Ky_$>Ev*vins8SkLbUf
z_1{PJ-^caepYpfn$*1_MQcX}~41h=q@Y5ncDobmnd#wGkS}LfRad~h=?ffJJke5`P
zzC7rhu{1f5Wdap@N%~ppQ_u4w>$|#w2XOrM8M>)Jdh8{sLmkB7O<AN`dW(X{=q`FE
zL~sGyl+_Ilz9I1oa<<j?CNnEnulmvWWWw6`9fVY=^{Kzyp^+^*!K!<tRrdqbZRm!}
zj20?aR9^AA3_7N|03buEN(2DRPqYVv+th?V57Ie-m4e1UJIbt4)KqY4s~k`AeAt((
z{1?T^1|3Se@oT$^-oEsnghkQ`mA#0<8}J?BLQg{dm^Yy-b%>_R(`}7~85k1t7Zb+t
z#&kU2Z_|#^j1#5CMpxcO+(n?wzZ!2#!3+JEhN>4tn-+s(^<*{Ga%GpQBqm6xj!5gS
z=-!;`>to54j2~*fPF8F5nqs`8O}L>r_AOPICL=`&%u>^dX^X{E`YRE~;}Wf;5Cv}x
zQVOY-m4=?5xvehiICYwaw8Jf^F!a#P`clU^R<M~p4{c@xklk$RS-aUye3yxQD88G~
zz2%<h{X%Wxn^AJN48>Vn+J*CJU6t_nYg<~6Pb1LRwzNNg@wHmov56>C9<!GCmX>hp
zSlM~$+2n$|WTXpRSS1oCIh;PFu`oCyzR_-$`k00#LRkttq34bX4uvBJ_zCL;5{?|!
z&!UdfSgqu<dX>MdAMwq`kL2Y?+Cjsd^=ed0EvyYwNAH<eO~fNIOTK8WxSDt`ki$#g
zOj_3p5R7{k;~CdC&^N*h$(M-CGIkbOnKvStyebO7MQq9v>^4-F=_`s|)6RiO9TBxL
zTm|UQ^3f?_pXKv0`TVAQ2Aj5L;Q^JxHtqj(G)ac7a)u6XD?m*m_GcNjd*p-5xN$yy
z1kAPwtZShT;9vGE<UKG=RAeTE)G$1TA^ZoU2}Rn;eU2Yx{v0!Z+VxNTJjc=lBkSA@
z(^Lg;C}&_v-ya;=<dj#yMp>|r$%<YY>iz2M<X%Z0O>`@?H49D+6hL+JYYR4h3=|Dq
zLe0p?<;Egw@Uf!yw)Drs4*+ra0dad8er*D{qsKP#KssU1-jor^`Lfn=Eur1StHu`*
zL&kHfjBl+YuO?}>sBV8TaH6X0%)}ycV7D@(6;*C@2yrn3ZAYqAFKB{`tk~$q8W$0Z
z(%IZYZ%VaBLrs-aR8I1}O{-7URv#yGBqDzst0g%rI?4TVQ4-rxbeOkk&9Fu@cNXTI
zYd_<DQJchhq^+3hap@xs5j#N2q3cnsYSAOJK7pR4iEpK`m!<2)>elxJYx60>SyFNi
z<XI(Z9PxZt>3rD+S{;uRNHb!EKD^?Vl(C-LN1T0B9vv<2J#<o*BvD^9x%TavM^a=2
zrE}Y(*T?((cBJU%ksGr@y<^v<RopUstcM#4439Ho*A0slj<wfUxUwR%+bPfB443k=
zy}MVxozShE`|??I9ZLc+CQzbw%E3g{0uClzGQ;>zxM{w3wnID4EavvMDvMsJB@dFL
zH}p0pGiYq%R{K?bE?qnS<a0(Zr=C-xi)`w@Wp;=ki>l7~YBPsqQ`N~hS*nh2V!<S=
z8Y-|y3_8`vk5egZEy7W|>oaebXzQNJdv!SF03pift5>8{lkCfwTk(;T(){`S#sdNU
zG9C!%XAyA*(TRqb-$~4Ej+iKn$=Oj9rOo&SMECkRySOy%uEI`-mNN|7GiX0}I&S9`
zeYq^5JpaC}KPDHUV{BSxaMp(<*mGcb-nv`3J+GV3_4Hq&1b$ZEodI-mV_G*~vM)>b
z<_0d}s}&GCCFri~Hv?j$nZ8j7Ms8SV?TV$uiI`kwqrb)FE%n_h^)+CfRRjnP>br6%
zt(es*D?d21$th7_rMf1kP^!%b<w;0d&AULI#tCti<N%BPU#Sf68QR+Dl+sCrrPbfm
zMR@)5sgd-y%u?gS)yCOtQS9?v>OK*6i)tq>xfuOiqFTr)|5)DRkGG&ORdo`uXNT&h
zlQgS~=hYuqekp7Zca^Y-+*=3;Ir@~fbVUTH<9!gb=R%3z^@gk@Tu7CNH%<s|M3XDB
zQD{ktIz+1-A}0}BBz(o1i$4(5Bq>su$@wAw0GfNC>2l&Ys${dO;MR%_$0>6>Fxfnh
zjdQ=e*Zs09nj$O3G26RyZ8xS75~B3|Na46w`vIuJg;x>iRgXC0TX2TmJQjXP;0kSb
z%<Cv;gz{zyk#$$UKyK0I`vbp&0NJu%19Er4F&yW%M=G9YTrj?%5u-V9P3>%mOd!Yo
z@(3YA=OJ&VS8GPqKD?Q1uDN5zVwgTV$-8ImM-ZfnJX>&=QE+S?DvDGQiaA!lQcMqt
zm?oI7e#Z#}uuS;Sha)hXKP9sHr&I-BGdZ#d7xPJxo03DHB?Uk05Y||U%8@SB4LHxA
z^T)FYfCsf)tzr7zA;Jjau3pevyC9?Lmg!@I<8$}rp?5o+eM6fq+=Fu}m>%0WXxVf3
z>GR%lvBpZU5e5!?9MOcHuxmZa2!epi8aPDYhV>a6s%J2g<k7(+7^!zTSV*P0vGTm@
z2+3{ijNmLECqJ-&FhcwyXBUxYGQN!<m+!%&%Of`?W5K73Nsy}8Xcx7Kze1K=S&0&L
zLoP-}OKHxLy<d`{R6W%xKxCV@t8e+#<_$u`gn~^J^<A!JrNt%q9=})T<0OVhqW5#5
z!rbZA%m-K{^!t6P7nj88w1(wk!+_zLX>%AD?{ClDx3s6*Ti{vaR!>|nWG|h0<HU5M
zY^kLvNDnPmcXQFj>zJq(yMIsUm|``(NiQ-{pdRh*Uo#@7huDlI#Bo)(?$yY(g4S@$
zf{#zyuC9B=#mI@j)6i6Tvc(6HzCx?;lN>0588DIRh8u5NN|*aVLwE-+FQ$se_!GF?
z+Y`7j)Yuo=2s3Du&OHo^>_q;u&~eV{#E1;GT?Mb}g`|P4Tlz~>;J`%A=AuL`<pz{H
zDd!Ekg2z_iFO`FhL?<+wbDilxin{9lW{$&vZq7Q2x{_|qrsa86oO{P}@8X~>C;#DK
z(||8w9KTxg4+8jS`194%s~EyAI7~r_u}&G|Wc239L$=|fD;}5)FEz{PDqi)J8=5k&
z-KW+)4@P{aHx`~0*)$`(;vEv3=IycB($X5|9Z0LV>#x1x74O!pc#ojjJKz?qC|1|p
zCxn};cY^iBFmMkDOf8Q5Oxh_m`q5Y&4nB$})=<+7@0Y>PiN1I*<yOe_;bgT!HkNC+
zTOp&dWr=Qx`nQ>EIYY#X>0jW^LG*9ubA#S^{HZGSDoV@N(*Lwr9HUg6SKwMdDer3S
z9zJ-b_Fx@$=r^u28C+)uX>X4P`=Y<mB|~-j&qxjPqOZv&ld8U;HH-FhoJ{z5sGDIo
zjh7+ZF8UE4Xp5hB@Api%4Qu`vwj)RIQ&9h9igs83q&S9zHxgQ(goWaqQnlqa_UaAk
zB2T^`bR4x9iGNAR%%mWZqfbR$rT#CX_ELX0!RuxDI&=k`Q^HgL=Pf!$m3n0b4H3$h
z$73i<$nT)>|9fDkYq0$jR;`rLZra)(qq}cRr@I_m!pn|9;WzY!Hyo&pRZ#baxt7ZU
zoT@N_-&W6X21<-5OT;O|mT$aY|6xk8w)NqfERIo4oBqc9X-U)>-^TSluR%RdqYaT7
zL5uK$c7im{SQ-u<_MQl=>@LI`#W=`_46eKcMhH#e1qY#Ivv)=RnuB$B;}iZFWj&|s
zKS_yPooc*`9~AA06*sJwBb3Iuu4zeerzp3(GL0i0Vx}{%;{yH~%Vdg2N}tVzVxF$6
zyYIcrnm>+UM!(EoEamPN>eLt{P7;y=b3^Oxn61uIr^?vzn7=8xbva#wC(tJo=#vTb
z4NRb}A#@8xS+8T%6M2c*dw@rC_6BGO?6uJ8e*AJQH$STHCGtn-RPVU=BJVI6_cfDX
zvLDr+d8Oyt4MVr|911<xh25)~XqCS>QC^L^oc4qtZ4w!?rC};Hks~^T7P74tCVagG
z_scX9YDbA$?c*$FAz=fWA^OVZfn;sA2vEorf|R<et3f8%ggPd6l_4)nOtHw1bQR*1
zLsd}4E6mTP=noQN5&ziRa`wV>{U*W4*vK5@5Cwe*BIa0<kp{L!Hh3&xp*=1Ni-d&B
zMYAO!iH?%3S7ZQkev`W~+plI->e0a6GTQ_OQX4qEA*R9>RRZmdQytezM>Ul1U1~wu
zAxAcdJuSU2_CgCf)pbc=S3y_aE5h;!euv9K&JmDbbdB6wGIIT6S43_E<R&1#(Gs1U
zA$pNc)cufDk)3QqcEZ6cP#^-7e36B`8O;+*MuaFn^{G$l<J2ziDL&Q4JN=+&=m(x8
zBq|6|0%=lIi&2{R;NB9;>8&6vmz+sD<ED*Gpj?7tTa#51oUg@*=c!ZN@~uvPloOwt
z>$R7Z58se^$_si3r}meDY;TYaQ`2$Fmvyw2h%4KHu})zOfHA%|!8H>JtGnvwq{}%)
z2Cz$=#y*T)TGtNv!?`Z7QR6Yu<K4A(r26haQ^hnDUC8MxE}n81!Q;G(Ryp|Mz$rK9
zOB?}AG9^xjaWBA=(dB;Gj<o47I+D3(j*M17b}0u~vNxye+&e#H0A?~q3^GP+P)`ZT
ze3YXjmSw{8SNpDs3p=)7qI+Hz8m?W02MEPH!4??OQ;@NVlV<R*@CFJ{UO2`nOUn%h
ztkg@yd|2JZ6$iaSv5ZNOOWB|p1Uq#aP3pU}+d#wk2^X{Cz*IhsHHI7YkXwj=rhS?M
zRNUbr{@%CL7pD^hu1I!+CE_wlpMs_l7v_xYOf{1%8ad;3*EDxz1SfkVnBCK8%g4{$
zRAgJMJfB*#gfp4&>CSM_#^J$K{drF1E?YkDjrw(#JO>J9;n)jL2)yw#mA7PDAcr@8
zvUzi$9?P4<7CgT(H7S}ov@81Nt4Z7&jm9bUm@}m|ref_;GYJT6sUSxM4R#l#=ew)d
z>ZUzg8Irmw+l;r3lT>HR54h#0B5<X5n;All>ne~|%_BPsWNU|qdL3(T3-vnP)mM{*
zcuri|9H0zQ?al59A-H1;G*MWd8;3*|#>6&c$_eo!e-m4-=%FnQ_1aAtQ|0N;UVGCP
zoCo+F5ve8_=@~Wr>z}0t&(LjwjW91IWf>`^n{3=5q^n=%f*`gIxhH|m^&OKsR<nfM
zTk2=^$DkF%)I(%2S6g)7tQfbi;CQ&8M5}eFk%OuVyd+~Z+G?ctwSh(gKLL}A+;5~B
zCz&?kp^e~AaEw105+oHaj}G_Sd6ph5C+}3FF{gohf1jO;D9t?keLV_v++B4Gz}Z_c
z^&$$fMI?kPTdZ8u;t~}s4u=+Ga}d{V7a*vnGZtbxWO8PS?=J<etxP2j!?k;4tu`>3
zE5!M;<gOPOX*wbG&Jq=y;3RB)Qt-Bwteqauvau!vZ6F<ivEFTgvFf`V_$-Q4e37+{
z;W>GqHWae%Jdg|nODSZ5?RKqLTY(X~xagcGLxK$+PBzupfr`@1ilUc@22WjdN>78v
zy~pZtMa)_Jf@a)(Xv^v*;X>p?oSTZdpR4m3p)wfaFj@$klv5wLo`2Wy?^6C{hg3ez
z{E=g%1@AK#YIvjLuruB0zzi))KoK1;J&M~2s?Dtnm1ht*DZQ!CQ$b5rhwigi4EMY#
z0_y7bv2<$C%WjmGIJXz+B^kUwZ$n>zY!#YSTiqHM{d5-luV^b|RMp*^N?i;y?uYXO
zBP$nX@aU*q=#WJkTA1#jN)KaeAF|NHV-}C8W~SushOEF4^Vt<m7w5j#7dA`llpl|y
z*n@_(6%|>ZqYOOfKwY3U5SUVnzSMGLcz%BHfvURu*7=jg_aWlHS6LB+3ov%GaHhN+
zIxWHNf554%az+S10}Is}USRRhOPHHs#9gAcAXU+eHF#b*QulE|q<AH2>>^G1Wz{xm
z&|s8sn24{yz#kKMZ0+=%qf10jtUyGqCL4@E25Q>JFn@%zBAmZ}<#3{#!a8tQEIR4z
z5FTCDF~SS9Lc7iVg8&>|YAQ=f?n8;qRYb<<w+#3vQNMvaV^eIclThbey$eo=6#UuD
z=2JPGwHcboh69|DQ_6^byepO$Y!8lA^RD1a7PL5>o6!PZpe*k}yjAuoo|mPE?Oe^y
zQ(0!VaIU(TrzTq_fJWgEx+1{?A>yIpIjyOnQ*Pln^$vr{8TBd^+^MHEVR2&N*D2$0
z@;Q~(CzA!kABnam!m##(cjIfrsK=4fw%|401sO?!E2xJum|}1`ppo!`7OFD(tV-Vc
za-b3^pJNRD`tj1-zI5CqpYn28E$bLdb=(|Z;2yvwWS%K;F}h0B1o?bcB_Q0OO>p!(
zQUvvYgKWYoo7_#dVRW|xc?kZnl7p$W1qageqiN80o`T8guF_a;O#yj7kHzrqi7vv>
zik*0w#T8uQq+PS*fYnOPV%M~@nr9S}<9DCAu8VDf^YLKtzKorA<>2OR30zfBqvH}5
zW~89Mv7lclXogHlXQm#lSS|xTx0gbrM7<yzQf*%pZLBTmH+G8uyAN)-dtcmDRL$HG
z7YhW|Az&}*y8n7EJy*>gaanfKbpCc1#O4Pl0iKIP!#9okEv{)<xW+;c&Q@pc#^#}2
z&+8^kyJLDVtqEq4pwAd=0qVgMd<>k{zFUa(7Q8Ah8C!cPso&J5KB(lXdl~Dpj?qlX
zpq?ZyG~vZAx$+J=sB$|JW}ujdM#og#m&Bte_TdO*#_VKBHkuBmfE3+OoN;A9G0k(R
zPu=+)w%<K0Dsg^^yX!u25{NpQ6FD4Tv=bzIIZI)HTZglK*b(~Nlx|=d^HWAhT-3nc
zI22e_3Nu{^Bb0U^8@(`JlLp#|1#ZV35BGpxtDPKz7_QB&><|ikvv~XKtygI*7k0m4
zwifj5wGYwC9k#>rJluXp?g7!H;NvXnoS<uOf7lx>%jKd)#%NU5{|vQ&ld$PYifdhT
zR_>wbFfeAOm@_BMvG>o>AT}_%0wP|#)XIhQ0K~%kS1foy4NH_a5+0)(tk_{iDuufR
z`!#f_kN&yDjmE_!nN%@FjE9NVC1aQ%b>_`(82jR6&txC`DQ=4TJ}3NBPfc3bg`IL#
z^<d}-NRFDc=;7j$o_ZSyj|Zmi7wZb6xxCtV9fRo~qq5q?@V(D8&Gsk1*pBN^zP87L
zxiY98+qxXT{l%{3aF}ZA>pN1iZ%D7Gah#{wytJ40c1_yk8I$jI;HGy)6yogB?&ix9
zihA?_QW{$6uqiu-_{2zBgn3y9=L1u;P0p@Ze!4M#Jt}+lu2_;$Qw1_4UMdE^h?%(c
zr360o{AtT8@9WiZBZn9xKnltyhweKi_pu^ehMDj69$^8!8+$>JOf7^$3^4OdCWY~k
zNR*h6@6Vc#QFh=?qi{WM%ZW-GEHfU`@F41!SDeWF>`q{RSxP9y<rQl7P=#4Mo@4z$
zjt$t{m6gTTu2**rB;L-W6w}?Q3lvDj`Nl(=spT?`lyG6MBZu+OqddP^!JnKapSnmV
zJ#M{?)wM|lYB-PJUF>DuKZ#aS=1*A~`PoxEaWjf+oL0HX9HjFN{A9ybp*goty?Y1!
z$W^=f0T`l9Z(`ua81u9~kmO1AsXxj``PSeFHHiqB3WG0{sQ;4mbI1o118TjH!2k{i
zKas0dz5oayDyXd0G6z%{0+TEIb<VNILy~DTThQ<lwP_NnfNGY8D1NDhFb%Gm<ruGd
z{@FE~gl0`wjCcldY#K5cn|P_9Efaxw8Nj9?e-E3|&cUX%(An5@D?JlzLV{N(_t<xS
z0r&jQV>UH|vr6RNTa00Q_S-$xI^a3{qiea~&O(*snF$mV#e&#1*|405lnz`>0$vsq
z7ggaxLUP7L(}jELP+O#oi0FPt8x87Bj=tszQF!CHWFb1NrnJ`>Graw9qZ^}_m2i;x
zPxeU>JA78E-j)4%Q@X7z_(5gNh43-(Ua2}I-=lkFGl<_VmJkGWAIHX<Xu{Mw^o|D|
z8$13Bkc3mQR$Oy7CNq*7C0sJ6?0ht(*9}qUNr?-h?-;=h0D7Z1a%+;&AnG)Y$<xU^
zrgl=*p@4l}H2KBpHJSN0RqxpJDOtFe!W<h@al<w1M?~$7w(0Y0T@|PE0$=pk*SIRK
zyE5pE6*{65jJG5I7T1o;*@a%AuXvHldC?SC<kk(+GP#4X8xSqBYoi1uJ3lrK)sONJ
zss28HaR+rX6jncnh_g6zQV^Sq0AFm;jChtJvXq&rNm@xk2HT&tqPlz2(DelNS>yCy
zwp6Y!MnpI9nA9H@m7*e~2V$d)QEq+kLSvWFASXCC#@4VKG(4-avyn^%CkUBb)N%hv
zIl8!f>Q{2iWt|Q)t8AL>fMjvm!Y%O~<k1h;#~&__KTPBS%8YY;)>`Pf_0o;}Fs`ze
zxkRJ?u^JMLmmZP7yTa8~{ML757}%O}j|?@l*mDo%?wccu{G3ERC_EUiOA)EhZL{}=
zUw@XjQJ>QX3g7`dT>T0O%J??AF51Wcf5=FcsrO(Op_&<aoUe?N>?W~I0rndDP(fUw
zx^T68G9HuSv{EhgR(BH?8|-vH))0Q_YC+TIZU--IbHYzv%3I}`T&`E{2M@EOho0Mv
ze9_ia{iyr^X;bwhJaJAJH_uhwj1>VKs)k7}Z`CkeYjr!R#1IdiMo1KSaJQV8cO$#m
z$F$cUcjh#kodLF&{sc7n;mBrw)D4U2$|D+r`Jv}z=xpxScZ92-=LxM$4SB!`BFYMg
zWaQ>BO26S-__3ezH*{tVGOO36n`<3^AkS4hNOC{?DUenXQ2isB)HADB5Am<Q)huD`
z3`d^QCE*pwW?;N7;257HoqJ3=63O@@sug#6Pp)wouykZBUmycsW4sM(oW_lPk~T%d
z75baQ(7iC8lq^%86rlGjBO>tZ|IpA44Q&WlMWo`J7FsQzj^Uz9_c;2Pp}S$|E*W}Y
zSkohoU6I$NNN(N9Uz^`vdxz1rIyzJoZ>wd_qPgM6^lwgXozCG4>xnYIMyh3g(8`jk
zP)=<aq4%)Rb9z>Dci@|3c39^LM`U`#5y1!YTg6uLMzKfCVjb^;7?B4he9zyTR~ZE6
zRgg{HwdkAYRVH2LRfg)D=hd8@|H-^c37J<DBNFo};QYgRm5D!hUIi{auhI+SNy#$h
zNdbEByh=l7&8u$t?0MBdS@SB8{NJ0`sQavWt;=uHGbpPyjt(-hen-b-5FvEt8h6!5
zS*y?e!$tlX#lODDTV+96i#)Mh8v}OD1~N|O^hPvdhF{Xdw=3d!!JKNN%lq~kxACZ6
z3E{_NSfi<-=j7Lh+dP(*!x+QL+GkWtTIjf={%;fO+mnax37chZg3FRvHZK~w{!lD=
z%}@zqVJ?Q0@Jq57Ub_Z5W+HLUld=*eR+ZD}ssA`x3*X!Rz;5>8B=%F|?fvcHs%vBz
zI`#=EsM4!4(JvGt{%`balD+PmyY;7dx01f8TUY<%Zl!!vx6t#}bYU<aFsff$<IfKh
z6q;b@Z6kM|KdsDM#&D!-Zl&Fx6A%g+N><r=euY!LN;Zn#3)kBH7cO<boL>D4584Ya
zUtRr6evQ*6)vW&{xisRq(rn(G6RrR70+NVE0mRV66%S3-&r&SnsD3IH9VauVodfyw
z=g9fGP$xJ}c)?n?+IU^&3m;sggf#ydV8Ydc-W@*$;l)o@)vx8@b-lN_tA56dp)=&}
zz<X|s(bV(oOG4S~_2DZ0K#aXYV<$Ro$25;S{7AKYj+vFNNYs_&ez-|+M3*s|21YUb
zlF$rbmSSPuE>yE5T|kC~6NGO%c=)Z(b)1qV*blf8_$&eLXS~G0HC~sB{~6GFenmF$
zr$o_E?;7`mSJQ`YZuvMFy&BHQV=|WR|6R8_CGwaCU!NEv5qU<7G9?m`4B?2Z$trZZ
zjosnbg|Km6)|-X7qwyuh&=umNkyD0Dia;cqrlFaCv;`;P*suC;LOPy(sg92XAY{=>
zwvGd&vg&tDer#Y@7YAp*l-#G+1pMCS;CV*1d<;Ds(S`Hvjb>pp+0fL)a6D)pcY3n_
zXs`aMWZ!2?s?sH_;`?m*>~~U=x5+vTnE3P9BcuiYgS+h2H0iE-g|=ySM7%*UuhBV;
zZMpjrbqe^S_RWqq>oQf8F*ke@j6&}TceVJ8G_lh}7XjZw6i_5LO{2&QqDr>f(CaHl
zF9&n2xvPK1EEwi`V>E}u#m58v%n>MLRIjHdu5-&|hJV@}Z-p3T=Ojd`pW^F4n{T2I
z23n%}QyY3t3bGC8l_J4A2W9Q}F{>UW0YcaCU{1D7X_z;-INk9@)MPCpLqnvO(i!gw
z@k{NlS|%m+G7^Lg6@if9KM!79Gs)1?BD6(tN@$BrgqDK+6WStV{qNA0{$CH!7RmPa
zY0H79&ZaHyht2b#MPKx~HOE%A6~<7;r(;c=%sik;gM32X_d`u)<Yf?<k#m<OGx9J%
zW)dqlFHuMjP&2PkAITikJ6cC(q6w%^g<#lA^7U-$Bd7py@*(`XKmcmBr0Qvw!}_<V
zP1BjTWi{#y!25<K7ACyL>rzF6&PYYy0Ch(J6?t{}v&e>S_c1x)MD*r9m~6<F5hoiz
z<ypvvv}qpIOtPV2`2S5dgh2gI$%fw0glq`#nr!H!$3G?;lEtvdh78*vvLV`>|5LId
z<j>FtR}+juWJ3n#EV3aZ&D{1m_1p^Ca97n!dA)pc^j*<hO77}6HR;gHiB-E_a>YqU
ze2od0ORw;kGz`+5tZ*T`)(Y2{AS+xRjA|)3c!d)$MWZRmyJjIPTXLC*8@&@jR-7<N
z#R=MC^<jqDhpXyDJ%x*?MTsOUx))KmE-r6oCFd4D?a)JDy#A=nMvsM5FUdT@cv|mI
z%k9pM-DXtjOH|K?>=))E(9bhI_nr<O3+r2Yb+@4l=@l8c(X0n@zGj56&APQ&9lG$J
zbm%S%qW*{`c&tZ(9tW-&@EM5gp60IpF#{XZ2dv1tB$F;Srd}B~p=K&;`3~fw@3;fl
z^&SlDjK6*a_Swc6Y{ribf*GDuNrJ?#ai2wAqcaD=EHpkbin6<dNH5y;C`Qpc2o5oi
ze)FTl9Mb`>Ce?g5xg%jBq(`b`aO>_(GnozRlI_ieW1R1;UyZ%AU2}X)jt5(P)jNVw
zdIW@+zo9Y8Xp!55CJ|e0JO9hu^MUS~AcWPmw}bDSq!GoT0nCz44Z^H{HW5dXb*Ijm
zhO$vI4Q40&t`#}Ea`*M<D@4V%>D>11H5u1_N91}cbb1H}+97536W*7k$7o-Gpvd7X
zUJvkUgB=?f7Ux^tG6QZ5q8NOTH&n5gplh=#A9hnTebo&4aju$fGM|iyAZn2cida({
zs11q!Zq+o&bCgMv|J3&&*$G}Fsy*&1IWQT8>0akz;g`cG4lkq^Mxn>+TxzAPGgC6W
z&fBe&JI$0#uXCl9Qf#J7@H+3XQf8YeSzhNVE9D9^CEM%#zLj#mnKHxctgupsnkh5A
z&MGVAG<J-@lkaubSSg>FDRaHfN34{;nkn<W&dpXzgPC%R*ZHWG@&`$Yb4HQV2@f!L
zM@gxe2QL$UD0#+j7>nR}d4}+@G0{7X{OJu5BXnHNNx?5}T-VNo6kt$=R;^k|g)+|F
z!VAmqD3Lr4@+^`(z2w=@t7ckxh+|ozt`G>K`$MluJ8X|3HeOvKD^cQ<N=uX&iT>{`
zR8@e{$tfPnqT38zl)&0P|L9Vr@FH%y`)Tql=tE*v?;)wkpHV8wi%A~ZB@F*MT;7j~
z=bkl?oaytQ7f-&B<j{7XRbT=lf1f`y{&C1anJk|lYbLYd&!0-PknQsq#gh*WBv14C
z$LVC`AlpeEXyIa?e{B5Ae-9M6#OGfePyT-fl5>3iCGq6-1Id^A{3Y?^JI|{AGM~RR
z{^jO@0+;*zi{i;w4<ujV^B2dH&mTyhA%iSo7L`w>oK^iyAA>BTfJ^(%pC?8kKR(VR
z|8*dFZhV|ceq$hcetalN{w2u+gL6xKH2D(IUowU^1}-+1^%bjpp{nYmZ(DeASU(UG
zZ9fkjxjR;)6d{qbMn;E5=I^OEJ!IX`nzS2hlQ}Sb7QJAmH+a(coO@BNt7f>-Rkb5{
zGWwyhp-*GEKLZ^KBP8N5h-k2Hwy^=*4I)G8By5LK>xn<RM6<_ApB^rp9)G?%TzEAI
z8z!<65oz2;sEXR)fFsUx88?eyaH1*pNeYgRy{IK`V}U%jX1yB0uSl<Y!*kYizj#eb
zhIN*~(kV-C9<xcWQ%m@uSO;&SBsP>@=PlM+f6Gj9d7VBh<wY}Py4QKHmGZQia<$jF
z-b(qAqzq69bX}2R=hl@HSdImer^Q>4hlezoaHES@(D#}q4<d=ojm=|egg2a0i)Jtd
zEm#r|F~?}?SSN>IEo3yl)I*E}=$4zwg3$?8_o+;2R_qSk#VVa=EN=2UW>YGBJ?-bc
zA=C(sGZH8{Qc7CH<^B0muvi@RtNrra@d#P5p+m>S(8c`2H7%I`B>VEs4x_8c?*?x>
zg+5$O+R(1Z98|GA@w6-}ZMu(wk`Dw-CrzVfWX{z-t2oJD{8W+!FE1%p-(`C(Rz5(G
zxEk~Mg)W8`oD#ZJq-OArB5GOm9;4WmKudoDEhPdV1{&;eb@|~WjX0?ZL99lch36m+
zGT0C2(U>W^ZQ)UiJ;Q~9IB!%4;`~f-%R(Hm{?T)>zUpb2xv>3dL7DIz$J2r+;W@6S
z1wF!Zravu65uS5(2NFz6yiLq1K?wApBaVL;2~g|?Z{zqwJ^QD$5}e^%$_E_tB5QFJ
z@nx`!rW2}58R7s0eIkm#@F&13Ey2<R#VYmo3Lr-+ipz{E!<8$U;idl6TR|&)Z$zDZ
zFnau{D?)X9I7svuXCjVQQH2q$qY|0H)jt8UVBgRd5z#lEjyPTk)lHBH5okW^DJ~*|
z{>mq(G;Eb7hs^9%gFZ6{&OMSt2&$g<4E>dvXA8*>{os_yi`~_$WHeB7n6W%mw@UY-
zuc_cvIwgTJ)R=CS2f73QMOJ~1`e;z&VI64#P@hv4_dr|Ela8T``AGws03)J{m|)<}
zqtJqcrh^eCBl3`3Fns=LaTH#r^G6;M3A)dJaXh)uN|sd=&&?2AVI})?vYDIYOp<95
z*dKaI*E1<zPyZ9rgUCbA>g23=@+VgE^OC&E?hyw}<{bRR`XV&Lw`xfI3mf8#e6bo?
ztec;tH=9l~4vRD*fi!%6vk{<r(5mWoNgil~FROG_Gl$}RX&lnu{<;CJb(3DYt7LNh
zL@B@WD@Z}%1V3c+Lj5?ypN@Ya{kTdVJ@TkWRd6Jkx7f>1QCR)kTzQm^t8)D)omIE-
z7<owMOsd?^?i6{*Y|E!4GH+=6+{i<n@|n8-q(6&$4SD;8e$#Y~mLBIV_OgtGO4Zd%
z?^WL%NtGU}6Z%mWiTaqw(DrF@Qf-=?W0vrmz!6M+L-Y}%g{$r$FXypsD6?wUDv025
zt8y0&m6fp{66&cH!c}JUm#Rmp5%LqwE^X3eo{~1TiNvzli&`1O`##r1{Rnv;Sln9g
zNjAGtrb$LRs!!1U@uGp0s`jPC#qQg`?2l>HP>908-0t$ct1zhBCN>O2B-;_#lk*-N
zBpg9%J52UVr+n$G-Vxks)>I=kT@d|K+$e=Edze~e^TCPann)1Az{TpjiS`!Lo@k;j
zYoPW|pg+{vPG*F{n0aDjb4+$8{Ss}?X*KqiqP>W^)0nftxLnkPI-?gEyUtEe6C)B0
z<0sWSpi`o32JqFf6~Skunvt{!gWrcsz}fvvwQZ4ZOVx2D_g~Oa#;oeDEbF)={z%C9
zCG55`qC3m;k_p)&;T9$u{pBc<O(CQh1juNRpwof#iCE~~l8S$zC4`D}Nu+~M&=1Ds
zGcPH)Yemk^y{DHO^#hAQNUT)M=fIV?E^}|W&iGvHKPE_|viHlqEhs)WQe}$KLS-Zd
zqlx;kO)%%XKH8&UuIzjP>=@8WkR=wW_R$aj5?|#)mk9aQdG~;#y-6EqMk4a1G*X1g
z=3u*2U=+m%v!E~XkWVfHOME(>hOqPrExkhD`j)GA)|%Ho3{$a3{l)42vlNOkGxaC0
zFovVlP9rp7-;IB?V0R9vW0W}do(`S1qfZ^VH91`9!P3`$P>h1GjNPAGxAzPIsQDN!
z%pg}Fja^I_2w0e64Y@HL1$+Cd?z@sb>Q6sl!WO!^>r>s2ZF6ruIs|t91$%gK@ldrV
zXvaI3wcF}3GLKFI*{#O#$bA~DohDejY1V=XfOMM|=r;H0=34y8o^VOJx{(&U3tf(Q
z)p3;;adHR7YyTHaluUZ4clPQO{@%KlurEL7VeC5ljnNN`ZC07ePB{z=nlQ0+RV(FK
z(q%@{^5^@Eg?E@iFPvSdDWIW`Hbki!@k8N91cyv6T$<k@zU7PK(Yw|zR=IzGXdJ>3
z5fdz-SxmR;{(LKoQMghR<EJK5p)-m4a7|QCuc*&8dHK?gcK|9;8x#M6)M6}L%J=b=
zI~-gm!wZ)hyUj_}_RI~zFQQ)jJp`BLEx+9i-WOYY`=C0W+aZLJ#U8vrv~X$ixrJq6
z2-20ZuUY7}7HX)`&0YOV@YX0?`l{F(h`EWoDkv!nSDFp<wEFWUD2Q~&S6MF|Vt~3(
zaiO_u!poP+C0I_v-Gxh&f-je<@zf*QFTVzqq;o-$h<Wge*7Fx19X|ER@8e^L>L-mZ
zMadHo8G*dzD+5>ZMsnoG0yb&odE-!8X8fqOEMe}gV}b=wbo_!33{c=cqr?Z=gY#nk
z?X^DV?B9FFTXK7_tW@1cZ9o{zHkSKx_eE|dt3A{})@{Kr04k?-@0aQ!cEB=kL*V<B
z3zrVS05!{F8osId=q0&_z7B5i(r?O}^R_i1{w0f4^o%tX!HG-*&d7T3nVux!=T_wY
zWw~lxt*HQhYQ&$G*qZ$Gi#R2y>^$`i7`_o^x?ng$!kGVFFnpzn;WC4X3B2NNJ%K5L
z;n5N^v!0P9zcXhf_$^~M?upJu!*9T(OB3K<z=S()8`Ot*7wm~Hm>oEDD&7Gzez5SP
z4$u)X=D*%uwS&i34_}F(x3S#tlzT@6Czc~V8(nVrn4_ZPpqmpRdIBT{j}Uy$IleB`
zoFvS^A5n5u4X1z-_3ytmyAklOdQ>NDh$oc2dTemr6Qu45iModks+*dLP07_HI9>Pw
zeZEygZMH1-IHyo;pNf7@#*iC2+?HPZ2B&sZVFoBJQ5jPKAbP?o=<wLGqHnPQw`)2H
zA8HU?l8pqe!VsSyR|G#cD;?t>LRyJW^^T9PZA)K3Sc1#d@9!};2VI>EBO7n&jpEPX
z-i5{VXnw?T?GriM47nxj{qpX&3ANrAyE+L4GdvLe+i$>-J<zUwvSrI1OkC!{bM=H>
z(X{)Vku@=5=RT0+?ceyP+b~Yuw}Q=Lz-ptY$UJ(f3^_jS$lb?&9J$BZ%)%uuG{qwu
z9kOq~9SK!1C*g_V)bcz}02bAlRZB0jdlV=dGloO6a`%-G;59JM&>2$IxYI~-oZ4*#
zC$79gSMaJ5fBvfZurrm1LYmA4CK{>m@XGUCc-~cTKcnety;-n`H&ns%HWIb{TS7ZR
zvU<z&yg|ah&cN7YwDxW^gps{pmN+V#f_@T+wX)yzLV{8ncBGAiypV{-7t_vM6AD;@
zk0O8+gk|6&KhL75oO0}gmP$cy@Kk)Qa2xV3DOQf20g6jee?HEVprys?xw{05+*Pt!
zv5EY=g5Tm*vJpidmb!f^q;mxPeq0LNbrrNrh}Urc<;AMZdJBy9=NJ1^;{_I(1@bDJ
zr1O>i;vOlO>38b2!M$ItL)d7ZHYQ^ImPS&EdUq<fx$W2@Yqb<>SC2E0r~SX=y$N_!
zMfU%Fvq2!iZXiHFl!gS2LKFoR2uoNZh=2iN0?Lw*g#@yhbQ4gJKtKsi6lc(3Tv5@%
zotZ%ixTO=8fQSj8>>3cUW21yc35ewVoT~1mL1%vc-}nDK|Mz+R4V7>0b?Vfqs#A6A
z*5zYmdIS0DF-I?soh^pYp!=P^K)k(lG;@HnEzguE+3!uU*PTD$8I5Enk(rj6L`}84
z$3D7Dy}uIBwRtojja8#oY(svWbLShn2aCdfNwR|dEs9M3#RY-I1^)Kto{>^UnW?=$
zf6)1SmL4hP5;)#*h)-}@qeaen>M<(r>gz$=+Q>}#^jZ4o9F&itDGlxRLkk_^7sKD?
zTimztKrK3?GeYv>wg^#e#>W1!Zet%Cr?jfX-vy(2G-*F6#nb$m-uMPNGvL!S_auAO
zOrP|$heQRM?54u>AC)fO;x1RLM4Tmq|7X%PT~<|Ox5gqr%=a$RQ}NKI>_vs%{ipS<
zOJv+MuDK=S)F34pPQW7>7i0qdbCOZ?S|Giiy+nE(vg{=vZ~sHfhiQpCW1Kn19b_MN
zwffa4W2VJVd1t|65tW7AM0aZCR=o=Ri%qT+QMRTRJu=y_4sFOs(~_waq2$f0GS6sy
zQ<2FRQMBJ1>(%d<2(h-)()FY6oowrZpt?HQJN#144HogvJKdU5V9^er;trCyxtG>e
z`=@L188N+Rdi8a8N116ixz#6AzhQ}1vsOonP5nmr*FHv?e#0hPUG@pFT!vG;#2-o<
zRU|jrPm3pN(uB#jPVC&oJKvz8^oTolp-ILPX0U%^UgLGmVTrbWl4Bn)QbIkXbV)#4
ziFal+roTp~?>9{}d++Y+Vhvf`Ji4(Lf0c1XFa8h1&9eiPQ2iC~2$gJ6AXJH04>#V5
zYojRG)NqsJMf#N2)NF8XBEryumB#Hbz-19jzk4TJBfVnwRxydjol^16$KZ-)ksh36
zeENgIsUiJ}YO#Ff#$?k5t|QoP?Uyh!U|PwLm*g@gxdmaN;{bDzOWz&6t)SUL#|7Mc
z;jhS1<v8K*cUq^j?Ubzr_hM%pJvBZ-p0U3OA4E^(c+Fq2exfv~>NGnSP7e}IszEfV
zhbie%(WJ`#xf~czG^r}|o!y8g+QXDjl#b*{g^t9cxiM8MuT+iNm(8M89eYf$Qj_?6
zqi1Ya8j|adaZaN%Ja+YLiYRK4S44Gf53fk^0*kGgo~gAur3Q4<23gOiMJ+vv{$@o{
z^DU|m$vee_#ck+i9zHNs&+m_Lu(ix~Ct90*S1h}>biH(1iZ8wx{;XgcNxMDDc8N<C
zc_+f!&0Y{&GM2?aGj&CG8H<5}*dC{=FFQ}8<MNeU_31@9q3uN!mkG%W1xoSi^WSu?
z-(JzZ)Y{<+{c7j!vdy60660YWJGu^kKL;;o6m#*K>$~48i?G+d2^5&Xd%Di2`Y|At
z#g@$HW!;m#%eV^7`6yo88i882ROaE5Ckhb*KEPevt7HzN8v@rwRIW}hXGZYm%E(x)
zk=;VqCz4Xhig}VGk8iR?Y0FUW9GS%$BzJ2#YenHgJH<K|rK@OuoiWL@WHE)j9EWbl
zEzRVq6t;uxvymZZamJ#siLOjGecjo-(v;2ZWP@C&f?7*K!7BGVM3-~5-4;_Pdn*m?
z_A)zjEnjiWx!$T&TRXNoJhT6csahdsn;y!z#)%~7zrOaDFkXl~c!|1kw;;!)xjcOr
zt*`HwvwkWsAfIb!SEY0i>pFXk)2-yioJ^Q`zt;1K;k-N*CGC)PDxM`p7P4kf{hZT@
zFN&8^<WxRdm*F)Jn29c@l;2pT%dr>kkvY?1(SAkiDzOWd<KmqUboS_8wLPRAM1SEf
zkO}d<50!okV-w{1>X>tW72H$6wG)PD_LbE<sIKEO7ki)2EyGwXjS1|*eqG3I>fRK&
zDSxQNw4uthVbCAkl+XK<S=`Ld@UvTPL#eWE<xV#H6t12xGi})2qsrQC$?mya{mt#t
zd`*PMI3<&~vZy|4zv+nr2;^a&tGV6(^Ki=bh_BEL4d_ZT3Kc;muZ+;wtdD?!V7~M+
zZhy4-^X?5d(af3NyWvBr9XFRrg{rITdxUH;Zl`m%rSyQ3iLwfr;}iAkqem!^^C7p{
zJ8$tPT=eNvztP_6;;u)z0Bt^7ymFt!1TN!LqcPXnk5I35C|$;*#wPK7Zmq`3+pD~W
z%>52eBBbb+bIb#eLrZ=OyT78rYfQP~o<lkywd95-dLKP8go~Wmy5w>oz5HYiWj|d!
zzm6L=^0_4M90v?|q{HWtPqK44fji6BbfPovhsL5`8>|!Paf~bGepAeOw@qL+d0~#G
zpU+~K1otkS+hFkIbek`t=SQYw-lM|rEH^b3bFJR<+^Hk8XURi6`gQiO)fD^k&e#C#
zaEs<FZt1$U_b)E?6s^q*=LMXlzJ7Ij3l$xJyDgoe&?1y@6~{rB-$*}%z^zNi@@%i^
z)m8P4``>Lm-{`D8#XVW=<sPy_$BF+38_&(R`iRbOf^BF2r5#<Ld+j;5UgqC+sod{w
zy-~KCPrEGkU5#E%JI(Bd!*83PysgGQ^S@-DnJFT8X6)ACJ`Ki1*D{K5P7_MH)js6u
zJX31908{rP-tX1#Im=Z8>Kp3rsbWI>rszWE%3ow((7r9Kykr!!3)iiDC|B^gI<lh}
zEe>SY75t%yGCM?8Upspa8;wNSER(xjEJ$`oZf^mCNZj@l*++8)e<Ishu7FRZgY#H@
z-w?+Sfnn7gu5>mJb2yF#IBNWZs>Im>XN{k>w+wUGzu;J&qc$k0yy&Qp<5aNU_M-27
zf*e8HrUh-C8dTwVx~Nv*n|OJO4~&~ORPa#x{!3vO?UkHc-6SQ?G^X<E8kAUDMD4H!
z^Ss&BoUucw-6*w#_HF}J?`%I%bxxt(tZ8pyKhs3`o*~sg*ek-SS#7!L7FsJDPCucW
zS182pALcN9@R?tk!xf<EKI&ietx#Q|=njgxbme>Mb_cWOX|j};(*~CX)s+fO31O9v
zpW63sa1R@u-NS~7Ys>xZ-?&<TXcWTImNTOtbOn4UEoa~AR-dIE;Ip&?b=U3isWg!*
z_)}>aSHP!IbK2o6szWnubyp|IQPYwt;8fLVq3r=Q!!AcnV9^O5N3FlE(TQNk(dN`>
ztEyAuQ(jTKHVL1lLfkj-lP|02GGpNhqs(M{DDA`98b^W@SK;{S8umnH8q;W*UXW>u
z`b<@<#fM5(e7W;uYgqa3>QZiN`>7I0>LQ{@T@XcgT}a_+8h<TD)CKzGEf9CLq$<8t
zC8(Urh)|sfQ1ytp<gQ9%KWCidgDcIsuDfJ@&DpmO*lG@>)^KNN_rYD5@SH{LmlO?L
z^BtGMGMUcz=L<BgOz%#)#GtY8Xc-zRgBueqi&<_4JT{nG(ghvIe1obX;h5aUq;0-h
zGJ~oe$F2z~7rAbvVBENP4qnJtw2#c^ax=EN<bH_}inXwCTlG&=GK{xv0)(y7YVxjx
zw)=-|qt<xiSF8G0UC`-%ie6~l?P>|FJT|I_H2V&FxirbP>RQR~3&+ubpi1#_=cnvC
zKdj{UgUYWmXa|MX1P1YTi8;t|1?BKgU4DB)HkD>JXX1s2a8j`m9`@$zufoRO<=l7$
zTV>|?5pKB|I!QiPGw)i(&KNg4yAOteK@ON<diVZIjXa_xc~~|j(EgdDmg_MG+Z{}u
zPF52il-(V+HS8;f76usF9|rm283wu1X@y^Ir}SH#{@PhfWUliG+X~5kWiy)xRk8J^
z3Fp&cj^2C<b8v4yjd2{h9j?%#ZwGVf|7X?Cuw6R+QOzA037X2QRD(ogdCIBF3#w$C
z;G02VTm8zW1y%ODLquxogY(+EYfqJmYRdkw;za{PxyOewkCPX7%){EyE*jO1n^6Nk
zJrpT>Hz7s!olH-DZOGXfdD2o;f6anaYwS#4xr?a3Tyu0&ku$*BPF})Y@-&0SwwU9?
zyK>e~-X~#J_c#aZplAs?K|VT2Im1;@4V_*R_mvo}@hWnftZ_xo7S>@Z?|wRi0R+ny
z>lY|K+hS_yxyBKc@!%s<oJTmYQ*&fW-H~Roe5I}NL-(~8RmLiRb#bt}5Lc;ub;^7s
zv{q_Y<h<6jc)7CpSceoj+gW={+1-nre%20=Z>f=A(IHn4L%<QkRZd1JkmKrzB~vU=
zbbPT`m>Z5?MJeR}Pn5Ds8|VD)`^(%8(UsV);Z%_ESGeMx+5b>qatU(2q;lydWyaJW
zx!$wDnqWW7MI*<#mBasj`z-(B%y57E$*Z61*@vN;<Oeek2J!-#O#98;?d)T<h^>SC
zxkmob?0&Y)nPxUU+c1-~cHgTNIBgs^MDv_((PXt?fus@kd%0}V%&q$u+FOH)E?j4A
zR+L(H*~NZ&*^#@=MK#|RRr(#7vaUF$Op@}2idc?9>IYjTF@>?taMlLAR+i4@mC^9N
zkma14jMt#RNt3K0&QNwYQGJ5qop;DSCnW~*6gDtP#!vT?pPdtx4rc%MLC?jtya#^Z
z60!o18i#{YDS+n*JRxVx`&~GQ9$YfU>D>Gt$vF{LxE4S1@5)pqU!#)eq^;7594rnP
zTk6y7+yW^UR~L2h{!E{=e)k7*#}orp-J_5rw6%~MP2>*7*5oMbaC_lOa^)&P@s-4#
z`DD?!nLZ_B0>_Pybw0?%N99Qw>`p0h{IOpuoUd;87~}NZw#dQe#;;}W)XF*iL)}VT
zZ@q!lHSf7uujA#<=P1!w7FZJPvn;N8!_v{1SYGDjq5V|uc6R5XmQD*#%3+hHok$L8
zh^j76?2F%*>-vjdsOK+bn2SG_S&AbP-B}lRb$0kpq?t=W3}+y#*G7FfIzhEX1^Xa}
zP{#LdTf#Fe7*91X_~z}u$MoJ8e!GfGWdDo-b9axe=g+fpDQXBbJ${%-c2!E$F4JQ#
z<0=WctN7`Yq%XM#9mam9SZy0doi4b|&X-)8u2bgYgxtN?(#{)cvO(u+W>;ue#rU0%
zIz7AEULEDI_UYlUf1~59SQcz98Si6%UlJ@E+OTwZd-U?9qZ;J8oNw)_+B&^mF`~y8
zc14LM9ReTcxghU_N$u>8dy18X&DST+h=;Xgv3+@oY=&w!*0z+$?+XXHdr*A{q572R
zy~}=F_~W@lT35o%U6!gq=e1<Snxo-;#jDS>@0F3;#p_UaidxY-no@A(RZkusH0<%@
ztRwS~UB|PltxX<$sq*Yk3w4?~C44V5>hkQn{LU1=Uk4dc=kvSUOOzzAF{m<qT3kAf
z&VEnS<${6kEEV_s&P3G}bV=}PCa>r^;-iP`F9`p2DfagzPggT7zdEwLqQ^mZtA8`Q
zOTvVvYpPYL3l6xW>GoE{7OO0yzRsIe{4|R#MA#`+I7{oF<uhF`h#&H_jH5(8%SN|X
zE$?o3mtEzciSpzu?2r1@w8TX^`{i0m9#x-zhZYe&jiqIB+w8D}*d~d*qN-9w>z7gW
zc~Ne;Qi9OKEv->X9A<a)POd7ah1j~!O_bVmMj`uH`elz@J+?(T<_*ztpeIy|V)49^
z#k{H_k~c)lq+5t}zdCIyx`)Ph3*{rIRZ(Y1s`_ZLb;;u5m1+k+x>)(Rdyy6ook5+c
zD3A>7m9>3I>@^(8_f=6z)ms$&;SiDHaZ7m=RqkVY%Rk(8TDBS+mNmmKxM-`7=~e&m
z{L{So&#iD%x9gExZhZaY&kw3QWkZ~+YZ`~0r@rJ95@oIo*;Zs&YU5no6lNpL6~Hy>
zd2+vb49i-%9rn;0GEmi*#5WYpWmBW`D8}!CmZlGUx%9ZBzpak@EX(a*ai*Y0)u^lQ
za<!K$<=a{Pf;`FPrLUC^yF(MLNNeW|Xe$1fy=+d%9m&iMROt@6NWP(6XF4Nyws*$C
zAPm0};wP|y8MNIxMmRG+c*Br?Kk$J?_;y3f<I9>`Z-i4}aH?pVPyg@pn)Uy-z}NRg
z|83YRux;&MV+)dFaMiuH_ph<G*hrf<<oTXIz{#$u)7%VYDr0B9oiqKLM!rpgxS8!I
zLP;MeSs|z0JX^xdU7|79yRWXU>TB0mp)VWWK4RJA_BWY6s9bookb#+J<V+Q;JEK{i
z#e#TRqd``e)^I^z_$$a=twXs`iwxY?U~e66zRAaR%kTVrU7f-gNIX{?cUZ8x^m;2d
z)NvKhCC)9DN-?hM7jrVNRIOHd`MmH~AFga0$zsw^?)&sHym#5ugEcw-<-<2t>=&FZ
zc-$*DuErNPFHZ1xUQ9!h`En??5{?M$Ay4(MEiWzzEgliVXE+jqi|<q4<K#ezdz&$W
zxsk1^{c_zfySKp;oX@~=d(8f@n8WJU(=aAemM~#_UP3NG4N=aM_W9fr$xgj#`KPdM
z0jD8(J02TPGG*QC9NL0R)TS%fxPE#>8j3}};d)qoTylalk^atoiuGs|s2KBFF9=-N
zAPMu}0w7oN#PXqoR-tP2r(|o7zxN>aC2Aw(F4)iYJq@<a?5s|3wk5N8=a!BtE?;4I
z*x8>Fi~0tjTMkoYx1wxkU##)=zRu@~ILUQCne35F@;{dzs_Xtys@L_HJtsI9y-HMO
zGYevlKJ%*c++nGT%I+(y_Bwr`AD<OFD9*l;)!_!)e!1{6hs=1UZol$I>5~!Os!1U1
z52m-Xlej;@{wsYx;FEAfn9pUfYu4gJ3r8R9<t{(k@%%U3m3(bO*aZj)oXH8x`)CT&
zhP#^;#~hZ^kSWW8hAkcQ)8g%O+M%eh#&Q&M*ps_zo-V7ERSO>vuNhEg^IwNlVy_!e
zgWb<{4fgs0yhV>-8|(a+#++IjbC{JITLC?|=QZZ1J;#=fIW;P*iq9sxx-T2cZ5qoQ
zJ$(oGn$)cYLcjnY)1nVa-QQs<`Zq{w*13F_q+d);elvsz!jUN6xVkCE>AG%N*sz8e
z=d#V=WdjQJ$9zp6Y?khMtQjj)N#)EtWS>&Q)g9MTi!^x!CFbzWF~=p}_Bfl>{zi-Q
zX_Woy9=wa{9=w4Ic}~O4cXyD4hX#ev!6|jwG}#tYFP$hVZizFm1FZ2a?of1tQIzIy
zoIiN&?yx=ZmqXHi9PDfQ>dBZfTIG|`e<qjK`=yg#bb8$~8T8~X-&a>0kPoP~5|Df8
zgPhgUZ<L#3q!+jhsjT8<6^ih(%X*pj?DTz+dW7Z1kfxo<J0xO5yKpj=BPq5>EmlSK
z&1~JAACR##pFeDJi<rt*<`oH=9t6fad;J6zXu8duYq7z)-erwX3Dtos78)Z@kr`jF
zc@r#3t!E`#FSnV+I$2JLvV}0U<y{-ju>{K-HXIz48OM)jZQh$TSEPKDl(JUn!Qjj`
z3muhLJIS}Wb<vJ4u^bU{&UMFV;hZZwSUNvh$aqb-MFR_weZzV?-{UsDJDK$!U+L~%
zxWF(57Iu->^9~FMSKs3<s#(BNW&t`K$B=8=F-R7j4Cbre&fP`uO1dZ2s3_q}<<9x|
zjDL=V*3sk^?EYwYvjdT<_+;7}a>18%D!}blLk^tegWac#28QtY9>cWcc~X|NGVFfl
zP1h2k_V2iL%nq)-tlLan*<Ca*JkYSUXQ<}J?Je^4cKNz{Dc#L*b#powq5EB{qi)er
zKan^W`I2<0ES4L~>UCvV&VHoiQ{|c;ro|P_q=tW*C#EHTA%V*{YkCw0rkNtzS*QhA
ziK$OB<yZAdGd)_CW{L}lRsk2Q(oB1HyrDLOM-Ob^q}#mtX{NI~2Hwu7y&x#f^wsEa
z|0Cp8k!HH3;gRr7C)s1*85LiD54P_uDi6UDi19C`4Mrn)jC(4&hk~;^D0zRHsoc?Q
zpgfM9*L~pah{1w&LW3C^&X^`bTw^gu0%Gx`wDRkEVQEIR>m(Xc5DS&Hn!q?fuFiSO
zD9UrPOH3(!V?wPVT<a!>vWEFGTOhaR56E1@ZYA&F@U`0AcE@=>ebT~SY5!Hlsh=2C
z&OySO8;i<%rTLX3!FQ9KL6>!5GyB1)I=+a;SGwwW^(K#-R|#|ez<qo(yUF8^!=Eu$
zY;|2H{_+6Xw86xS07a+xxY9K|OpZFA_k%i4-neRKevU_jY3qDl@=%XZR_Q$Mlkczc
zR4&{;MHR!h=qjS4s<@l)5mg*J5Zv8*_vNDcZnN7uXEY|Cq?4N_#Pii{*6yfnG(kw?
zrFz`g8q(6%Qnb3QF_(Pi`SX|IhdW@K9*;N^RqqdJBvTIO%iP3A6n1b!Av04?dM97h
zELmuT%hXe58}O+#rkq>gRaeJbGOs>RvdD<ger<U4ej|i9q8&$Da?s-%*T8s1-Uq~V
z-Lg@qbrfu7py=JecN@yPH-s^0&9C=s7E3kw>Wb4&)Z#(KkMdzfKJwW}n@pKYet9%R
zhD7JlqnG6g{iKpypLxC<(-MtcUA-RKG-5jEa5&8~5;9oCv&Ves7?<Dc9Z1viMRZ5m
zqF`^mTJA^>G}aEb-o#ced#cC$*ZT9#fgOQs0|orongx8<TCBc7U#<1!?>@D^%s5)Z
z)OU_8+jG3sNCpx1%CKFIqdNU|oqoGczg?%_rP6;PyUWvD1Jc-Z=w0@UW3cr$HfCh=
z*8dlWlwHX=d?~yVx0GJ#`-?-0-zuL13}D0yG!%EdMpLDaGitDfcBFGSJ<&g0ecod`
z-Kq_Jc@s4@=$6hjQwU>0{+A32TRs<`R*9;sMYPM+cwLpo?u8ofSfMb^k!Fe~vxzk%
z+-!8OYp(KJox4H}Hl>Nn1>@?{Op~{!nI@eB&(O~=W8X|Eq?))D5iv28)cP#E@EgfZ
zkIOs#3u`YUR(?Cqm~K7|alarwevXakg?t{8Us1hb8eT1QT2u)#utc=$rR<X!MJ630
zXBlwXMdNoyxg#Q1E1D<$jQ^YKH2vQZ4{9b}B26Xn$VaD()p=DB_k5bE-7kcH#&Cy|
zDod1hWmLq0*^1egW@-yRWmIC^b90xtt!gOdjH$d5o^Ejn*##rzvazWPFI=Xs1(~`X
zB&LVqn$e1}<)o~Vl;x7r+WbgBAXHUss)aSK`$*bOBA+o$g~~Rq48k^{>=-Uuu}!Nw
z6*S4QX(ye!wu1}@4j*_;v0Ssj-~9e*riAUJ-oB}Yu=HeSDls~|aYPpjZz~C?LA}7)
z&_D&v+~p+|#FxKRn0bWq^LJaYR8xSuB2(yHtqFa-WDR2lWceYP?jd_Z{3o(~7N0(t
zd6lb|$(c=Z-kxQ1@tV>)ru(o;bt`2Wm!1rC?i$n3FjB6%@GS_IkDuxIt|Yk_Gr)4$
z*F1ry+3z?qIXn<KpBX$e&?#5SK&fl6^V1*5{eCu0`3h;^k)z+#{IYrYBca^oZ)+>b
z4s35qW_E3hKXPEgk^RokDUof~N!*AmBThs2be=OnzZ`Oi;Y_3~C`S(PWAAiGh-t&5
zW_%{r&%w^%wJdn;xxrDF^IF(P2Kw!ax{%j$Xi-^2)Sf)2`;DTj`{&Hd=`{{M&zNZT
zF{ivNoQkE(Qh-_|+{VDTg~#=EDX&UUajH|E<MI=A)a;zc-=fX_JmZgpu1N8V)gj~6
zSk4ZjwZA<&+~Mq^-YXz6k|4(eQi?@MG8!)dW~-Q|iVORqNqM#bR9O;T&e>d@KvzQ_
z`Y0Xq0R5h~u)5fX4DfR->>C?{uGVIw9IH<2H!_r!t>{DgOvM%Tk4Ga52`aNi*pWQZ
z&UokbG@EzB!vn!Od&T(_{44ES1^udBBd|}#N3;&&RM%D?s{WyRf6#W@x$|c^`j-+O
zLJXwz{0YD6ylbL}R}h$IiX!gp7Grx5aBW<8Nbf_~0<i_3KX`tB(LsX^s6F-rQqI(J
zv*ATy;f3h@c7+!#`OQqPmG7yk;5czvA)ll>#*wq$yDN5jg}+m^=Z6Zp#Y@7S?(l^8
z`?>JuM<}9}^V^MxfpR_te*R$5exn#qI+s+tGl3x^2n%fr>r7avn>C@5K_hF-jjRcE
zvnEurW<N{}C6f?ho2y;b2NY`#!5UZzYdR~|gf_A!#LXJBW=$vz>8x0zm^5Z?^WSmj
zKAXpH%G7DXDK>jJU#)AWD)7Hpxll#&)s@@h8iEY`uUDoy?QEXyGZyu3YZIyL8#Okn
ze%@+W??Q0Z#8}UOamLisKYTm7wmgY6tk)Ku^k=m&G0nZku<mh>VC-S3WESSr17!zj
zo^R%bo4?6a@+eItXKe<2UCZgE>ko7ew+DwWJdM~FE_Bd`78F$((l%U3<Lc=S)&Bdn
z|3PjomI&v|CAO{fz~t~yG26Y@N0gu7er9Z1#Ib%p9~M|pVEW+xV4hze3k+f;&OUg?
zlzYf9wLi3xdDRH}f<3!EH9ao$-hI}TV@flf+MQ;yGIv@(OEc};5mspn1-FM)nm%^;
zZQ~qMOce>ZEZkK!fq(;H`>VM}riUY}@}98I9`r;SUd~>e6pO0buXow`ZBmrAo#_Kp
z)DF{dvawo5Xiu99lFG?1&D1}6L|t^r=zevkp$^-RWKhbh01aVGo~O#7$8giT3D1T-
z$0)o$?4m8i9U5)sGwtHX`u(KoqkVqmu8*laEA8zKXWnIQJAZ(4M9X4=f5WxSr*Cuh
z`FD1aE>Tcpk9PAeZyMig3lFqc$>aPhct#8OD>`68*bews4cA&;$u$?;Q=AJFPL-Qo
zhfN<j{K}dC4zg)!HpMvT{maOIf_*;)kY(Wca^`Fpw5%oj#{ECDPFlR(I!=4qTtRI7
zR5-ph#|Q1VxBRr>^5sW)rhmToXMS~l7m7|d6xB8K{-XERqH=#uPWbpNv~}$+VBI6&
zV+-W8i7Z|>Po2igIu#{D8+c$i^iux{>zzDd{GtE1)*BZew;ppi&3LuLYad?C@cP2_
z)KosbM)Z=Qmq`r#rs0ynA3l7Q$D$`YySW%Y|8{wkwu-$cYbQP<w&AO^sQh57iMJNT
zzfOhNnD^46CIriVW|+g3o@U3s0cK^RK;@R9-sI9T9Nk3;99YMnf-WYr4-DU)X0oBm
z*@)@__c_>H2<6$WiM-_`7N?TStZn(mg<qxXQ`1Lfew7r|ueIwLb{4odN_1g)cG}qV
z%Cb@Bp))3PWc^D#_wKw=mf+$vR^x27Q5wk;D(mC!(iQobR^b9uk-V~g*7N{7JHED1
zBDD)8O`7S}^4TpniDK#;D6^gE)-9%@uGoliM;(RWv(>c7q{4EjNB(IlmtXBubiv2k
zU$QalY<3j%L?5GX-nzruEmpQG)IP@>W@DnQ%_gDKDUTA>_1;Dy8dw54>8-m=i(l6?
zUspw8<kx+_Dl|K?m&!M%4khw5bmbtlhxWkBy;3|XV$RVt)34~iIR{zi9|p1iieJt}
zb^_3c(>_l#O{WnK9Y`~M^92bRFHZePoLc;L;fEgWIt`a<Q1%`TBNGyx+J^@nD*vG9
zg}eFkmzy~jsKlp^psyw9Ooh@_)pEpBCyusAy?N<8yy#+}HE{8wF4VymaUe1pEDj0Z
zhPp{U@U}I*OZ_!7i-tOXjY3`HRHdcj>IRnhaK+QWXg6LBtlHy%kW=Yt={j0^I;~Fg
zm=?E2`GFx`ttJf?=x(stw-#OSx3=Fz(;Cib(r7Wb6PqhU+vPQP9d5zq-P-v#dRp7G
zSgs(`EqqaIN|@vUrPA6de?R5e+DK}VT3Y>J9yCv;-EzK#pXcCx{$Bn(S`)-Qsyh8T
zMY;&%N^FwWEsW)+MT;cw59NVZgDIhmB^F-@>B1_;|MN2PXGHI!76v!(aQq<N!C#6u
zi=$SR3MV=$+!LatX9aQd4)1Ilqv`C(z|qtRQMmtLThFw_#D<ec<lWOQU)F0WGSk*S
zTrErjS#AtWRJ?D~E>~e(Jr%2=_Eq$qEi#tGBfML7`gLb<!QCW2-7l-2IBCF=-0{M>
zHa(TauZ$H}pCyIyte8%**yvGRRBH~}Ay0OULQ~N$dfP^<#-;_VLK&%8?)~bJVgk>a
zPLQ@ut5V9R>~HYgcLPOkBU)T{q3-IUJ1<!=RdKJUvPjVr`z%>KUC4>=F7<#zbc?v1
z<VXL^-_wQsD#))*fG%Y+owCiqGL<*gQPpCgqCt8tSvOPV9il9f^Omwa$vJMz8PjAZ
zIbS5#{X}J@I_Y!FVf?GW@9<~kI=PxSEO6V54u`*69DaE1!LV9ybDb2A=U3vnm-r`$
zyA3;ePCmn`yrH|S)CS5QQ&A_n*1}_AkE|Qa(!G4s>S#Dy6`4DLQ;=2c)hph<#|o9?
zWHp(As7-fWMjT^IocJ-=C+yyoNXj(R=G_!*cDac@N2pW)?Pk(XG+(=_MXKsY&zK@B
z@M9!mxvl&ro@7!v@e|bkv}r+u4@3ks9QA>SNP(h@hUtl|Q0rHTq!k@SJu4&<v1=%f
ztR`L;t13QeA4PiXbfL)=er5U}MXjo%DDaLIIxYj`L`K-$9TYo>K`^0VQz2|1H+(l=
zq$U$peb=ez+4P!8s0I8*`^i5YNy_cR$!_3k!ioC>`wa)cEqZ5WQXMgC@Du5g-4g_V
zQU!_5OL1h8>k`XZ%(s#XL*q`|jHxKn8xpF4+gw+u%72u-4l{(sF{bBNTNpaFi}1_f
z#}gGkalw#oTHJ}jQ@B+kr)$q2Tv#rBg#>4rJ>vIlJc|(0IcU24>X0<kMVTMiclilC
zOWv~)=6&V%9Se^&kZj>aEhev!mFgk`8z{)M<OTYgNBknHH=b+EGp>~;Rn1kBcbn^K
z6zxrUt9&;4u!-o$6I^*JTXfN!_aMDCNb<ZcQN`DTMeQ9t*~gP<)fDkP6=tBw-)F&6
zZ}%Sj7d;6<rpM1oN2BVGyRg*Cb-Zdopk2#K>xL=mEb}9~D+VOEznKh=k@H^3xrQ99
z<KeP<n2HN<SIKL*x_Y?yFC*20LH<T<_OA@v942KtSwQx-m(ebR7ao(&C8hOp9Bmcm
zV2_NimQ;!24J~!h(x#P+G++p;ovAzY;|!^)iZ89b<R9cA^>fRMn|ldp0C8vsvuS~S
zyuB-}#{Q9NyDwA<hFh3l2)`~MGtc7J)V{VXid2&K-`iH?=Bjp8@?oW8G!9MORUvFF
z1>+eY!r&$~V1JX{Gmd#8n-<GSOs{(VK0>Hh1Uk%dy2j>BKOu;<*(wB{(U@>k?{V$c
z%n#z*o%~csnWZM%Hmxc(j{}UC)zGwkQ)gn-M(A9^$%S1rhFPUC*>3WP$uSul>js+^
zpCz`kf6BQzswhqN2d%-puUZ40nFNYYwq(ZXauLYza8+|zc-DOyRE<oS7R$*w=(Khu
z(q=#Rpgou;r(K))az#KsL^cXSK$V*ec(WVclq=r2?w5KrRY3`)y)p=a(}Zv8<Svz|
z`O%t9*Wqf?u?jlm1t2a3p6Uh2^ek1ClZ>*J`iHxaMLz_h1Ui4(qk1xtxDBd;iai>E
zitf)G)D3}-=Sy}q3l=&IhJ}Sc6bcc?3KKq+ImvYcF9=*}Fg>x47V*S$$5>ci$Xu^J
zjrzN(z<y@oPclU??*6}@65yW9wceA!4(KD>^9LOln{!u*orBgEKjbW-p;YD$=8byh
z4dw}Eg#Z2X1f#<R+V4DFESqJ=Y&!Z`_S^O3AyWf(hBH}a%sx)oF=jxfB(v0_lJK3-
zciwLrzT(4PHB-%HW5JNALM-MBd_?PD>Y9i;v87B)-lkBRMC%NTuc6;;>L^Vl(~W^k
zWPl7*LdoR6B(6q*ZAx5$OA?Ft)vIo(=GZc7D6?z4Lq)B9UJ?lfNFOi464^;)3JRzL
zYv&Uzp5nl>tTt15<Q^SP+n;FaK7Xj&EDGn22PDxb%xk-FyB3&iQ5)+b-IU1?uw}2G
zR+AR~ATo)E!>@OF<8ZZvl}v-WDT@c4qWSVbG|<_v>~e$W36A8|sDHCBTf4R+Panr{
z5v+ghkvYF<YjEvuk2R!ro5$L@_9Krqy!M|SYtP!(#mdlBGBnse%GtZp8OsgRr4j4k
zNY-FpnQQtr#;PaQ%@S*|#2Vp=)fj$>@Rp6?H+sTL#;mHHNNFWw_SVLFm%5br2YXPF
zQIc~Nw$ind^N)kBD4%mmwV~eWs)+rHN+%_*l5~e9-TOLSBR!Jq!x9?!PeT9Z$<;ok
zuH@dp+ARezfVW?3SoFy$rJ~f6mrKSht^LjZTSEnR&r6%ME{5!q2(fPEU6_&*P9`<f
z9?Fu+IBSPJtFgxuO{`odF(}tp%Iz!VcJY+!;i!kcWpW;qsQYdf7D!b-$5vV<iGCQ^
z!~#`+A=cAcl|+4|G0`eXbW#$%uM;)KJ4d{SB~;hnlV!=6n%bp*7t(8LS3l{M?|$Ns
zlK7$jBDWb$@vCYls`yp4xx_CSbGSA=$tztM>DoxT6_V~&PdZP1rQJhS`n|QiRQlt!
z5#H&gKD%!sz2)DeKQ*AK>MD!I`Us2Olz6H>+dT24Ka{TWqNk2{izMDU$?qjkye4|8
zYAbDC@k@z6p7^>EMoP-Vk}_4NEE)55?VLoZ_x{=y-sx78u2W+=v!n}LPrAq}ODq|)
zuC}i`eJtt49iiN1wb9=BJx_i+_+q`LqYPVVtmJnj>I#mOj9FjnoTlk9RDRFb?pN-z
z+B&OOy_S>T!;SgnN`9r1U&+<^IcryuzLC!|8Vr@#miLK0?aJ6Z&-2Kk@VS%3QzCnp
zCtk^zleHsDyz)CqyfZfvZ?fcP^2GDBM`L~xZ->NNCGo!R@2)lPysAzr+s#F(b(ig9
zP8K-=Ywur5KW$7av^*hc>m==4p0rX%V;mU|W=fpS9}wqpPn^bZ=`W)sT-9fWCtT_?
zXR23yjuWq&#7mca27BUp>Qgf2cx_+^XFNiAw>;K4h?qs211n_2sNUq2%__1vbOYJE
zE!ouf^E7hFn95q`)6%|`wZ?L<1e;0lrX+Amf^D7zLf`%=Uh#yFizHs+2I9TsiPuEm
z$=Y;IPtFX4vwRwrn3}%8+S|P8TTeDolFjpy&BVrRq`U}8uj@C}o!-+-dMvGDEL~sg
zcu?Aiibp^nFN)Mw@p<7!ey^i|gWV}$zZ7u3ubTlfE;(09{F+*W!MHKLj8AV${GO#!
ze^30zaOua(Bz%p8|AX+xAZgkh2~tzna)LNUT|2#vR}|seXo=EmBdIe~l#{iCy`xCS
zxJjb;OO(643y{>;NYK0w3F@IzZ?64do>u`fOuE87-TNrEQg*P-wU_U@+_16!Yiw_^
z`M9z28*HnXcs7RCU>l2mvawA3N+fip_#K3(jmyPW1A{ldd=%SP7W`I=EtPn5mH%sh
zW!wCWD$EJYWlZ}@KjRk6AWRx&4rVdtFPPPsH!+(r`!PRYE@E14_cJV*UYMbnI7}jD
z9_CrhyO?s!*O+?DH9P!_a7=&9SWF@&6Z0tM8O$2Y2bj&6gP1yu@tL0yf(ggmjv0g*
zkC}?e#uQ?fW1hvli7CT;g*k>fgE4mc8NnC}rWa-?W;A9ZW+rAH<{8X7OgUyZrUr8o
za|t8AUW4S|H9xaqo{PBy(;kz9`8Vbtm?tsMVN^W+O#9L>zj2?BIXb}C{BtK?^9^>n
z*GvC)mHC(pSNNJ2#>!1+fBZ{d!zbBV8|G*+uQl1@#NJ8!FMqwsZp)sPol}r)NzKd4
z$s@}(Z}^!LLk#nR)7or)%g>zK-Y~DgZ#5>ionh{UDZ{MBSO_y?VlmN}(d1o4Ifa-N
zm@52wbui3z;P8Jml{<%cmg|WBCixE`4!ja$aT~Mn4pTLdv;!yuQxj#F*I`y;R$vM-
z&#(0}qxPH4cM>17q7U(U<0kEDu<$m+oZAb$6}$z%NNB}aFa{<9nv9{;2flq|HO!gN
zQ!}oqzN<$QSL%r=#4aWg6OD1QE3tBCQ{0>3-!RO8SNzPMeW7_hJt@VKl$n{6oMg?&
z$u^9oUSWH^?BTCArID6JdsV-;D}2rC+-5yE=V{Klf?__xlwmewDlt1TRhYdP$wS(+
z0Fxv*9mM4Iz>Z16<n@@2eLD8(vLPvN%^PhnJS8x?V!C0t5YLc$iA1->@L0hJ!}P|G
zMdL3GTV18EIR!Lt_cf=27VsgkFUa{QV>BrFrhwOg^FTQ%wG@;yHqV0=a4k3!To29w
zE5TWy6U+oJfkLNwhp#yc3<ssc!@--t$soJpMlRSITnfr@<CWkI;2JOjECp#2qYBIc
zkAqUzdQcY8=Ffc1?ARK8KzW5R8kB99I8dH@rGV|gTreLj1g+o-&<3ssXM^iNX@||A
z@OCda7j%L*f_2~=(0`||`C+g#_y`yQ%7)hfa2^;7HUm>YX^TQo+H3_V?ejJm0)7M*
zf;++a;9>Al@FXY-#3gVcX#U*SoB>+ET(A!)axfZP1g3z?!Fk{ka3v^boK}O6f$PD?
z!Oh_H;9)QvJO_%LgzWM)iwyMv7l0$dVlWZ3gSp@`un_D3E(c{R;cc)BSO$s=SAmPc
zI&djye4+U-v~0jg8%w=~C(@46#&2RoCZ2HPcu?ZY9=o)i?28Nj>_&+z;dfyqANgXo
z_&tRYnUa%NA_KxFX_Hutlq>ufBkd^u!e7Zp^l8aQ_$jg`?I!7^T?G@|*cFttd)-*%
z_CEn#l8?x-<SB9{Je4v<_HV~5#EAS#J(Aq?eoMLx+|s`!9Zp4`w2#EQi43ItFA;3X
zPvl(uEf^_J<Xzf8<Xrrv4&r|uL<&ZODc}$=6&wtvfp>s2z>XlK7%|{Xa11yLyc^5}
z?*g;H>p`J$94K|@0}5|LK%wCVQ0N>9J_JU9LRVifAG{Bgb{+~^!Qr6vxnbaJa0FNY
z_6LRM_khv|?gR_LfuP8E6!<vU4;0xN4T?<m2A6|LDJglW`T3T#q^yk0xt8o4t0mu-
zo12qoO%*mYhG%43Z22(66JH`G%}&b5Oq!l4d`im9OHE3dYe~+@&Q49%iIehX*s@Zy
zt(MG;e5=KplVi!u$(})6kAIHMYRO5nq~v5JWxymgmuPyFJuM?M)sm8$pPZMGYi0J9
z@GOW;nvrTu&&!#Wnr+F=$W1leWitO*lBT;U_x5v>Mip}Na%M<%4evC0scBS=+IpoS
zQmU}sNY2ZFJ1MENGm=xON4B&zBv~`E)r4p9@FOqvAzMbC=9xQoPM(Eqa%_2|oNmjX
zYorh%nTlvOr)K3^=NhSVQj={~VWK51Coe0>>ef_L-BahlxO_v|75m^E%ocZcQdX)L
zON}&JcCyUCSGQn#4y?Cj(>TfL?xr#_QfQQnw2V|CFe_)aP@R#PnK~mW(=vUoHPw<&
zWm2<~rCq6KE?mpa%Sa+1BS#w8nwOJl$;nO4bI<u1*;dpmTduTvM)vHa%nWn_cN+^2
zJ%0JAslq;kTs-QSk&$mnvNSS=zN6dMlArOg6mMjwS_^XWW+5X5(v2G3o(A%Sdsi_#
z2Y#oeQN8@!Bx->>IXxpYMVdcZwLbYEjMAEdImxrGkY)TlWO$3X#Px`u*vZYBldM>w
zbszjxffkxU%YZ5;-wOA$8f770(&pQe(>+p!oVcY(>UTw0lUvCEF}+yT7}rxR)hE4T
zXm>u<)3WS#D{>Ss>BDZBSAr|yso6QU8R^tB3prKvTsa^#HoGM`2?@!RgiU@|bTKb~
z$r*Xc%CL%zG{qPHrs1Z^zaYm(b4{0)fd-nMwoGAsVGNaA^7BQ~k>U(RcVk1irK-_=
zW%h=QP_zxhoZ@Ew+<a@QjMa_3REkj2pv%umPPWPX+!$`lZj=X$m2R9gLycR6+cFu+
z^k|lsluakiw@QBz0_gK}u{?L@a|?qtBP*5ojP0p&tePA(L>LkPkrHG`m(NPd*5u|(
zkIS~e;YPauAiOD!NH^nLW1RfCS<`beGm@3qTQXB;r)J7LLvOXY2NE^76yz~PH;J}&
zF5~MgX2LvXu~cTb-ptImFhgdl*^YTHGk=Jv|70chyYo_01xKV><0WUYPw?39$<DB5
zFgiS(IxG)ca#H35#zUGiW{x3Y_aRU*YCKF8t1*lQv!=$(X0(c#gF>O*6H>F1a?^A2
zQbonM+RrOqT)MP(Zca{S96XhFgpl8PCM0E8@6O4)%6}M3n(0Z&FmPCAPJZfDp-tsB
z1xP;Pe?=K?&#UrKzISKZ^3!AWc$5G)QirM$OPa(GCXUXSo|lw2Hz7SW+e6IwRI4p7
zn;0;6m@O|4wzxCM$s23Sny%{T=8?OxM<WCY-tnmuv*$f2;un{ZJZo5vE!%o$AC>3b
zOe^<f>sg3K89H}lQg%uvE#j`%e+XA;C#b$8jE+U#GxAf1<V$q%KsRY>_nhn$T0SQ`
zK8XoMG>3$wS*gQ*=ZpS`KZ5l~LB@p4)YRPHg$$b@bT*YWVSK`9J$?*HR&%r4BW6xA
zyw8}OYQ*Ku{ZB#0c!sv5{M6s2`Qx&QM%kM8UNXVNrFdtX&dB$B|EuLfq7Tc-%1z2k
zonXz&$esb~X(wutq+15}=wV}$avMX@Yu~<dJzq79b@_1i8t!IIKa%|bjO88>V;N<b
zkF)<_p5C;kFC5Rl0VWpH3uDFz&5@X1x82^m&mDK()wf^L^yHM(v>E9cGiPOHW#{BR
zl$UR{%`TWTSC(`9y0&Y5O{?Ibpq4FL$S+X;ntT6<_2=^&a#PpN9Xqsd7t*#(o7Syc
zo6TkuziafbmHMf2_4=dks9q=5gR&klj_Gx6AQ*r%6qNOe1#AvRfU@rB1&S`;7i<Ye
zgF)a(P}UZ)psWcdf}+bOg0k*O2Zc$wpsZKsfU;&O1lxj3!4Pl-DC?S4py>LmLDBKo
zg0e1I2g;#`Qc%|KWuUCFDnVJFRDrUt*$>Kku?Dn&PEgiWb)c+2>%lP4_*Sn^1HtY%
z&7iCyLP6Ah!vfv}Mu0biy}%w|U$7?_4NAL@1aAdn!8^f;;9X!M*cVI(`+>ROAaD*i
z7%T*%!KL63a0NIFTm=pXSA%zhYrzrVI`AH_6dVPXf%k%y;8?H<ybs(D%6ha0j0c^d
z^tU?j0k9ra%Hnao4)@=~I^UnQC2n6Z1oQ(fpg-6X3;_Fr&A{Pcb1)VR1Sf+nz;rMO
zw1UB4A=nCB4qgMU0!`o=P&QK5fvv%hz&2nd*cRLihJZC-JMbjf9;^pLLI3ZN2ha@4
z5xUOcwO|C;8SDdI2S$U}gQLMN;6%^@rhr|+T(BEB4-5mBf^z<OCD<KY4c-904c-Wr
zf;WMi!JEM<um^Y;><K!-NYFTeJb=NVyn-DH_5s7eJHTGxo!|iQE^s8+7mNe@fr(&$
zFcXXd=YSkdGZuq`!4+UM_&hiSTni2Z*Mq~sonQ>OAG{kp4vqlpz<a<;;3zQgd*lZU
z0Y`%ta4gspybtUP#)8Aa@n9?%4^9RXz;y5da1NLXE(K?StH4ZfEw~U|5Be~Gl!5->
zPOv$+A8Y|02U~)5U@&+IlmREui9CQIU<had+k-v9PGDc~I*{+_nR|kh!6?uQ4gw3o
zVc>Fb7PtoVVW3(M`h#U)b8siv0_5`==9b`bFc_=@JAs$LC@`d!d_W5*JMO(eZdf-4
zfX%^?pnQrj4r~b~g27-W*a@5iMuCe#9|pXYpg*`8Y!1E+wg5}Pmf&VE7_0(2frr5;
z@EqvF!07)2@j)}#66_2HgArgSun!mojs|@gC?|t0z;v)BXazfgg<ur83iPqiZeR;=
zJ=hW~lW=gSgoi_igo92A2hT}3$el7~p9tsyTY#OxmSBYV_k<qt2l)Vsxg|JS{Cm+a
z#UD%&e=t}4`_M1NA6zQ_;7alD3%|q-zAf$n@Jrm_W^qTuFL8s11&2eY;7I5c91Wc(
z!C3ky=s%DC33dV_#LZYZlqeG!BO%e~g`ey<$(#uo190yLM}h~zIPjlfBDfmN1fK-w
zfM0-%!7srT;BN4F@C|S+xDi|rZU)Q1!{AO(=79a+PVhMRDOd+qg3-_=bJ8W;&w(L7
z>b-CSf0^TY;!Xx-ZubHE;)Vsra8UMsW5Ere!5k?2l<Bx*z);-&pcS{wHHF~gpap-?
z36|rAg-RC?-Cz~&SHLykQ{XyK=BAIpe}k3aTcE+1Epyvm+;*@R`85}B+%kvt#T^LN
z;eHjo1bz+%{^V<Z8w>%rgBI{FU{7!p*caRa4hPqRvEWzWWUvZM2W4)wf@NSKxCe};
zycXbc+|}SJ@CdjD+y|}$cYq&(?}L?~1KbPl1#7@H;7RZuupayd^grcm{wrt(YrxLn
zhhPM_3+w|P1*5@3;Arq`a3XjBOaZroX4)|f%*8Ep^hn&Id(6X~2}a-+9c3x*bP1<E
zEy0zzM}z5v-vX}2oe#zm9t6IPdnH&3z6Ndv-vz6{G2mhF1JDV6BuGA@tDM8V6cpX#
zF3_mcI>SWr4aOOaTXc_H!bJxP#cc&k31{dr!g0R`_5wxsNW{MtH~{y3U|-TjfFp6w
z1Vu*^-7OAx5}1zr8ZZ$zT~_IkCNLBC)8HI%oFMU}gD%EB9!w<PNN@%2Jg^Y=ZQ%2`
z=YW;C`-5w7FOqQ5w+7eao&bujBsy9d?qYB$?%TmC+;c$-?(X1W+%v#X+~J@TcN%yO
zd;*NczXxcX*3YJb!6KYB_zwg_aX$uD;f?~saW4kv;O+(X!u<j`04xAUf;KP?ydPW&
z-EF``+|PiSU>rCH{2RD}@V4M$+$G>z^1W01aX$*KB0L0q9(O#r8h1NzE$#$xJ-7-i
z1DAtU;7ec)xE5SX{PtiS?up<!+#SG6xF>=8DQ^H6ct$@n3IYFt+XBu8dxFn{Wu)r}
z_Qm}m7)ZKq;Bee2U@Z6vm<U#Yx!^jm5G(~(fS-Y@!EInA`E>%<;hqf2*#0f}5$<wu
zFZeNd5_}!>KkIA$J6J`!Yr)RAp9LepDc}m|=?(V5{V-UMI~t6}y$meH-4~3-T?m%p
z?gviBy%5|_zMa8z+*3g-m<`t8e;rtedm6Z!ba#NuanA$m3Acc&a8C!FxUUD-;7$~O
z;`ag9;eHXU1Rnu=;eR7ogF6E}3Fd(HpdT1`&ewbl3<Xz!;o!?)FYsUB0Psz4BzQL%
z2j+rF>M1hM9@Ntv_WRY-WW#uv`w}8~+C9>c-Xs3`3RB$SDeCEvJR_1(Oi*essN<!n
zr&RLnC{OvPyW^*;r#S3^yW?f3r#td2Nk#{GmL#=e-`AaQw%eWScIUd|=ehm!-1()u
z%gI+yqvRRVLn@zq^|XlgQTIOxYI<yL%wR81el~Zy>25mn8|!6N;hFAyGTr5;x#^wl
zu4lS2SH(+$bMi}d)0O4UH%UE3lltj;rn%`)cc;&C^JA7f{w#NX`RXZ`(5LgYy35aX
z=QG1yj@9k9y6I<UU(u1($QNC1mfL@ZyMDs&S;WkzJmCyaFjP%NE+T3BA^3@GL~@8?
z1a^^+NFzo`g_e;x^{i9mL*(TFm50O`ZrrQvsmdOMU1TMaT*fPVHun2fJ|ZiT#@)s}
z_=~)VUE+w$MB=OFLFyTaG|Ct$vLpT?nIb=8kHao96lsi7&u*n&kx(G{h%7}KV^u!c
z)JE(wSBXqT5?k^Yxsp0ce37k4Y!XN0OYBmv$e7R|aYW99KT=1LwMaN6`G~xUztmS`
zE)vQ{D!ZhOQ)xx^q+CfW@+b5U$1XA`JkdOtx(_ub;V-f%c?y406`e6Ef04;ZN|kY5
z<WlUy2a!$5Q|J`=j3mZb>>{H=r|1VFr(%DAzoT(k-Etvv>uFz+-AG~!oe~~NY@uzA
zs+YDutm13C$haqt$how&@Iho<+En-{@-DOqJz0w8F^cAV)z-RQq%TOhQg`VO(vBim
z(kH|&awz>m?2^Cq4dL6>b&<Z}X}jr)eqFBg9S;rCe>`^SLrr!qdqSu5C69lWY6}nj
z(vI4m@0C{in9wh2lNHS)Xi0f~F72rMj_!A!)KVYmf6~fQYfnFvT%>j78M&_IP{l=&
zY2lIPdzRwqSj8jVZ|^b2k;XHI3mr0E>+xJ<Na)iv$#^ZL$Xu`c-cZF;-LGW)_w*m_
zpRLk*`j7B8*4=)Z`dECt<w^Gk-M77EZkVdCo;!5g>pr8~eyHM|ce{GW_wXV{oyO90
znDABPLf3hul388nA&Nd-=OL;e>pJUp&~+ZB<T~Ho0#XO>@-%(A4xX}O6_-3^k5;Xw
z%buX<&}ENymnZzzW$3a;xcjN_O!HWeEkoUOWHFX`Mk!Aj!&Uq0GR7z=@RXs)1t~+z
zfG%U0>i@canvUtJt)+~s+enwETfkG^7)6Wb+dZnbI^S63uk#(FT0rydkMortrKQD_
zZ=7mdov)T(o$qi}C-1zjY=bP-!>*+9J|x#8&!gOSk>_|tZ$2Z8xOB^T%Ae$}i*6I?
zmmYq}_#|m0<jOR<S8AGvs&?@3LdGB6=SC^|b(}c2%t`4(R6FQ6qt!Uzsk`XoIv*{`
zI?lanKGktzRsZwQC-aMrGsLSs?pLy>{fBzRkM;5&=Wa`(M~@&n&k1UD(e{z<c9A$^
z-E)oDV-@|Lv1FvGneZtOYJ?sc^B)F1v?Wm|k9|7hy~mzHERQ`^X`7nn45g`Q`%GpE
zPn=mw^U?m9%-SCROhyimU1Y*z&r#=&bo__B{AFbJ#F0_fW7jjDj?Xz1<uCJy9;K4K
z#wYEg|7H^InJYzCjD#}DQ|m}ti`H{Z2680+!b8qr^4B}9)}w^;TDOj5rV#!}xsh;3
z>MOc-B!6cqyObqmd&cr)#alfF$X}0tCbL14-KOlK(?!A`S)qx{$viYewV;->BxV;+
zKbo%S(EfTg;IRu$+OFx-_6$|Fw$D^;pzYaS`Q$2EwZGP2wcV!bukBifJoW-rmhetm
z$kR`zEBVm!noKP`{>fMPH^t|yMPnS!NqO0Y?>e6uil^G1uG&o7v(R%qak3RpwZGQ9
zJ$B){$KF(Ku96AuuU8=2Zu9b=?dF@zp{Z`W=pqu+qr+vWx@-Mduc)*xrB@Gn4Av_a
zZP)GPu}k06cKPeEXR5Z={#lAAS})P%YJEt{uGYUZ6rZ);=JA(#OJv%k6YJHNtnDIc
zX^|zZYbGgq&^oSOX=&YEul}@-q2*ZH<*!GNpQ+9ZYCUp>;*Zt^XDPYTI+><N>-w`)
z9X)!L4)N%Wv($K_b!5GQ)4H=>)oJ}n%d6IT^{P$ldO9aPE9ljetf?ZA2<hK?hLIlc
zv1h3^*1E0y75z!p9C{_I*CM*jv|X=swO-|kBXY0%gVt4bS$e&qSHgO|GF{bK+x5!W
zqo3%W(xf+P>2Gr9Dvo;AI(jv&*E)Jdt@T-5uGW9F{As(UQ`_aQ%m<>U>(#ejujH#f
zBlD?@VxD!p$E{Q8`Brot?{IN@hs%7dOV{y*J56p`dnG9u)w+WoYrV&BZ-4JGSo`NA
zXEOSV{_W96rG2&kmGNa1_3%OLp1R9gL{13_eOiy#GmWg9r1qMRvNmtB%i2)yO6awf
zZg1J25P#{fdi|o?L$3{Os?X{5W3HMPw2rL*de_0*-@6WaJvbYFd)9HfTs^-_UzE|u
zqeqKdB)G{f>2%z5Rlc@osc}}@^HpEdcB`7h^%~J#Ki-4*=7>IHk$cR~T!#6`>)i--
z1~xA*i8G?91sv1Lo?(??%y^FXRg&|wYJ9}u{>i?VCE%|eJ?>!M@$h~xBXv%4YOX$-
zXdGw1%kndOhnOT<Tvnl3)HM<crFBFCa^SkOkhHM$&^#5MY21dNHljQH_q5XP+2kdy
zt5e>NO?G}|EV}X>nfP6qpUfq5;JAl2iJ{MT|0fiF_+sMD`<fFm=@=`f5VIV!3bPio
z9`g~V60;X`7~{m8!~AolpV_GAxedmQ3BiP7I%6!Da7+ZIC#El^a|L_AU^FIh56`2(
zk(kk#SWFydB4#os5tD*R$7Eu1F;>hR%sfmXW-(?dW;tdBW+i47=6TF&%o@yE%-fh!
z%x26^%zjKA<`Twyf&Fz%EG8GT0<#XY7gL7`xyZgMW-?|DW+`SlW+i3~rV>+yIgB}p
z3H+5hV`4FLFsm^;F-}bICCb7~#w^9G!K}v!A1lGbn0id`Z}1E=ZQ68>Ql&&l8%~?X
zNuuOTFgGbbIY|vT)28KHQ?QF;+B9o=h6Lc4HZ3hF-|Df?R%fT((IlVDyv8)CNz+mK
z$fqD9%{uKim5;XHuI#ziJPx@{o5o2^4pt@8rKe5fFlT1QjBHMjdVGaI>2`p@>C((p
zYpO92`=CMW9}m#)3=PDiE9Su|o^!A2wK5};I6ZoBZi<IAfI7P$Ip}8NR_xs|BsT_-
zj%dapuqPOClRmRQ6}#+>-*5wn<z~WrU?MTMV)$AqGz^4>fd)5{81pbwF^RL&ta6A>
z_QextPxrD5V{SAO<@9Dwngkn(oY73mw8*hk&VbIaCFP}Pe_=@W3~iq+?L^J-v&lhq
zd=oX>H9LrSWhmjC3rmvIuN)-yB(o%QXwsIa>5{fglGD4e^N-TI^Y>29X-JNitKz-N
zZ_M30xG`Ll{>Ql_&d$iQ+Nga>Mt*K4C&JZB30X<GQoq!6%l|-vcbq2PSenT2%HzM0
zVI(H!<f=C$8mrR8s6<<e92J%mo~k(#V@4W@<KyCFZ^PYojjes9`;R#<ax5~c8J{Xv
zBQYl{JA-rEnVI<+(&C9t%+S*A)o{NHdvJ<ZC}}yE%t_Le|A~25$NNJD3T@u)a21!D
zIDJJt53m1Y?8KD0*}T@0%%N$|!Q(u6%fcdc_k?l6cut1ZORPOHh|?$-|FMY1IR7It
zQpex%?7!rDMSr!bv&^1utIx?(k8a&8Wa~apk2^VMT2g^Nh-`_Y?^}j9zC1&f4a-pJ
z-orAJc%!8$#FAvSL|hRzMD!05xTB8bMUkYu<n*~-i6lG1Ijkz9q~*TpGZ~#Na#GdZ
zZ=1<0VNA|u!>^gqjI$UqF);!1yQ3F7D*PfWePbtbYU-|Dy%J)ZlbI!uzeZqUdLloR
zv)noS0-NL8+~7PZLBy8-lG<oiSom1s!a@r0d#v!WMTH>&0hF+0$&vt``SmJ{EnLd0
zWf3>_jZG*d1%<@ME|pRu3YQj=%AlC^^z^{M=5q>i3vzR>$Ug!N#)kHisoso()NEU3
zCS!HePcGt7zd|?uUkeuF>VFZu52*iL9r8zRjwk=ue~XRZ|GP59Lf#Yf{PQvX+&}Le
z7V(~(=btaS<e&NHNpJbTw%t7yFI>2&Xz`NA9$#9#j8A<&@#Ko9{_@wAPe1dwReyi>
zx#wSa@uk%-zw+vu*Ixg}+Be>O>+N^meQ(`A|Ml<n?|-nNbmOKEKl=ESPs<$T6`Qwg
z-B!7M$7ee~-}OaR_3k};zx-<7{sRXO9X|5)H#J9(eS7@76W=>)e{h}r@uyRDr_Y={
z_wz63>n~jV_0n(LRpI07=O56ld0>l{LBXxAF_~MpX&ch6eTUGFov!VC-Su58UAu*a
zcfaArh?{Qi(KGUvTbs_H_m3JdaM0lB|9rIl!O7fNpZK4{ADK7*(FOmf>;Hec{QuAV
zA2M{<@R++tjJ#*my`#sBy)Sm$_z7|M$0tmj^nm97e-8iu1^<oTjenNL@sC;cPyGAe
zFar84Z2ZRs?|<s&8Nmb>`856W_4#xEJn6k__~+{DokHw^e=z>H;W)CHT?0=kA-w-?
zHngu9yT>Nsf2z8Tk*<#a=W5#&%WO2+wav#z#zOhi9wU1ZVq|Yd&>s_uK`l}5m!lV{
z_s2zx3C5t;C~V<IIr}JKK^RY%<l71(Xu?RoW{mi?#<X!8@$ZTe|2r_^9^!TnbGt?N
zk~HJp{uA6N&*CKiNf;?x*5Z;+7RG|f#dOBVzMRlnh!I*Bx^WRG{zVwcXE8?7KZOz1
z=|#8uWl-o^gOPInfsuF{FhbWZjD+vQNcbcecrzFZQ-oi}@t`;fhXcuxQ@70$zVeIy
z;YaJ;RnPZ)NySO}dE;B3u9;kM`ljUTRB+1szx4^&y!-LAzg%b+l{sAb8Ri2kQdjmI
zI(?r{Ot)t{+;HQ4at<)s_vz-2;`s2+|G2niMpkA1;jDLDc|MZBu`A`qSCV&xt~u5H
zk?PNLPkl41%b*`#m?jMkRoRy-KA#!<QQGZY`rYE^8}mT-`rQx3k1DS?2;Jr<Z&@2S
z>|bxr>(up$=v~Xs2JPCs_{JdDyo#0G-?>K`FS^r_gK;nI{4{CO;kVwJye)Wmz|S+<
ze^fpGy$!$KRPtovN?`y^8@%kp4r`uxFaC{}Ml`$gU-wR_nRd9a<(rr5q7OW=wyLnx
ztgvLBd-WZC`!m}TioP5=>UdJOHx3Lm5BNCm>~~LD+f6EK_4;)uGY{Ns-gAQ7%uB9+
zFzLSRjGG?`?R+fOzek@VxBhfvZ1Ue9+Wva`+EGtL+!EL!C;OgG*&T)3(YN0a{f>WZ
z-t`y0tX_H3ho3)~_RK9&uN<0xG4<^UUl%<0ie=q|3!iR%tNY4($9(H=ER3x9^;}iA
z@v#x64QJ1^O=uf3^zi&C{l5Bp$4T{_`~JoFD&*gfZ7g{0;iStO+RRL%m5;Z+u4G0<
zyrs*^{`NatJQtXe`|&5Kvn{U8H$3-(b4I)D7VTc>apv}i+KwCf$*xzviy6P5lT_ft
zIV;cmmRYY|ZcM3LXWM${jgXB8j(wA7N*#S~L_zzSU$V-d8aD2W?N8r$|69kty79!?
z=U@LPn<i9dRMp9IbxXq*Y{_alF~|SYVHHy%>qiE*{;Bh%)fXe`&V4@kwOcx_e(0-@
z9v_}D-zWQm`GxpSb8Ty$G>oJF+Bm?rbkSei5B_{s|MkURKmKCi-7#a*gI_=N+f#oH
z|EBH9^j<d(U;p=?hAjM`Vu$a<)8o<)ywZL4{E~;pB0(v?o+x_YjOm?(m95_|G}7L`
z$@0bSE&JwY4Sucjm<^wQo%_PUfkWDF7`vnDp;c{<?_1G7`o3d>-@1@fFy@96@3j;u
zGv9XqTP=1^41WEy8<OH5FX}wgaqe;3Z0GQvUyN8i<i&u%?Sq<aTJ5a-;`{r{E*|~Y
zaGz7_9<_w$ch9R{c%k(8y8-Q*M^BG>_`WG?cJ&@|?7pllQ`a-S<G+h<>*)TseXfYb
zu4ncXMBQ`!yOCW+So*&6O!cmd%MN}1_1MSC((iwHO2)s62eb))C}uvx&XCSGj_Qz|
z@b2`JZx(kub>!DqJ~)2rXooW&r}Zvey8f;~Jxf1*>g%^V2Bw_bJ9cKn9oNi^pAoY0
zQ1p(do9CoIcl)dZTi*Nmql^@Gy4aGQR`~0C)%X9n)-vk3`h>r|)$;PYK99WKb5zFD
zpI(1c=gr&R-2LVL+1u`{4!-~3Ust@a?b)@T-P=8Mc3rC$OV^&an!EJB)OzH1?>vz_
z$^89ie{*K+yJ1k?@%4|rx#GcY{dzxdYyR-PPt}fyEVz*U?Dx?@?Kju|CD>dy?M&;;
zita=07q-9fR8anV^BMw{L=Ib*Ve1jub8*7!=2Km&jOd5AeK)<-IdkcL^LML0uiSEf
zvHAWFCROeI<kyL}Eh_cv7&F?h-}W&b-!`^%IaW4$?#qSSqpBnSSzF&NYwEMbeIME1
zaqh0X*<0tlwDG&SWBpbhS3`$kyj;6?a%Rr_<IjD6AnL-)InxWq^|5btPU`XX#IFZ@
zF|pz9ZtdnJtes^0{)P!N3OXcjIN_Ss^0#j@`Z;^wu{vPw;~Q`LWtgc;*F(b|*#FGW
z*S_^i$HD0gi$==j`JdeCzy02IKmL65;MkX+%s<rP`13#AH>1@{?cVt6{r7*l=9#|v
zPnF-}+WEI0)1DsO*YwN3pR$D9HK+QUq1BGByA5iW@XdS6rhWHwfqlpKuRb{bR=<Jw
zeLqyjbi;h)-1rtTQ;rT@|L!e){{3pstDg_femG+N`2xqiRh7GE)YPwicSh9qcm5q;
znHluL3r`!4kq-`B_Q|MocODo&#(C(WEnPcbXt6M6)Xe>F?wdFIXyEg&J!dnP4mjRH
z@;0LXve$gt|C79w&|t@%kN^7CoRFK|8+WPS-(20>_3AM?=o-J5qXt}#*mP-W!Ng%N
zmaaKIFu(lF-SbvWw?1j=+VRl4AG~_Yzd~Z)EP1Qn4@3Jr^S3v?`Nrq+p0m3Pedn&e
zi`;#ldp`E`JBPRRd}m<ayT)wIubPqdL$kHdjjKQ7xA~Q$<5%|&Gw*vNf64Go2ikn$
z7y5YabNvsGcaHzpcVmC;(EQfd$9!^h-&-y3`*Hg6M^0|s)ipY8uTj+Q<rB7Vcb>WF
z*2N2j{No)8Qhxn;&qD)eudcl{WPaM{bG>glU3&J3R;IQYD@W(AHQkUH-PUJ7%cT$P
z>>BynU8lAmT(<tU4~GsJec`Lj0DEPrPr$KxKmKj}=A?@0Z|*<%_}4%5E=@|WTlw*`
zJKN6u(oqtr1jgLfdFR7hU%aXPxt4?PIs3)yuNAx+_Q{$>55BVV);#ka3x>b&Nom{i
zwPSA|z5SiuFMhP?^4qg-?>hRH+dpqRX#G={bMHJb`NJiD3mN)br=54#AL)By_v6ho
zI#m01x_tWmLGQk`u_EWEz|NoONi_P+^5}&J3hH|f+;{Y$RkwcsWsBr-c}F^~eedoE
zZvJZ5Vc(lCAGv#1NqE~E-`O3uq2q`Cn|thRwqb|spCb<6+v0^CzK6FwG48}|h4B?n
ztetpkpP|?L+e5zl^m5xv4FRUP$uoYt^UJi^u}3#f7o{g@-Hc8xeRh`}4XBFBZ*yqy
zEib)#?1g_N9Xp(S^GE(StbFdv+@xo^e_OuM78KI8=XG5YXSOYUC2DtZ{`}L4-|XA5
zwZ}IZ&F*@<H2lYAe@$~`-_tSYP|06yi>y=cd^UT_Z5vkHxn*cX<r8z?4gdNYX{3}P
zj%SyC`S+f~4s`my@ReHz{xWOe+<O)cd*l1LqfY$R?b+O~YEFHzBVgZ}l8-ZulyCoi
zc<gK0foorWG3H5YW!w{&61G}*?yV>tnw@+gVdsPI-%)$HZD!KA&7BTydiwnr#-4sT
z_WKKmA6k&yyvIwoe*Ho>DbFw$e>`<S{9Og#_I>rUf%m<*dtuKP&#$p=yHN4B?>o=z
zdwkm4&)d&7zj$)#mv1{B7_@8WdrNW$cX?q?*8juao50ny{r~?v6-7ve%!i5$r3lH<
zI#Glu6d4;7MUw_XbP(5kL)ScH=9*pCc(jjsCWMS-&YXmd{a)|A*SRv>&+z^JAOFYW
z_y6DBWA$9GHSe|7-e>Q1_I@9`JQK^YRio3w2i|EiE5x()ir*^bR&?@LR^6HQ*0aHZ
z-u090uTM`%PgS=u-*v+-)$@GhID`Av3+W;bmq{2xeO&(-7z=s^<pn)MGeNJkrBJGL
zZJ|^d8=(|_-A~`Bg`jWjD(K^NF@v%_1cPz|1Ot<B!O$c@Ff2boFszU&7*<>^l&-i%
zD2?|KN>@5Bl&O>}lrbw1%9tDK8JSz^8CAB^Gpf>F&$vn-J>#k|dd8Mh^vYVM>y@px
zSFddKOL}E%ywEFG!?;wrnl`1%)uQu92wWaMvFL&Q^vQaHs$E4vJ#PU%Ki?P%rxwv`
zA%AT#(IdG(S6WlU{%GmCk2YMpY3V#i+q@F~nefxKF>SL-`0)w-S9od(KdwRl3ZGNL
zKevQ`XQ{7g{w(3A>q+|XrE6RIzEt-uX=n*68118DJ+Ow%jWHl0w&Kb3Mx`Lw|02^r
zThDYNTsrLPkvkBmXIeQ3advo52aeMAN80f_^h`Iyxz5uwO@lko7~j1i{U=*F4W%PZ
z9LLKJ1u3jPXu|!22E_?}z8&nGk&fut(#ylITc`Hk?jAy?ZXIBgXRy%Ct(y=P6h*Y{
ziGOsR4s9EUf8?j|PTkzeD}{$gg-HI;#tse+6o~DAyZrL^xA*_i@{3Spj_+=<k-bDC
z3w-~0QD3s1sNnvz!Fr}n+;7|$-_de^<AL~Imiw;^qIb>O3jw%W^1>f&vTl!O8YzUH
zq4oGC+!uFBx@TbJwDe4BH>C1K>K@X4lpNko@WYdt9ti6sJuRv$+ZUR`VXI4!4+;8D
zSE%jb67VhfV1Y(Y=eLto0Onm2gweY-_HY(e^i3_{YQibttl@0on!q{0Im4;oJmGxd
z0^!2o;^7kElHk;EDR5KZX27MwrNJ$LTLPC3w;FB}+#WbB9Hl=2mkE~*mkaj{t`JVB
zs&8rnX9{Nlr+{;U<JUrh3Vu&GA2@%wK)5it7`Q~ZDR2wm*28JwGU0OJ3gJG%8Carx
zI19L%aMo~5;GE!;aPDwkaK3OMaEWj!aFjk3ZVB9axIJ)Z;BLa@!x>aVxo{S6ws1ah
zA#gntqJ*w6Zs`kqHoftEv2R!cY_x<6J%i!}#DxUm0Z7D4M4CAAAYGK~!?Out39(Wj
z#tZqRbjX_!EBOSWGmgOyp}|7epjg2zCKenebVi+>6Cwn+gdsxD&=|oRUs`vI9wE4g
z4x;q<{&p1QiIqGk7kLMTfyf^o0V01WKxNS5nN&_f9KQEPSulDe+loP%(d0w9x*#h5
zFTYz?y#EE)wQJLmkfx)gazd~*QFO(oAkQdlf~TiTWTXpORYUohxlv$OJWWFMg{Fq|
z#((-;@WqoM^n6?gtR#ekJ@EtxJz*o~qbEM4YIy#yS}rFJWymSy^2jF9*D$$kdTK?N
zN>|TUE!Rg+5Pc2nj54XM9Z*^@*cF=AIoz=7K_pGB>dg0zNPX-E4gq^2UkvDtPY2qU
zZrJw`pgY0`fpYou>{6^$j$98t*Q5*4)k)9I=<1c9JCy5`hEl3ue)?BeH$6W}HR{?x
zPgq6rXLoe%iT+E=?JAi<*T!$d<Tqq6_SkdUy5g@X`YQzgNAd9?MSo2Mg%nR|6n}+K
zDmkSmp2&7Vn<DW)4u7=C&$!C(K521$3Dt4j!X?6K;S@FWO(Wpe!`+9ouBmSt2$v3*
z59e76$1z+kTp^rMZJYz)0^z=Wp6JJCn`qRjm*O$|B0=3#O8@EeP5+x`qbP4gi8|@Y
zsAf`+eE%HOkL`}YoT8^&>FH*Al8o9<N0_etRF)&k`gi;P_vO$$i9?yxLitI(@1NhI
zrvAI~>4>40(s4<1lb(zXMXnGiU0bQIX}|wnS(Km75>YtHO6H|&kAI){@1H~aPx8{!
zn^E`#rZ=~~_5=0szpq;!y;!tfmzVZfzGC`!btg)_CeKmIEsv`%_uth`b?L55=~>cv
zoLlJG%vjVbw}zesr>8W(KF#;9+CzB<p$zK%cpS;}q~|E9Wpt((j2L>xPd5j@9a*{D
zZ=d7S&F61hM(<kEjE=_m((}5BKWX28QclS|q&f5B(NVJhLvU`EM}chF(e|_F5~-zM
zt=#=xzf(Ce=#glomES6$vpVJd@$4ekr5hJr-QUiKAD@3TMf==hL&=z$TTFPITeqH_
z1iGE3@b7Jf(R~VqdqgEf$_CkF(_wM28%Eb&6j#z-Ux_fuZeI!gm;JsHVSm~2LorfW
zNaT*kXJ9@Lc1ux*uKw?BmX%0P2H}2|-Y+gR)?I#*Om1^G*f*toSU#8P`fAthN85qA
zdOOAS!Xtel-xQ#W^ZL$i8r@e?e|WX;<n9~&O_sm*<7+5VARUrR-?g~K#Q2aY#ZlN%
ze$(emW+`Qpuw6sr!=mX@N7^j#-?^^7^iI4Iq?KzGSOati>wsRMIp_=41^a^)z!0!J
z7y;7vKJg&6ISDibQ^4Bb4A2Zr1r=Z#XaX((>0UY=tPHLP={uZlU^Q?LSP9gE^c~d+
zkiNUg1Zk}<8>HopT+j-<4_bqHpbhv8q=no<Ff<WI0`BD_qVYCG^bkh}gvW(P(dCRV
zC^}AJe2}bz5JBNVh>(Z~9qA~E8y+iN)KD@?LeYalrOR4ja7489z~$heU@328bjV=J
z8xcY+z<tpmIU*ozR7^BV8H@xJKRA}hk8%(KMmfSo2?1y*UGD`%!3by2U_5n5DQU}3
zmaWs%?^jBjT1PTIL&pR*H9w`p>)c)n0p)xZxqW*YHQIE~3*|F8zBpM&$05@mC1?9F
zG2P&*(XdTyWVe0M8+S}(vyM(EJ|LcBFI#{3($4-Nt&J2>9#GY>@;gy(1N}rMZGVyC
zX;Vx8g<P(4c{-Xsv=!;n$r9=5CpV={U0i%~-POI51`pp}UL^+=7nfJPYuVmpLAAHP
zeP(i4F4LDgRF*LRlxm76h|OUw22NY)>uQCRKwDhg;!s%KmDektEM_|27haaGcZ^g<
z26)m74vSQ>lS@bcC706Wa#hKFryCpHJ}uD7i5IA3>iR@h^8Z|xZ-skEI3sJ^=fRbH
zXI_40zdf$s=`-Q$`}1<R{GLCRLv!2FidIpG-Dw#Gq!ko798*MyvDJqiBD(j-aazK^
zzJ&h__q!p@efa4O{dVvd@^G3|Mh*30XNIn#alYdIPVig8ud_~JTOy5DiSYOm=@;;D
zU*y%oudC}O{JM4ujbuNy$CCTK;CJSJYL5^1Q#<3ipV~8n`#ZzGiTnG)e}wyc!k^Fm
z)CTLua$OzaS8_k~m2U}u1pH(Pf$EyU{nUm{+)r)G<bEpu8T{^8QK9ymG?D$3-iiAu
zy+8L;`gr(h->Lnn@RJn<3f}}jy|dc`er*Z=eeS3EVPuE(0i>t4Il)hFQ&V1l?x*lX
z?x%XwxZfN8J={-i%jJHWGnV#pIW(`Fx!(i+K<=l$O5uK*59_&~?$S<hKea87`)R*S
zn#yHTpETiq8W$h#r+tjze(L`;?(YNtPVVmoe>VK|wk)-+2!85k+Ft_)xeuvrCfrZu
zSd{Qn-8G@<j!$X_{Pgxc)vbh|<}tO~Q}Xwf*2H{EqzNhESHn+pm-;IeetOfL>Rv5{
z_eBhB;*{_ofnQgCb_xG8`034F>LUY3dEdIgZvj8Ol}-EU0Dl)g4?IhRhm;6Uf}h@Y
zrg5dd(Ct?`!gYQv{JMRoKGON=GnU>Er0eu>Tu;lZ5I=?~kb>@k=-w|*S|Ru`4ZSz{
zV;XsVAQmN4US0Y0ZchZt(}l=2(><Clgx<pqlWHP{qn$G4^%lA?`&QFik90RWL^^L0
zY5P76-BU&4dYRfn_rmgu(9hFR89_)ZzmxQ18oD!-Tdcbak>7y}!Sy%Y3(@;W-|y$Q
zJw$KK{n+<ErlCHR*DSt{fUa!17pLC%F<v*C-<L<>G}^&Z>*NvnJ`KI~N~L}uPM=kg
zaPnOFF<yRy^T%+ytEXNG6BNizZ@%hE_%W^Sj+@?ArT$gmzE6R?v^o%kF^T?3yL7gL
zzHhJGb3fKW;Xx>eT0(h#K3d<$|2Rv(%}?+3CZarA|Dyekm1g0$X~=2{9YZvtWRHZ7
zJnB(eN1=DXbt?|?xO^K=vzA&)Ya?WRgebq)_<g#cwd30~-?oFsTRyUXJc{Z5`|Ht5
z_u*gnfZiF6g(hnPx+C|;Fq*4m<B0Y%LfY@2rHR5g%i;1ntn!gZ>j?BlG_B^)S{c1>
zOLhQg9ZOduz4J+L>C!vmbatYiq`s$KqGK}(`o}cXCMtv8$NX8meD0vNs2}svN(ZeP
z&`8U<f1XBO3s6YCOS6Zz@7qf2BJ}<<wO*cKl%Cde6HvN5=0D3PuaD3XLSyh_xpanA
zpf>7rT5tHfbkw`@YL7fVKkEzm+)8IQ>V0|ce!m}dCQJNlAAW3)ZjFNM`2TEwbo);=
z$Zh(u40)90bI{Mqp!l!(<#qh;+ez<T%Ww4ltbCejw3Zc(zLU>VbiVn%4C)7YUdrq8
z-^Y_>0s5q(_ikw%<UXb2gg)WqIZB^D^yWFu+YqUaug8_{e5N~p>CRW*eqNAm3u+@B
zpYnM?p0o0NCu<foN9e|vT0@^5y1K~n1g(k2V=uoigT|WPJkh1qeXi2`)$%7Sy-y!1
zt>sY-G{1Cdb?1LtgH=d%>yAEpev{S$OSX{0zV^4Bv@djIQGe6XMYDDo6zRYJ{3sbm
zEtL1HWF9&neEXU6HIKYkx;#IA_SDCIeEZo$t83KfG?tW`_Hc-FbVW*S{We}c15j!@
zYTWS6st@SRX<|~{qzo)qn;6*{=o^^8MsqDAJ;W<o>r1v|Z9#o#2had?1`R<^ur%lc
zmI3`iBQOv&2E#yl4k8Am^_N7@1XP2xo-+lk0H%T!!37}Q#ioO_9<v@a1Gj<Z;2zKd
z)Pj}46QHzC1Jb%pHc0C^xgf1C<$<)mln>H+PZ20R2kRoQ7a4(d5N--8KufSLr~vDM
zbRBC2+Cp1{4xkO_4Auu#U<1$-YzX>*jX-~}F&GFo0mDE$Fa~T2CW0+NHAv5DO#$f}
z?o_ZfxBzqo(?MDqSP!beZJ-;t2c&x@ElAh@CqTMR&jjfnARDCX`CO3hL-Rnorq2iI
z{-Ox<28A|s?T>pnknU|v!QP-HNcTnxkUn>8!DP?@Bzy8sU@1@q>VsaO0Z8izhM+%m
zX)pvNd-5?L*^^HK$(}rYms}2<0&N1Ofn-lU9VC15n?SNBzXzlVcLXGR^0a1Q2GW`Z
z*^|#iIN6iG36eeeJdo_k7lLF@UQl8_fF>Z>leYxPp1d_k_T(KvvL~+u$)3C?NcQA?
zK?N8Hl0EqdupXEQT7fB`HJA$8fJ?yo;Chhk$?pWop1c+$d-7+%#$Yzs1iTNDJ^4={
z*^@VFt1sD;w*bkWyaFV9@=ZXpC+`fBJ$ZMK?8*CpWKX_7NcQBzK(Z$v50X83HAwd4
zXMiej0Z8`bSA*@rZJ;}N0`vg0zz$$8NcQBPfn-m<2qb&*2CkStpeg7D)&$9(ye&xf
z<efktPzCk?y+E=j?+=na`4Euo$;X4CU<x=4Oamjp)galE-v;X81fl`So;<Bj;YCN`
z1T@)`&jQJwd@e}#<e!0b!YKmDp1c9Wd;m>BvL{~?Bzy9<AlZ{wfn-nK3nY8;At2e4
zj{)0*Ng&yiPXqOEqFN1-J^5`Q*^}3RWKaGCNcQBjK(Z%~H9*Op{4<d3$s4Fp4rmJE
z$tFPol0Eq*AlZ|52FaehJ4p8AeL%7&-ybA<@?jv^laB|<o_q>O_T*DRvM0X;BzyAf
zL9!>m6C```T9E9?p8?69{C$w@$rplTPhN0Cde8(Ud-9eb*^{>h$)3CtBzy8+AlZ}m
z2g#m%2uSwiV?eSeKLylNU|xa7;A*fexQ*gL4aHld9TX2{Q#^Q|;=z21w-xZCeuxK6
zK(Z%q3F<XLdng=qpm0!0;SM-HDID~ra4?X<op5|oIG9M`U<!phqrXUlOGqoxU!=jE
zq*drI(%>1QJK9O~L_3LIXeZGJ^AIF^@<#2^51=JTS9r9^mcHn|JV?^IwbTE<*vpkI
z7|GX4)B*IJIc>5<C8DhVziua&_L=4cS?;9IXxR?jkG69ETl=_leXg@YNLP>K?}76F
zTbsDDjj4ZZ-~MC!R<=_s+Y^)hvaL7SPj_)TYqWH~p!5IVYWtR+N6^_;rTfo+?A`uj
z?^b8GlWfqDjk#}a$^K*Sw&Z6Seg7pNH~-kXrGC-byQO<!`fii%;c<zImnrq7-xE?`
zje*j6L1%;h;B_zr+z!To>0lE0D>wx_52k^a!F2E<xCz_<?g96LN5CUsCU_IP3DO!s
z9(V>U1VvEjg6GkJFtm%-But<egVx|M&=%pe#-W5BL>leY13jT}2`u=6W5GahH|T))
zQeYyq2j~fH0H#3GT0<)M3+RJzS`%6VjZ0{0Er`~J)<drZcY?D)El6t<XTU$eY;Yq;
zYYcSVbRT*;7>M%9fQ8Vsh7ksB1PWgI((ehGfM+2s!A+nwcoK8~=YUFZALt1l1%1Jt
zU?6w}i~uviM6e5(0&2lj@Ddn<`i#LP&=<h<;4N?`coo!wr@%AdpI|n45WEj&f%)KS
z@DsQhH0la_hoA*G7gT_`U=wgZ=nS3%-N8Gc4|oIY58ejDz-wSUcnoyLI9h>fXj-F*
zfu^;m8PE}+4>YY&Er1RK6R|&K!PU@SU@GG6!EMlSpc?VzKn-*ncmiAlW`SG4T(B$n
z4BQ14ff~>h<3?*$2Ho(!0!V95ttcFt){Lg0TobS+G_5@?Ks>F1*+SEuK_239>nS)v
zZv|B#tv#h8ygcXy?F|MZpDpMQJrq<x*8xMIgTMtyUjdAP#x0w)hFB3yg8mJh0(J-2
zBOM)}Y0z{XJq6|1f$7k(6c6nPZh}q(Y0b<9+ygxU+=l#>Kw2YX;1PsR1+&1O6p!@H
zz+C82peM8q_zZdosDiczi=YRC2HyJ8?+GO$yfL&XbR<|4oCq4B9(otX7J4#Rgmi5{
zC+HL~9ohj@K`#Zpz>%Oom;i==e&8Oo+YF3>o(Cp@zTgyaKBz^!IhY1L6U;=pEx~l?
zao`EWTY#IOdr>@eWpEF4Z}14XfWpBUU@o{E%m>$l*+^dn6nyZm3y=$46*PgS&lp;Z
zR05XJlR#^59q0g#0F~epFdzA<fu7L)C?4&s2l_&XfPr8J7y}*#)!;TT72E@+gQvl5
z;Bl}B<y8l@(EUNWx4#FTfj$J@2M>Usz_p-7cYW#igap)E1G)+HBG4He0PaC}bI=`n
zG)QZxD$oad8kmcCXD|?24dy|&1|y)ygGSIb!9?hRU<w!onj*Xwm<k;Lo`7xvE`d%0
zX{}lTu7?f=EfHTE+zA~BYN4Ho(96JVa17{=@CIN$bU644j0TN*$ZP(V;9Y22FcowH
zSAZ&T2j~U<4*G)~zz{G7{Kp>rKlb41b4k8-{Kp<Vee-6AZyM<{LH7S+5B~oRd+=n9
zT>e&C_bjW<K0Lk6@sB-t`OUn4?7`F117Ft#Xq}awrufGmy!?FzJueZ5GndZhJL&ju
zG+m>}Y5!;T;HAR&`vGe0OS-fcgb6a$?lQGyc=(wYQoL$5XK$H8ZJF8!&!u?v7Ma?S
zoNk;ZGF92nq;%TVoWo_RnM|RAOx3NYa(gz*RFCECCR3&0y5Nai?@^h;Le5B;S~t!r
zGS$x>%k>|Usa_~k7|z2zxvtCg`#iZFmt<-;as7)-br7eLhg)(MK9cgOGC4PMPLrt}
z!s)@otz`=OoOh-7E(G;KnW`0BkC!O~%ha~x+M353%2YjiAot5jnfT##dB10I9V=7i
z$8~GYT0C5j>xcK{e5W|K%2fR(Qy9a;1G(-fQ*Fn!1?R_ma(~>FsXoc|cA3ILuE+EE
za30=+vkj*;XL*_Gw|C`ob7cyrICt{!Wiqu>xQ^o-$k~b0Nv5_A*X3ji@9s$D3->tB
z%T(=`sa?l)8jl~(8O7O;$9u}uw&2=|$5-MkmTiy-&t<A^$W))?;d{7V%j19JOyP{<
z43??xE>m#h+JVO_c(^GizDbwQ13&wJF{tqKWcKduwGN+_kp=nDjy4bHu^Se>LMkv1
z=sEL)tFK^JT4r7CKc_2nopinZYgx>V*6{-uBE7o*pg+28V#Zfa9hft|GjwzH^e5Zc
zgBnfK=2z{8^c#ZnH~hie`&PDpS;+yq$U7`_7u(7<%q&PDJ)pU!+Fq9YMgRGPK<l=G
zN_%zhvHi@yerUVA-KbxE^G<AR2J64Fxzz@Hl&`HY;pz-6D_v@5rK9azKsR^!_2xn5
z6(6~AMjxbCZEY~R@nN>TUg+l)8_S^lc&}a~j<A?t7h5ksjP?hnhInd^vapr`<Fbz0
zLMOglUFJ9|dRVK^lgZww@9>8{UMJYd&fB|R>favaZyM@1>m)OM(d)vLnoezn+{XG2
z=TEWF+2ZZyt?ZG1i+Qv1XV~+*)3<9XcY(fg<$b5KtfAeCL%si`{j-~Pa^g8wU|Igc
zn?~-)KkuHq<~(cVJJ|O9A044v8fPVDvQmA_jNZO-ZY!kjusLUTfj!vgQL*ME^l$#X
zk>xgBV5`O%lrx>r+6vn)rmks!kqyXtoR_c|@ji1m_r7tFxgMHk^~UMF5-SZE{=+Y^
z+lBYqU8sWo+7{rRQaX!8e)`yD#o`Wag-pv8S&OpRnlq*1TAii-s&u!X-DTFrbxOsM
zi7wdx2}ACQms#JjPuliR=mZ^?Hm>^>c4UZ4J=<v*Pt%uk8r;3YTBnYyVD0UQ{kxEy
zJ^U)W5p~IN>ol9TLQKP9(}ip{;@YVhdkm|fKi2rW%*tjt!|i()&sU(m;ma=6xW<MY
zdwbt?KgPo}V`IPd*VvUEL1h<BA$>aFV)N_l%FHI$68te9fhT7*&A84cp1GUqI1>At
z>DnOF^9Bp7v&^{jpV&Xs#0ujwZ!pFA@-+`l!><>ZM(qpibCZ1;e|p}5oftod+0(1s
zxykNU8(_F<Gk)#B)Jm~%$Sr1&kT=igxh2N8xcuE`x7hE~o;QiOi}d*|Ha{JHo89?s
zR<3asJ@k+Jr9a-@W*;o7*!BBEh5d_P<}^BoDP~_A9}`9MamKQU&pB*q_+)#JAs>`N
z{-|*qST1`p-TRT*zy@svTi==S>RfiC?774?GuoiP&ihn3n9J7msPwc)Rg8yvdwnCl
zJIw!LnQ13ip?~u_-#VkZ!wy~?SMB<#I&B5d__l-8cbMDg+%i@D>a`UX%!+C!-eG<L
zh7rX>TeTI^{}}M{^Bp!kTW`|sc9>tLiW6bVyKMBDhO^^MP`|owy4C2rY^}u(hbP;-
zus<zoF8%eo*mHrm_Zx!_2k=AXTS`~HE~;njxG}fb{ea-GX4?Hl*TgrU+X`2sDjX0L
zIlWugy(T8J8rq?ju8237R&PVLI5B(Xd4;Ca0W5roQ4ZPSJVVc@`X@XN2&u`2E_<$u
z9<AJ$zbkBUKuG`8YOUK<vAkve@<JQc0YUZqqlKrhh>e7Gm-{w$J0N8C%zNW|MO+u#
zd4_Nt^{Xz;F3!0u{<bgmQa4|Q@<ujaIP9_*`)Hq|wpQx{umCz>`P(e9!<H@=BVRis
zfBU+D6SG9eQOy?hS(2*}ROP4bHO&$m8RXe2hgL@V()TAWy(IQBIM}{QGRlwnv#4^D
zOQPePTDf<l${!H&XB*YrcTsG%wrxb2-&$e+(l-}$x+r?j`}2!&Vk6{FjZj^?AU4yk
zbG_OD`?t;eQj72l;_8%{PRF{}Mg7dh_+zHHroFMSX;WjAe|?7kj7)JwPNH{{<L!~Z
za7MjanWEbR^AoY*O7zF@alZ$g7Z3J0su)qZE&8vm@wmz7MD3^I*K4C&V*ew*_-r~W
z8Y_O?pAv%d)UJ68E}aoupO|z1>>I-aLT<lW{Xd-+o&RiCAvL7|^u&+p^-qht!|Oa=
z*sn9n-{1GS_bIW?v0!!7e6&~Xe%E8{NwL&fzafKaqW{x9jW=&NA^P<#2-!E)3+=17
zT5<Wf*mjLkru$IrkC1$Dm%(xI#g$%>Y8Q-;YS)s$=EuaE2gg;ldDR^8!-_W#Iw~Hn
zmsX~gQCG~5;t6YhJ0cb?i!q;j0P`cgq0O#ihsFNlyb0SbwnO_a4o!T2NVIC{d1y-a
zHV5#dA*Ej19TM9P@HuqP(*f;k<2xhhpm?Fiu2om|puIx<l@I1=#kWCrRts)-L42?N
z<(7zIui!PiCpw`%)r&c4Mj7Jd<jbF?`eA<r{|EaLHRAk(zv$O$f%&F-`(gUCeWH7X
zCmT<jQ~!o{+A(mi*zxMZ9UmHCeAVf0bF+4fe!sud6usz%{BwU-cH1SMa;>d@@pnhW
zKe^cP*iLb`cmGO9+CRm7TA9|k-5;Xmy&*20YG8j<ea|Oowu|#8E;HXT7VS~rEL!if
zO|<ph`nawm=9~K0!dX$9Ma_T_-IWb7KZUTX8PUIs)>o5m46aGzIpN^v#C2k`o?8p1
zwQ@qdUp@Qe)#BO6qjNj7!+cY>T+?a73b9MioPhE*Fkc15ixxGOid_qK+U>4G^J%o>
z*mm>9x!d%+yb?M>o0h*gXtv1ic@N&3hvOOFkko1Nix~HyqQ6ro)F&iH9x)y%T0cJ9
zYu_O1-=A&r8?vfm`947Ph4VA#C(e(YA2{E07ID7ge9QTUvyk&OX94Fc&V0_7oG&<^
zb3WsI%K3!zF=rm<BhH7M4><30-s8N>d51HXGl%mw=Pk~goHsbHb6(@j=Df;zh4V6J
z7Uw0I>WiEgI5RoVbDrZo%Xx<LH0LSKlbk0wk8>X5Jj!{5^DyTj&Vw=qQ+fQg6=kY9
zRh$B+wgQjmRB;NN+VVV}Q^hH8YE5`Nr;1bH)RyD%oGMO%Q(KnDbE-H6POUMI=TvbD
zoLVCu&#B@RIJISXJg16N;MA7p@ti77fm3V9<2hBF0;kr1$8)MU1x~F#kLOfz3Y^+f
zJf2g<DR64_cs!?yQ{dF<)&V$GoH%Fvi~9q0QbV7*%rD5{t+8?4wm5s_Hg4|3Y85ui
zozdMGS{t}LgRxd^OnPfh;(AC3T-9og2b;XLL6BgB>nTBdy6dnm>`J3$nmWO_eiIz3
zoLu0;8X0YF@@zD&X9d%cQb|2oMwbn~4RUb(j0?&h0lnBWi{SZF^KpG7#0=cmt`D1*
z_2EmQM}25*`PTLOv*f~@Uru*xP4T(sj00HCW{==z1KgmCo*sA`$ZDGHzC75f6Lju}
z<zd0hyIE>g&%ox;=}Tu`AH+hN&EFmL#SuC`YqD1;YnCxVEY$<opTdF_(=!G$x3|r!
z&kVrzu%I$n;t<CAX(l!c5A}xL_IdZpaCW<<V{E!1wKsiMj>RyRqF$A9Zj~LhcDLCt
z5lnOc{h2BKa6K<%j_UqClDTfLoz&Zz+BfC$;$hM3kgM77TRU*QCuBV+ii%;Q6?&0l
z%2WOETN>I9XQq)&-t_!}>p7TP3A{6$%}yH|T1TJyD{I4&MX@Y>>^PUf*F2zoZr$z~
z$HWUcm+Q}>@-uVlmyc&n>gO+-aFgoawmtq>JbMs&VQ05lDoWq;L~;Tf7{j8S=Ft6#
z(b2lCN3a)_dgpCm)E;G-@dYDT<H=U39s5vwJgYz4IFb!7(_TIGFy)`}#V0h8Ihd8J
ze`5}=PX+&-2WyXFM@#*A#962eZJ~6|9>wZbwH?#;tS7W$-p<*h*}jk_9qSxy2c31O
zWtTDR;?jaA9>!FD+Mx`CBsMam`4q=TG{1KK=9Q7e#G-+w{&qC}3zWGd$1;bSsmtn4
zqW(|cJ<4$$OR9Hd>&NaipRCJNdpeHodp&IG;4;*{l*SpWli8B0`+_I>(fmuD<J45m
z8qMqya9Y_2TDj;-yqaAueP(82Ihr38nr*+JW+VHY?`7lG82Z!BS@z>uVx7iutqxKD
zI$K3gAI}bkUV6E7FzNiH9(m(g7sI&Qd!~~1J>={$fh}okYO(hN?k9!R*L7D;VAI|-
zG@75&5&DX0h2ja!szZhBU&_;b=~ex6zlkjQ&it(Q=5KMo=3@GC&qOxteXo~=@2EYy
z3hq@-VIK;r7G3T`{a1AGMr;bR7%o0?YC!i7_T#RcPhl&b)^3~H6W9O3lm=N%Cb3rg
ziq`w5TR}TzWKEsK+Ml{P?AalT4{n$Ja1uLGu*suV4E0C5owwUhW(_trORP4Ger>Ll
zMPB-3c4kj+zs1#Q{(OJEaAx+Y%_GDvyN~rtUxDi<VM)jH-A9O_*3%<C)S&B)+*udj
zB#4=#mSz3=$rF0UkgSCXV$zH~$5+{Of=;`T)iy!Q*unHmcjyA0f9BGic(G@LHN%bT
zDky!Q3zOnSGcV_)bTi5yGV*N0c=7keBNkhgq3hF#`X|oDiR1M)xK5i$*Fy^i9~>Sh
z4jK3Ec&kaa(All_R*n;A%xh`5D!~KVcG1?ov0}mq``ULrnn1_TTs<IGeCRd(@QCr=
z(3(mM^kT(TCl*~T7gHTNul}?(!^QT(q<Sqr(*6{l8Qp2P82#wdtw%<bK1+Y-^BB=!
zeZ`OK3rHuO?mZj2{E02vrgZ(7YvtY|M)WS;c)n?K()rZ}?uZsGCYW@}*isidu)O1k
zDAB-TrTg~w)IOtndhMdbsR`A}4y;Q$v-i2Fk>aiQ8FqGOaXl<7*s|b4gqYH8=hK21
zy594tA6P9yobygy>Ci%4-wSye)<MI>4S!5o*KJ!RXy?R->xYUv`c*I}Z-?t$!MVqp
z{BUv9v@PR)uTA}X!Yjx*T<rJjwN0Zt(Dh*Ekm~9%ahUS;C6zOchv%xy<3q%;ttMWd
z^UMa?sCZ(<A!6i^EXVpA>3Uxn<J5bw_+{y?PUfHKde*Y)-DRQT*uCDX_pNt>cD^*@
zVTkxTpuc9ugs#v&Tb=Af#43mXSYN#*jhAZUwS+<9!rKP#nmwlZP;_j}fnf38pT38B
zAHemr5Ll{)VX&BMpBDRiY!zt#0lU3|#Ir5C9$glT`z0ass!v*=`08w%V{0l<{+N5`
zb_a+XMpSsBRNGO!-`frY#mj{|=S^=-^=~U}d8NO2V7lR|Gb^R>dDA?!pE%{#{&mA#
zaX%?2tU4F=5iRN)8Q!#`_W8`}JJDZ^{F3c7sT18#s9J@Z^%iTM^8TE@vMH5UYv>9;
zaq-Sh3nM;Ld8uyU4!+{}-owlNo<QwMUl}a+5Fb@Zip+DN{?w{^b?Yv&q>hI&LTEe#
zTTR*LEjsT!=al`L#zQ^WKif-OIeJERyH+&5=@n|d?IgxH)w7xYp5}jG(<|m3#Y--4
z${y}b<p-Xa=;$ss-D_w*vo6J}uGx6IiF^0D6|}BL@#@2g*OX#HqbDuvg=A`=56!Y@
zCF&;{b-bS=?a$Vk-j3pqCEm8@+u;68P*-|t(LkK!+~Zbu8tsqJrds8y;+IC#n+>>B
zmGt);*#n~M1FeTlmAg!#y-c+m*D9`EWvbfB)VAT;g==S->Q*v^mRvh=-JEMjnJNdF
zT6?bTxNa;{-AJa;kn09q*O#famZ`Ghx-QoWu4~Iw*ODpJ<hnZ7)nsa`%2ZY1+Jb9y
zt}Dq@o5~a_a$TNl6PenwGF8T0m*Kj!Ou<m5TA%AuTnk(mTgc<_S*Gd}*B`ikFH<Oz
zsea4#8?Il=R29h7=5zg$>*riQlPNrvsea6L9@h_LsvgMH-sAc%*SRv)IWmRYT;JsS
z2G`eQs<LHjuW)^t>q|1#7i9_;xIWMIIhoosGF7L!KFRe7u8+x7AC)N_;rbBQ2W4tS
znW_w~HC*qPDeRM}-oy27uK(nEr%de*nX2tvZ{>Q6OkuN3^+v9L=X$+N)jFBlHC(Ue
zdL`E@WD4mr)yueE%JpKIszoxj3%H)o^=~rOX)=YmT+ik@mFrdVywk3fsp3?x;Nj_f
zUUI6I%UZpR$1mmaoT?=}d@&E_R4tOVdLfTrz~ebp^LhL{9?q%yjfbbn)XwGcoT@oI
zem0L!<?)>AUwQZ}9?q$nDQoo%9zUJObE>BC_^CXcQ#FN${~}X6na6XgCh_<b9zT)C
zbE+rs@bNsHQ>B)*I+@3h<MEuTu{=D9hjXgN$XY#`$B*LioT@|~Ka$6fkg4KSC-Cri
znF6OOPS)yJ9zUGNbE;x^cr*{^R7J^J9m(S(cs!?S7>^&y!#P#qJUmRMb_kE>R1N0w
zp*%i>$8)L&@$g_C&Z!ELwK|Z;2k>}K)j%FUfQNIc`t$I9GPQkqJg2G;kN4;Cy?H#R
zx)%@k<KdhtUs<br^7tM+o>SGGhx_nwPL;Q;)!le}S02x)^5XGbczkD>Do%AL9_}eq
z;M9Hoe}7$|(^@>8>DuS<Vj;gC-R}tLdU&(g{^qWT-Vf>ii1Y>5p*N;)2rfhSGxU20
zS6vq#AK1yOI^C}b+YE$TuB*=4hNsl0`yU}pUwy}Q$irL9eHuvlV+@4*uGb$nYIxzJ
zJH=-k3Xfd%KiA(;^F7_K3W;TeC$9Ewjx3!qpYHzzPh;V^Yxhx)_a|(j`+Xt5too&^
z;gUfs_KvqBJ)^Yhm1~cbTPs$((EX3Fr;N71)%at%N*QCik`|0rg|3rLcP%>ok?xm-
zz_QvmuEDAAa?)zi{j0E`obb+drBQsy<2_Qmb$NA>Yu4vGt<Pn9Q~a3<!UxxO8b!A~
zi=_A&rs|KbhlVbxKk>6vpM{zBlWVSl`mFsbx_`wTv+9ehVPM4E*qu`U8CB61yVjlc
zGA|;I)+YoDlXQV?JmY-ueAUvVznG}>*fdkcl}eG){@1S{lwvdY_{C4?ZcXw26}6?9
zPk6goV+Km~FECZ>vyLOKwt7FW8O7hPq%vT`w?y1|8`+q2Df3(dR(G}i&{pr8k`A#*
zH)I!0y%Yy#N%^xX2bN|}BR}1}YAmJqsj4W$T6ot9u~}$L>E~H$%dmS>V)F|>KF9s6
zU|U^n#2TIQ91@f+)px9h%9w3zzi&zHGt&6R))LCH8*k#qUwZ0B`5V>ImSuCQck~V4
zD(RJqz;bMAm*tnIub0L<ww}U-J#>%R5jfnO(tBCwny^m=<4(T4D)pCB{q*u|NBRAC
z3?EAAvl^%>u=7u|s-`TJ=1*2bp(1PGlW&-O>J7E;c4KWtHu#Oxq3wgD{rgx&Wy*&4
z*1r%nhVHM0oT{m&?B$U5ie=%nej>cJ%r|A0mHe-DnIn~NQQfB!>)2*{g}fg1D85yV
zZIxKM^SSZOm0qNSYMPp{@*841T%6K{^uStyX6$8vq2I|m(s-rS)|#<HZIXSb-Dyej
znROKAENfAvV+E%lQ~N5_RhzTn3wk%Q(wF9Ay?UAEY{k&MWheBPbc~gQ1xxDGs;|{s
zX}k_wr&_Rqduu!la_>y#)vBLw!SWBeHfi7}wYOaZRb^&A-ep<iZqoc+XPaJ`sU1ge
z-lvk%n>P}wu;~l7zxuL6I$kC<4y?jP&h>L*Q}w94PffH{nET5=Dw=(f=64%=)2ht+
zLh!)}f*HkUG>xgshBUP8m*nqC+S4(!D%<2bq}ThRTBNTwbFgIQ-nZMGEt2v#a#CBe
zV4v9rZbcJme~-4vwPfQfYz|$Qg74R1maCPj8cXUoX2Q5eQh!!xonDQ7SyS!dwY}1K
z#=GQKV;u)vx%+vlG=2?~KGoToF_HTd>Pr26r|q`tOkH+F|MOa@ycNu}23zy^(!=Xf
z22%NMF*VqyF|D@Ny)3ooVLNRN_PNH!hs)oXQ2cIpMNRf++k`WUv(oYTYX@~rb|$?3
zh5|cU-x4A`b8E7zZ=y3k&ydEmxRXOI*2&kp)voT6e%vLs7Ry|E{cQh9w7w=}cg?TG
z9O5(Q>)n**|2c1;+N|u|1_w^olG>lpJ-s$t{l&>fwM9CAjp!-VVU0GI9X|4dG{49B
z1=e9*6y|q!9*~Z|>AkgeSci)~QEg_@d{CcnVya+|2dpUl=@RX~daIqYf}K1ztJ8|P
zQoLv%reOK&TD*@uEsgKRrVAA8`gz4dqdU@k%5ylOV4JqDHQP2xYTrf2d<9Fbw{Pzq
zb4kBwrl`v_&()*WSmXPAL2crM_2Ab5X2y?d)BIA~w@}w*1Ev=yJn*3PQgywS>+7<J
zX;!sw>9v3sI=9NM%bNVYwzg)rbbKc`8`Wdm-qjstWpxkZuU^^OxgIO5lbAVbJFWMr
zFS&%(W5MmsuP@a~^EazaYCV>q_n_9j9uzN>YpbotnoYZMbL3b$AE@13^XsuvXH>Qy
zTT1!IGldl^Y_Meho%K?EGgO{d%&B>m6tO&M^*OghE0)l0Y$JnNH2>8W?blneh8eM~
z`oz+DnR<YGwiT<TKf}IDTj}_Y^$@IC>CH<|#j0t3sI?s&tXcE6jxQ$mmCny*o`KdZ
zENQyYk+#x!4e69>&F(z8xuM%@>JLHethHv7oI=yf9g>ds+%9?6toYuT6y;i4zgD;H
zYH7m~`mFI8d5S(C)yukh+OYlO&Fvc9p!1Kqlux1!n>Z??PKN?}(std`ZCL--CP&&-
zZUQaL?~!T4njLE0_fv>8e++zu`fOaEE=hIDm!b4=eh&3n?<4yUJhqkgcYQDa`s{U&
zL(ismlG<C_e+uGjX)79=OY?VrpFQ=Ne#(#&4a}&0f_cBZ`mDT#dqKT{()>5QSh1@3
zVo|e(t4~=UK>WFjIaS0~H-jfd?xpoQq3b2FinvEyy7-Q{EotMdU#o~mYwGn}eUQHI
z6b@$vR1r1Cu1Bh0k<uq!Zdyg$x8CIaxsa|D?{uZOvN+_>cJr&%XuU~za^-wwvDvm-
z!>=!KB)#nF^2*}ypz6ncHnb<*Jv+LxxK}v$!lq4Y(xtAk%A(n$fawk!rTCH8>Qok;
zhS;=xv_`70{`Hp@V%IrK+6<ebqV$)pix#5u?~cW8DeXun-}u!+bUcz!rQK-@(hYA0
zSco(CZz<R3W03~>!p)`@;_JDyRyC>PLh*^Wip|9f_LnCPJY+|@*6s7=;_LD0FLzz0
z^(JB3?XBiw8L=R1X?7>lb~(xB;!bmy0d2i$Jw`Z}<83ZljSLui?N_P(sN6c{;+oXS
zwv9a$6mN3prI~2=q}RBlfLf&2-x1Bkr?uLRJrdwXy8Yc>&BQKsZ?2!wM{3W_y8&jR
zMa33ZUzv5J`1pHG&BQzHKg{~YTB<MmUPUu8|Gm|V;?15EA9+8gk~q)qS=rq2Qvd5c
z*jh>4-fQ8@TTxQ~%zcntN$l=tI`D10RG;-j?@D4N^WCKnrxZ|s?08tGl6W}dc~1Bl
zDZlE`OH;AS@6Ioh+BBo`&pZ-MMb$yu&jxN%fA-4z)l~d#?Uk0*t4i}>dtS7uc((MD
zP3gYUc(s1aOvU;M4?k?*Zcq8e#}!RQ{c#;W#kol7CufNj#ZwiGpBt|0Oz|@=2UHYi
z-S#Sfwv*JqsaJ|Ch;0w3COTA+=3na7<rT!W)|2f&cl=20osrEdh+`)=?{Vr^X?=6@
zwVd)|-6VS_i}UX(zR~sN<;C1xDPt#0k>YFLVCBV*^@c{4b;a`w_`=|3j)^$AQO?0F
zbG%7^x|wVuI+RzebXhLxyjyil#N~@OH|sK0N}qXKEGKpkJaRGHP-_3qoPcs-<#mdz
za(&$?|GeDdvSP&zxh?h5r1{(Ej#yUQKY44x+HD;uzVzLIvZ9f1^HVDeyO7SkTWl=O
z?P|aM%1UWGcimfVEUJoj2Yfyzjn}mM%vh}AxTJrW-vino{|7ln;^9Xtb7DS8<5T}(
zvXMCHc;`Ly6Q%vje^|#zyn1odvFht;Qu(_cVYVjb)@mAN(u%ZmUUC`HYw7V311vpA
zf5@v-MqJoy!7Y>hQvN-U#nPhQAMHwOM@a3DeG*Vwd^Bjqn}^$_`WihgHWcTzsBdI>
zP&)o{pDs5PhhH#zpL0RVKj#@U6kV#%?y+T!bUsl%&oK~h&RT9=(U8`&g=f!`4a5pv
z=G-cEp#kasFPMQiKJ)i6zXePCU+QI!zL;KM?Xh`;G=J8<Ox71WJs#;iyN8s%Lw+57
zv13ud&>c-0QvSR7VkvP;<Dt*mU6=Yl=~X}}v0UIV!~5f<`E6EEtS8zuh+SvWPHOMk
zg5`RmvBo!TZ*^(^OTP}#6Dye=`%tQ*G~V-G7YpJ&tJ>k>87nGZQMg<X+f2JXFnhOj
ze625Jg4ohFu=D#gX}<P<A{J-t@@#jYcI6h7KJaPrmyE#MPxsk7O6Rx!&)AoY?(26L
zRS>22`94qnoN-Ip%RTp_)F19I#7`Mr&+i!K;wK&7_g}D285Wh7HEHliDJt*8%jAz4
zd%}LZde%>xKkM_w4;g+7R~|dDKsr8BUKPL3h)?}RUzI1-?_a>)XIQ@e?YH#v()_f3
zom`YLId|%yE3c*UpS>2}WsJ(XP`>E`sed;W7Qf9nUM9ZWRbOd*!``sB8IP;E)jr)&
z>Yv;<;+u@o54H_DzrGu_C+%%<VaAxr?=RT>Lf^Lt%6F_VqvK>NHLE1GFZW&Y>x{Ky
z?M7aEENOL-Sdd{da(l|bq0;zSzAt{2(fxj6ahcjxDgXNS>{Z6w15+Bo=n!eA56Sr%
z>+e6FZv3GM>6kakFEhs7%<$`@kowE=ZSsqZtiu;hFWN2bkLkPOXBiVFEiR7PBhBxk
zcgasPB5ygHesq+|%PcB>oY7$Aw6zZ-rS_-4PtMC&`0)Oc{Oi(u2>Vd{Fr&-k7kwPG
z()msCG5JBpndQTeWIm}w^`H1yd@p13h{x>)hf2qT!>8iA88+2+ENymN+P@Q@lJ8`k
zTT|6z<1*><E&W4rPR7;1HEk>8NS_z!AB%5hoc>tJqis@IDo_2X_*zCnj(OK9>N2EN
zpNp?#EZoxi{wl3B|MNc=U&_!s_hEnQgDs`>Uy3s`hE-LTeV8bXhw!ENbVk9%_QQR9
zNarK<m*V3Y`-|>Qx)UPxhoZRnV8&Xrj@jBF(*D8z{qBr_u*~u{hEjXf#l`C~Oe)Ok
z+4E27{DLNY-Ky;QBRDJh2z${xWZv4tqg)5=oZhIT&!1u$x9|?_?XQS(%CFBCv}pcu
zL)$9(Z1>qciy8(kRtBj@x-M#x&juLv>p3xXxMosvR9@xw`7G+>$Z9oLrE20QRlc;X
zPd*FXnXvk9+)U-|x3?M&i^*s8mD}&;%$}h+u{gof;}`tyLCTIU8IyyQ6JH-Y<+?1N
zwFq*wO!S<stT^?3g#VxUtZdND&h~2;DBpFAZ9L~pJ{#_Rx5~}hsmhfXE;W00FQ4@o
zbF@KK7nQQcr7v3tf6QlN4s<*6eDN?%_kL!XdgiZK>&5P^O^?pgoN<iM9%%H69bXgi
zhsB@WHMw>hwk&G*iY;sTYLVD<uBQ8}H76GIeZ`D7zSuidH9<M1`&i|k*jFrJ+SR>o
zspB<IX3lVaKkXG8R&o9XE7RGUgwxSa`>lG#?uT_6<JE7LGONEqO78wwtjt^c7L$7}
z)cn3T%<-43S4<hQQi#%9rmS`CQ$3&Ouh{h6V@fT^nXS1pBX~-i(giFnrStfN<1>}>
zZjPPZsZIfVz9ubg+=dBC=ir2>(ar@d*6{eQaoZLu+1ef6=eifL)rEx_eg~&1ZzbIg
z^%z#bu02*QY<^&Za{Qn-cXCn+*x2%HhKtuC&7IqI-Yi{K!2HZMZ_P8CtW3RjJu`Vv
z0b5nw`O3|*ZklrX_t#FkSirK}ZuoXAm8$I3)OEwwX9aAc)n$*0r-myl?{+NvrSxld
ze}d!1p@ox`j@e$HV(PwTNd}g)9xa)sEUpr=!$|p>t?AP;rEY_{%2&(h1RU-4n%Q>f
z*8fHS>6+6UTw1Lg{u<ZQ?ZhW8^E89A4I{VAc+E5h3zai}Tc&xp{DISrb+6goH$hig
z-cQgxSZ{vV?(l1NxZ!|SMa9cB^_<MS*4}>2_Akq?WPE*^vZi{Ifyal}?DhLz@2xWD
zYZ}?Vt6R28AxoU&P&54XK+XL1KG)tj7P1AS0`A>9K3-!tH7L-iTOm8IerYgzv8S@P
zQ0uwd&_Xt1TF8YiX-kxu%7cHdoLtEAgHv~{IvA(Ced%g`qg92hSH^|c!KW808#HQp
z`MOxh?zVfjb$<J?%JR29FWhmnkTp*ns=4uOfpT4wr6YE{FJ$+6_qk~NN1CSH;PWf5
zS9!x;%smi3X~eIZ3EoS4HFkQ#HYvB)${4NIRGc&5)aveU*rEr|UoHuoskz?Z&z2pd
z5kI$<UX%R`m7kB#&oZ0&hCQmasNbF6CMX;FdfqCt5%C>67~+@PmAgCinO6Vg8@6(C
z`1l%KluFOKn=3~@dcy`hR6D$1yI5&_bHv^|hHqKN+r1XIyE|7i$<JlmIP14;-cHrH
zgA?a!6o=0^b!h*VHJiFLLFqX|V^hy>f^+a&*1Tq)UyOGx*2Hb_%JLikmW8;!bKl||
zs65*ydGNCIx6ChOhq=?O#TxN?xdb!qTV_(Ocu23Qv6`mULzO#n-m>4PD8pPbhG|mL
zy1yS={Fc3~FxjS}a*8HC;8|Wmop)^E=qZysMvd3Rk6+`th`nQNE{8^3Tc4^qIiy{$
zrvdNSrAWu#eXLV8Y`|^raP>RZq)Mr>dj>C1{-XCZ&SJ$o)^wr4i;<O6G|dh==siF9
zj$Q6r<${;la%FJ0^DSTBeaFU)s=Tk%fEcA&bywd821TsV{K(+RNpm#j=e!n9wJBm(
zn^n%L<+W6^`M6bw>K%*N$Fpv$Qm#zVJfGvf_*z&I+xIqWanZ5mnuUX>T{}Llh`Ick
z^!iZRLgkJ0M(rMKDq{7!Oz!pS@jT@W_dlyNJ72_pzxTM=z{@e3mLn@K-14f3Ma;jq
z()`RM<+0+~<@#B?XI3`;_M@&W)jT+Qc3Z1f@7exwe~v#MFho<a$BEPKec!Xz`D^AS
zbs3@Y>2`bhgt6~g=A;@){VbPi_LVsm^D6y4YxeNm>;rMLHL3ZlCd@wao@Epa-_{{1
zNr`*zYJ>9Lvna2JiKna+m7xy?j2Ue5fi=5ab3ms)b2ZKFIzL<N@PTb?d2?)khk42Y
zHm*DL{XVceZZmI0HC?Ll|HHw2*{Bcf*r21Q#+_cQ6hDvh8@B8NbNu|S!pRS*%F(Yc
ziNg+mV3`q*PC3o_RkQh0--XNbKCtm;1~{EvF<&`&*UW}xDtu(t_tjo+ZZFn+tn9sK
zW%G}$%+(Z!f$Ct5OP>cbWBYt$_agW0&l$c%({bR(f)U9dnad{Mao+w3n$D$HIBZ+<
zk=Zx&t#IknGR?(<T~ceG`N&e1*^SO@J3(n&`)a>K1s_@Ll40!B=Vh8DJto~+T<sIP
z<>@mu)O5UZbY^kDM%5=)_SnSSRvwF$T`u&te>LP2jxW#Ru2beH|9n(BE%Mh-%)P(b
zQ?qHfGCcL=O~vj{>_(@@7f$OZC_fw?;8!l^6N_Csp=X=ynVO`jWjfoH`OKD#9@V~;
zW{IX?YI&nynto;@CoLU5#&fCWm(?F{TKa!xrCas8TI%@(<${SPtK3t6W_dZ!rys06
zTQjNI4gH53KC@<jMurPkOO$~-^<LM#^qC#9%unoneU36<@tEfGKYeEXx>$OjT{BzL
zaK#&o4)wpVc^0F`H`p~_^OjA2WbgBZ{d#7Ddg`)?%86dbKXxDeh25EHa;o0tIm+v)
zt5<Ga{e{i7T~gI*$uiBWA+zi}&wpVvHdosDdhQZUgT6s8YJB*@w(VLyx$yW><@|la
zS~a#QX6<K{7uT$qt5kVJ^&8<+%%-i#w!3p_q0%B_$>z^vikWeX(wS!amuj+8myJKT
zu9(%HyXJLI&tH_UhX305(4}JbXjJID_@}{2`h{EitrI`|h6UN@(EWDP*DDC}>8=m*
zS#tw9M#pc{;dhVAd><ldwJuct?Vj&`A4z*de!dYjm44;u*LFH0AFgktUni28xZKCw
z{Sx#4!>o?uOM1Rd-sEz>{?~=e{M!C+!*$A`z3kI5znJGs){{K>fARgf`Nu4#wotVl
z-!Q~@u94O+rNvP7NgM6O7V~bF8v2R7TWC3M`Nk@$7TZVOEEruN8oAkv5u^Lc`=_h!
z8{RLwUO$P|c-P&|*^t&}Z|_>#dpa|8`1r+m7}l56^KNg6Nn^F{%r;5<)Ee=wv+S=g
zV%1}!@SYCV@3ej1Wp7SruuWmyy-^Ls4?6bl!z#w!jDHo}(g^V{`_!(wj@|G*&#E7w
z^}*w%QeA&%lP_hS=zXznTS0Z$u6eV~td9G&q8p=;KmAHfCEIOmgwIyn>93&!Up=d{
zWIN09>sg!SqJ7%X&owIl!G0Su!$5tv72=Po8_eCwUatv0yXi<%wD<AAIKy3R`Pda!
z=MPs!d7WpD9JZT{j!HMn)31sA_q&z5vWHFZ>UQRVfc;Tf*W1~AA8XNjh*QiftiP$(
z`R@8{KRe!Sg!RA*4e|cf<5KmXXxQn~_7fUjc&ZfABM$Ctm%$!)o%y=r0~^#obi3h9
zk*yoKd*zy0joJzd<<Z5FTITWL&WoAj>HCe_n_SBuWLxqlp7xklyRDEJUzzPW$g+y(
zzN%JE58B)COZP)eJJMEVyy=Tl$Stht@a_<E8&tjg@iz{5A8J&^n6$$zB)0k}_89Xm
zeP_@3hDVrF7tK-QbJQPSK3JbR!n%h&Y}a04kN263%@Tr-GP|n3|M4sb`GvRDs}~$)
z=0UD@HC{64)G8}y9%Gpc=Y49DM&HNSM))g^v$MXc;Pr~OsIO-6Z#$2(qs?cBHPOTV
zrJozTlAU17t$vw&@R$PcKlL)HaOMQdNk6}0=RNdS=A)N6eNM6mxy7SPDXh_+iyiAc
zKFJi;1rZgRV}7Xgr>~AW#gh9q-n;2(bL8)FbhmJt#r+=Q6<&z?V%{e`oN}7QrYF|3
zDn@^)?DyR(eTF3+@H<=iH1%IZ*3#K$SnQ^UX&rV|!256JK_4rfW##5=nSH~lI^Jjc
zys^*nvn(#+s>W&z+7~#kN82jr*!{Wo1>sAv{+eFuW|Kwd*e|cfr@ncL_|&u!{&mhX
zA+_q0r(4UQ{u_1F3(vE#c?Ivr#?{0A7<=?9o5_-GdRp}xhW^g`*h=l0$&Q)r-8*+E
z=HvRhy&QkZWLsW~W3LCHeS3!18h$L3;ksdF=f~LJ^%u`xE6!x<rLW#rXo2~jcqpT(
z>H?d-uU<Qa675M1uQq@51-7uiUENUynE(Ep97g|nfsIQk4t70{{@CME`9}T)mQ%sR
z%HF>L-tTJXU7`L(_P)+)ThnosQC_9B!NC`qSv3>;>f6lP3fb+o!xvm+qgpN76yCZq
z=5M(X2QOb_qEW?++fQ6DANH^N!{iccmc6Um!Z|pee|G*VasHD|4c+<qkTXB;x^(`~
zF;^{X9kq32tz&w|H7UK0>H)IW(MMm_Ix03~OX+pY^^>)Zw#8SacpU?`%38+-0kYOH
zv!bkZR3E+~<=1ijXj$u+=_qR*W1d}>((7otPS!fwhRRw;m6fb@%)Fl^<<~KAt*mtn
z8zyTVi<-z<$HX_6r2IOn_sLpEVWO;cEb1m}9TTha{G2iOF3S7EnY%;QI%bcPwT_<M
zWUb?#TC&zL9rKgsiH=ha%UZ{nd9v2gKU~&2?qRalF&*!-O6741k258$WA-6g>*%~t
z);gNT$y&#lPO{cfTVK{XE)Zm`WA09z53uQ|j+V8Kibk^5QG5TKlwQZc<+9dM=qqa-
zQ)|dtM~5qCrTjW-=gV40pFXnIF}J#`bqu_BM#`^a{%Tq47!xUL9fhW{)=~ZLw3J^*
zyn-QVqF>aosOXVViqOPC_@(x6{OUZO5DyAbL_`k?iU?Ii(a)j|4vL5)8$<E2_(6JX
zE($>ikB*Cv4Gkg_YJd3^a*!f4Hdgx0Or!}24vGtPaY2c};qi*NP|29Z*YLqX;SpaW
zzJ`ZJ5B?e~*w{BCQ)Yq(mFuGD6g7f=c2!qfOl<Us@Q_d#CHpRZu=G2zim&kj(FyVP
z@rhC!Vqv^%fTC_&MUPPItygGNKj#5dhbLrctP~(nfRv_FlpFy4S916x;{rlL2SrE5
z#D>Pj$$Rah=qCs^FwErzqi|kmQv?_RhI(Kj(g%I@wejImLliO5ap6+0qw7e=M@OUU
zqlO4VUFqjyh13y(Y2XaORJ&R*%~Z%?>C*+%++}!6>!@G~Ba^0RilF)hX7J|-rrYYt
zT0j~Hq|xQc9gFap2;2HKO@5MKnvSwlc^Qh)@I&j$bQmR=s-YctnSoQ_pDUOqt%mKz
zc)6Z1svH~HBFo+g8<{-Z2-;yiY-vJ!_3h^CsGwgDrjEiKQ}B`UiwX+HB#Vz$1Vzw<
ziw{)<Ck!5p{*MfejE*H6PXA5bknlm&mqD?k{)7A;Q6ZQbq4*`?gxJuCQ3_1=2uvcm
zKKH+dm0H_7C^ia%<Dx(wyXe7oe3}oAPCywW!{fsgAwls$iips`@juP~-MkEwr&wJ0
z5d45IDtA%XB>t;>eo?wP78;@$6qXP*Oc578I#fDjLqjm}5@SLK#UqYF(PjU-tbfzv
zKimJm+CL~dDlR-OJ~Rr4vUKzV7_@&==il@+zKHVa;nB0F;@i&t`>7$-r5o9Ql~;Fy
zpi%jHx`+sk8WJx}*Z)3m^x(n#-1T4N#e5nP6ruRf^8Q^XB}&IkKo|~-0Npg8{tj~K
zKPV__P-yI^=;)~a;X{M_N5<Ld67-LY9n}A4Iqe6<(1D80CeFns#Kk7gwxNr{Up|3(
zqK?R*sGl9Eouc9p89peShF(5IVdS)A4PQ@$0n!wuI{v#hel6i^E5B=}JYRI}{OP>;
zcI>~NVDMQLq6m$OP8brVz(-4*0-p|wxKWY8(Gl2_|7|_GTID&Wh{FLHJ~%uyr0lo-
z{9m_USFSvVsG;AC+kaHv&qnTlQjYwgD<4ze_iJK&Y>*;&6wcq&t#U6&-TFUh@4u)g
zeq^*%i#&QItNDMn9-P@@|E8k<zW@Kl{@5gZor_<Gn5N_Za(_B~bM8^t+QitQE~UaI
zrs3Znw^Fs=*8A;w;a?ta?$Wu|i!OxX!*CL@2~mVc#U$Wtfmspv-Er_=ms@ha#YIPq
z2vz7#0)wJMsCd3PsNhiqq?c-^3!(M2l8(Yjmx9xWBiqF#-8YFTA*}_LaD2rtSx2NO
zvE{qT;Z!1R(xn-B)b#JG&OI#aT)qyNPs}eae%VoGMKWEBEzrYAE`nNuEnh+Fp!Azl
z0xqzMVc3_EG2tJ!|GR%5-q~n+f7+$;aCsOght2we!(tjOJbc3A$Od)EExn}pFa2Se
zuo1jTwlCl0;CH_y&wKvAEb?C_PrruWgkK@suczW^I89c<t}xu{b+Bi@7PjZt$nlg`
z-gBCY#l=*x3Qm`wG;K$a&IkErCC~3b=m<Cml&4Fh+nthSmCQ%!a#7Zj@5<T)y{AN3
zl;&q;mCPr#<+{FUUWu}3Uy7iOR()HZfOK?B(pIu<CG%380_mKQm;AI*d7jYz-<3z{
zepX(|yp&&sbW=){NBgt@I-Q46Jf)+pWV=e{p*Vk}%Pdh2wJR4oAFkvWP`aPBt7Kj(
zPmOd6+-H%WHp=4wt%TE!C#Ct>7?jLMbE}Y#Kb1pU%5B)H#=RN&>4KQjY`dv%dLL!4
zrt&wy#yIAmuAcihem(~kxZk5P=w6S?utmA*-{mlBmm%CI%x6H_NC%=VX}5k}o<HjL
zMBLB%#}ef@pzQCD4_>qkwDTEnlP)|2Z89p+25MJoi8R!vuo9Z$PtZP~te^EQmH&PJ
zIN{u3f&ToyZ87LmY6tbrH**Jl>xJ?uoVJp2iHJ+%`KVuMqjV}bHR`6ZgIC&0=F^R*
zE{^(<`fLiuG6rokz&<%3zr}ZRfznT*e&ge&%THrY<Li#L{H!06P__x`(4{Zg79-@d
z=KDbLCF8=de}x$5ziSU2H#?C=S1#!pCB~1!Gf{5@!gTXfmzJ20V<H=I|EImL0jsJ?
z_uqWjpjm@OiG_74M#%{G_xITc0~L$(sF+kvf^ZZHk@!$jGb$@;u&BtWtgxuaoT7$|
zDW}NDm`RJuDN@I%s7pl?l~YuX-QT;<*?7(ov6=h)|IfYmx%=^ToxMKa^{#ilUwiG%
zaC4?U4**A}9r0Tt=oE`_8$h2NtS6N@X$)vS6i-H@O*5_g5PQbyoA|2@_zcA#ouGLw
zAe?WaK|8{cu3*~L1omtR@`)#ihlpQj{f1hj;5DUk6L`=b9jfo(eM^1!qArrbtDWQ#
za3%T<#kWNB%|py(Yk=Pzo~90i=R`bBd4wO~RUdRu<BY~y1g{D0=b_dje2;GcKF<C_
zHz8wI2l$J|r1fdXJ;}eJ=0!4*+B+BVHSsXfV<?&vji@e_QGYuEYeso=^`ZT)F!@US
z?97SkP&+Sxc%1I(qVfYo|0ArQH^8%YW&B5bllEac#%~JZb*J1#yaPO(dm1wv<CUY`
zQ2Y^xx`g{sWi+1!fxbG>?@)By6+}mxOAhAJiZ%{^ICv1<x`A_V7~QDPTJ#aj>(qww
zQvt;5!E_AfF{0xD)@(SrL*vGSPGo!GClkIW9sVVm9Nf3Vztn~<n!hvGc-#|yr0+<#
zQ8`^S{{hTBGi-f^k_C2yz<;#%w9d44L($k-PlxxCG3Q3qb@~X#J2S9etG;5Gllrk9
z;AZyB2xjAi2xijLk&G8m0%!nq0hnhZnF>GypbNnKA(CMM1%M_%Ctv`O)Dp?$0Ga{J
zvyqGn$N^LXngM-)*ez%a$Ob$J=mZP^JkOzjKqsIdaBOQNlLD9xC<5FDn4XrENp4jq
zCY4g|t1M5<r$48`bRsXd0rl;?rSuqs>28i>cHw-8Kd+K$L3=Oq{r6YpQyr!)l1T=^
zQVJ=ukw|~)gMklVuUiVs<}F4jo^|fi=42&ir%j<cBJvWDrug&HD9?*L;*UTc{rMjz
zJGAX3l(!%xZ-(7p4)Wqq=5IU0?yo$wp53-GB+qNNU5&g$<9h99C2K?LWmCoK&^)`p
znvlFKyT4lGft&$cvg~>d$jj(PUMbND`e9=fQxCt}f1g;2>I{4+rkUE=brQ=e{Z(!M
zjr_Pk{>qgr^A~}vOnh^cpU$P_d5JTo*kdPz<XvKq?F!Dz^4CiY$@AAsLSEAe7{?ws
zv667=+!n=bfY3_u`H?Bw9_6RAf4zCCQx%#=e^!R6LtYSHh?Lj%S`>2$6h?qo=+E|G
zfGDP6B=Q1tg}=sRQysboSqAn+F*R^jQx=u^KkVKg#pIw_N-1Kri7ZE5<RGsqVldCf
ziSmQ5Ge_Jx4y?>%HXqv0!R2Uf%O&tUEgjQ~l=8ks3eqzNk%A1&$fqN1*%617bl>Sn
zsc-x|;zjkS4)wF+DC5_nKkBGH&@bV@JUu+lok4Yzk5HFzAo<nxjX$VD_|V_G$~i)P
zd)z=9*E4>c&Oz$rQ<{!@qRFg4`6Wnc9A6+^8c1nO$`4L)Yu^(d)K||icsO`Fbz`47
z3Oz6`)jbCNny5?t7lpN<JnGl=hsan;laNv#T~12*gfr<1N@@KFXwFop3Vo&`b*{S<
z#vT{!%yb0CZ5d)*q6GorNBzY9A<D+V8^9$yfD4UD<vC&Z$T|#1;%%y*N`--IvUUic
zY>YvDr6YC9DW$w{d>R7y)CTaW4;#NB?B3~zQio<k;q$ic$A`w;6@~}3rHjg_kA95d
ztT)pVinCoYsIIHUUzgS?`6zXXM%2F-Z76l_vvE)T(wL+RDu?NZ>IJv04eP5O_rxRA
zH>C|>_f5EW#_9eS#_0|lr#GzM{;>Ojz&M0M`m@8+(4hnS>>;`kj?}j5C~d2P+R*w@
zU(}ZN%2u?cyd7bEIO~ieo0gP17nKooqfM%liS&h>L;MrBW%&7Y0w=<Ocsundb)C7>
zP{Hf!+*3+@5r5VE!oHk7y;}~aXXjD+s6rbWvpSI8jg-bGc`^DqKRr#PRL8j-dbS0|
z>p)6*bUCRrw<F0jFZxWiTloJQU*M-V@xa=!@tkVTxXyh01LHe9KyBNO($@8yf4)h9
zR6**@_rOuw<^<XlASGN@ASJ%54dl~3;aZQ>>C@Zlr(qRRDswJpE^VkwwCX_W(9TJZ
zM#DPvnd)?i^t#eRd!ZvRZr2gUrDoKBP;-0jXzaeQers?pgzC;{_0Nmy90=>z>4(aw
z?u4MaNq-ETdvIO)U2=loPRK_+qGt)x1>5|8lagZPREPScl<bI+Z~E&~T$}QO%a#Yq
zoIYF87x6_0(i#BuOKlj$1Skn^YlgMmA7~r>d}v$O5N&Tq+k*idI|He6fBpx4e4YDU
zVdcArDSxh;iG3G9xH|2-g4*|d%*1{VpmJx<n}ILQc`H(fmQ+shY)a95kd_&}hwu*W
z_ouI!SRS&K>O13x&+GfsBkb}gk+uSydW}K&QTyXh^ViEB9}&9<kV=_>s~KeuK2GYC
z5ib#Bynw%F8IbYW_)U2QNS%6=Ql2w@FrH&hiikZ4Ky{q*;Ca4?vTcEKhkkwNoA_`5
zslzW-L(pzzLTJC?>-v6DXn8PRgwG9Uhn5H9Mdiw*(DIfry1pM)9zK5ZIic;t$A9PC
z(DLy11u3EB;q7x~g_Z~7e;3N`2`dlp|FPMj?ZeBfvW738Gk^H<GcFyz{DB3-mv6}(
zzWm@-q2<Bz|8{jmY}D09E~oWnQHN58FT>|QaqaNs?_NKAdG-3?%S-MazWlunq2=N0
z|L`NB<>C0}HHDT3(}(7L#qWnNU-IPe<vWhjer#C#aQwb}arpjkK1z97Sb2E=U%eID
ze>nYSzdw9=+fm9Z{vO)CBTPP=`K@2J-V~&ZTiQb9CanWq!SZu!SU;~v`R$q`@#(b@
z!<T=Q6j~n62WKUQmbZtEKZy%152xew$-|d_B88TRuhR|bq2<B&oqb<qtO+0*Ir^b8
zU_;PzH_8XPwmzkpU{!)Y{?Lp%qXBh*RDh#L=vifO8?t9yaeh7PJTG+mqcZ$qZCe)w
z_u=4?gnp?ndd@<r(~j`y1Rj*v5T>`Nj181gxzi@4J<8^R(~(CofLL7lD^W~8fc{uF
z&LlH9%go^1F}|XXK5*a{XN(z~U8eKQboQBH&q5xc6F`5^yB29J(oTREz~CO|ni-sj
zW^i_y!Fgr|XO<b9b7pWpn!&kg24|KToP}m^KAOovSt{_F1IPuG0;&La03HGS0q`oI
z3-Ar#AYk;XQOsDt1b_^f0`LNI04o4D0qy}b0bT&S3Fra*1UMCO#7O`*U^akuMI=LU
z&k=~9{0ec~k<2LOSlFP)F~{R1QY<ruIe|G5G0KyelbNwhJTs0tg*g?m=JCvF%!PA<
zPEn`i7Zou$`MEIU96D39vbdZ(bXL@Vd+2awpgiBVxQLGKI>q+gLSJ!ySWaPaVR;~{
zusFC$;4Y|%lM~crX>R2pCcgZI_5o#J>zq>!Jwflk^N(Rq=@3pqw|4Kicd$A1(?%ue
z)~PuZ5`m+ugNOv~gUB?P<3}j;)*dP>%N{O}7kXSbIP>rk?7G9?=u9-wi$i5vs<5nJ
z42J5EV%p9%dMAFjkwtp=MRD#<z^8zNfRj6-m=u5oSPZBHtOeWwXaH;iv;(>Tp96jb
zjQVpF;{vdN^8i_Z9KdS8y?`eH+W`9j1AycI62&9}bihnN4xk9I2CyE`2-pH>2kZv)
z1DMwl%LgO^cz^|%1Go%O45$Ls0PY2B0<;0%1$+ef2EgpV-Uhe;EZ{sqCLkMdIbbzl
zJ)jw|4e&Og8_)+h0H7;3a=NcPGq<eVKDQ3LYs7rKjFMK6Tbi}(!iu8u!t-$ck>Mhy
z7MJ@<(@OEO2VOLoi}U*St2Td%%Jk(f_Z^lW8<FlS@|7P}z>k<4GTOqZ8Q7nNcpYYC
zc-<+*`EyGOi_`FuLOFBOh`D%AA+I27Sylm^gvLkHMr0M0O`*3gAT#MVrg2ej5nk}w
zNOu^<fA=8WO)K^Jn9pdYbFaej|D{=lOMO$yrWF?X=oeE-B^NHsuPE|m<QC@_`Q|gs
zla%KzU6wZ`KcC+Ez-P`t13IngT~<i6U`Aq&!S`Q94bm%XnL|W8I>=1BFt=o`{dx@g
z_1W~cUrw4)ym%RM-m~$t%d@U3p|M|%z}RVCDrbH_VqP)MqXMb?sm?1-K%5X@mJ&6O
zSUi^cO{*v^#hG`S2u-49M3%2~X(8U*@Htt`jZrho0yoP_r}^wxI=q-NnlTqf&#u4`
zeXp<7ei;ep_3ib*;PHp|J|mw=2+H-Z6f&8-pjDomi5D>FB_-w>jGOLTRIy}<uhbc@
z(@%@s((;NDKY8AXo>N{luXsfv#KofMIk|;pzCk+RsRDWiDZm9+`0}R}Rg@Lj{WDKQ
z(2{2sE-J;#G|VeenagtV`mTL9wGtG*EMjV9;UHC3(5S)dZ`Ub5luMj46K|5CWhUj)
z{amo@)Jo<oS_8Tdum!T1xBauo_cIg2%yin&`Z80aF#Qrg>pmD^BTenkvtJwnpPg{b
zd~7ox<uRYzoPf7hmKFKZyofLb-2-7C!_2UIvl*PZkx46BRu<r4W*z8@Jy4jRX>%KM
zLKHBcSLQ2C_btxF&dyAmk&eIi0<NxD>faXrie;E(Sv0*TW~0EA*uT^KNDu|=5$E{)
zGpLA|hNZE`Wmeh0rxli#*%Yy<SYzkS#Di|?Z9elm2dgyNO1VpX%ri8nDKxvgiB7Yo
zUP!;+_0M!EUg*He75k<z?}g>eXB4VGwRm}9>9XRbU|0VpBm6hn>pxUc3$+QbJFNpg
z=SeF#w|sE5UT4xEV*Cp*pP6aTmKGcK8`Z>%F0&T<DKo~uQiG(qVCtNiQ!@qLHf#=8
zOaCi#$W|slDQ#KFRi%YX3d&tcd1vF$yvv(%eu~Rmlv{!Ao$M+q%<~nO;T<oOq!$)n
zQL%JIZmBQXm06yj;+m3~>6$ZRdPde<7hb5EI_ILP=_y1kIu=j;KRxcH^qHTgzEDx`
z_sOWtxv1RvO{ohpvEcjQ-x03hyI=l0676V?|LPT)=zm`MOWJLC3+MJeJvv+yxEfGD
zAN7v}87L<r60ko<#`4kdz3`i!tqpB8p&;lAr)w26YSiFs3aCfrBKmabLSs0;os_x@
z{vFgk)A6?7KXdZ_tM^VnG;im3a|F&<M&WE++@U<D%t>Q_N5QVB*fb~Oe|Q>klq)jq
ziV9rLw4Hc{bMKv-<^24&Qg8Zyt$p`9I4_3v`L_oDMU7&Qc=?;Vj(Gi|?*H3Y%3YKP
zXL?CN;pJBpEiGPFawXJv#qt%ES0SoF*Oc?p(x*<Fo-yP63o<X9Im<hH&fKhd7tPPU
z*go6juk*j*|0A+NfcK8b2Cn}Nvmczp|8RDQh>Ru`$27vd&AINX>&^&F?9mVWKQ=z%
zPp^Hj`vCn)T~lSJO{o9!!@D1L`HK(x|JsB8tkgjI>@Tc8B~X70>c9C=&qJp$pFGt2
z5I(XHb`AEwW~1F=_6U3keD`I$UChGWm+$7oYBS8W?{w|!{()h*HBL)^m2ml;zuzCH
zP4P^*Xdw*z!lfmtaF_6HjMTF7{M1xx6<h~jx>$%W2`tMC6bF~#TW5uN3w`tzi^0Yr
z<@Ouup%sG5@%f5{%N8#z%`ILsIC^k-Iou<Pi!B3M!TB~$rKP!7EiCq}Sm=Lk)<Gb=
zp3iZThrpk{)`9O8q&nZ}7^)9XBEI;6SuTdRf)~Y8)8}~-^AHVLh&P1s+I4EWzmd~4
z1kX~0DiBWyAwV#G=m}0w-tzL)^z?ZPFI;4Q5THCY)#)s>t{;!W#r`i991W4+w!_WO
zUcH6%sfs1|K!r1MC=UQnS_)^bA#*IV11KR=3@H!H(Ee_U(|a&(3#aAg`N~6zL)tH#
z?ko0{I&5}0qCtJlTbNc_ZnH$b9c*%j3+d03xNyd@vPG#GfzqJ%7ddOa?BAfVClPLQ
zNkwrU7SkDcsJ{KHcXUn)Zc7;3pQrGX`7j~`)tzUrR46&a<{#jrU&cm5w_OIl{}=Yb
zVp`%bDHDYAA-ew?I4$&tDnb}AxbNZizrAJ)@ltncI&cWk7)!Gd;g-_ea!9pdXXz}n
zU(o*F|3gq90?&JJE*_7tLJR4c5&Y00@<&GFEDOr$4EfbVIE$vIa%qukxv!MIyW^h7
zrLYt684O4ne9*={abDK6bJdA12-4#GTzq%P=bm_#uWX{nI&PGiTUO><x(Hv!K?lWU
z?uiwp#d=v@0lt`1cJ9)`ywYW5%NCc@Cr9+$vZX1@xrr{snhF>D%E~Va9t~Z&TqZsp
zRaQ<B$v|&s9;G+oOuHRgmih835YM|RaF3i)-<1^@#h33bEnE&Yv&2_6SQuP9wGvG!
z&YtO8?kmDqDe%90Vs05es<G?}U+F|wMd6e@3hTNj+F!Vu=$bs(k2(3sqnMLJa55(k
zP7ck@$qwCc6S{~)-@!U=LP-RBEPE>JVkfbwY!;i%E@DgAmF!x!mfgTMu`TS2>{smR
zTsn6tcP%%IU&L4N>-k6dvjthWNXQc=iy2~(xJ`Ul{776SKPKlZg-WrqPWhwqXXQzC
zqxOL|UcXeoR&UV1(?=Lr8@<Li#`nfJGtIonTx#BFK5G8S{Mh`?oZuGRv)q4l?{p8i
z$6GV4ZPsm`mpvbQfS}9&uJAN=F1w7qgZ({w8W+v4<3Hk$7c8MzctB_odW3I<L{Shg
z6U)U$@eg8;_^o)dlqAiU9+S38A4*wrm3)elq5NK9RY{$pE>VlrD)lb)e)So(LyggN
z&8HEQBdp5Y$lb-=El!X{Ia9tyepl|5A6F)*s+y*4*SfS%^~;TE)*P$IT5mO4+pSM5
z#xu>6<yr2z%hT*(QvJA2U<KC8Ud}$sKEr;;MsY4q=azG8x%;?d_!Ifb{9?Y8zm<QS
zf0ys!rwQ|f-NHA*G;yA|Q~awa%Twh)$*;<j)C<*3>P~f%cD}Yr`-?U~m-H>>Hghb|
z#B1+KW*vJMJA<3U^>H@}cL}mORlQejR6lip@7`j)YVEUfJU4pQQ~eyA<3uuzy@=h)
zzRP~fj^f5}9B{gxJC)b?Yq6${{PX-pLV@tO_=31k{8;=!WTa!HW2JG@wV>i2=@>a)
z=F~0fYwB{XT6;o!T5H!{*WS|J)q1q4`sI3!zD4iQztF$dqm5&YF~-S8qH%+<$=G3h
zXT+GishSs<bIfe>x8@b*J7$cVzVOPF;M_TqYq|AY6Stl}Sx6GD0yT~oo5bhjRBelv
zXznx@yI*ww9p9V8yRxWz60lh*dzDv|vD(A>Tl)FNH5g@&IfnYH_1E$8uk!cHBaIrP
z*Zqw<&Wg7ZESGhYwbeqM23yWC|DjINv%r^o_1BCkM5AVZ+o{|vE{l7Rdz^cc+rqb@
zr!~SG@;CA{eU{F&;ru<S-oo7ujGyCP<X+)+a<_~1;{D>wVh7gmJ)3r4iu*yoC~1`R
zYtYXn{YIK8&66&Xu9I$-Zk3*q{wTdD{V2U9?~%LZvC0|B1Z9PKl0IHPSD&w!=#_f4
z{;>WR{Z0L^0eX%y&NWhvB}RpDyYaZuVf@Yb()iK%wV7hRZtlhY`NE8Fk9YHKk2}MC
zp*zRD%Kfzab$6sS$y#l#wQjNQv9?%mSf5$@t#KaCqj)ksSAa7%dfGhr9%U!aokM>A
zik-+#$KL-P_SlPT5BoWL8~Ak$e>N}iCO<*CK)P7Um6k}wQiZfis*-M$YNR`)yQTZ3
zho#4*C#4qYd8ti$ReD`|OL|Y*D}5yON`IHWm41+ZmPW{<<XHJ+IYB-{o+zIygH>fq
zPM6P@XUX&AOXXa7v0NmV%9Zlf^7Zn~@@;aRe6QRfKPo>VKP^9p{jg1bO@2e(CBH9!
zAb%o%A@|GQ$p_>}<yXpa%8AN2<uoNxnWV6aq!`K+WxA57%u%wH%alCGqh(5kvQnv1
zZd7WN+m*YO`;~{4Cgn+`MR{I%NqJRyU3p7+SJ|t4r1UCZD&HzUC_gLF>L@i<Jy|_f
zJwu(So~!bZ0G65#*)dC<r(UY&sEZ*(O4SwW)#~-?&FZac9rj*>`iT03`n39-x>el<
z$?}H!j{3g(f%=L1x!SLOryfuvv|no{Y3FEjv<mGu?SAcH@c4G@p^vozjnR+M<Maew
z(KGa!;LS_*0)4Z7mhr7oV%~$D|F+p>{$M7!*SWuNXM>yTtY@v~t#_<0NTG8)f@hJZ
z$g|Q@<7xElCw}f`m;|irF>D+APj)OfgIfTOy_8?YZ-(rQ5ylFWAj78#^M$3tb;8|{
zqm9BAp-o5<C2@h6FJ3KvDxM<EmS)M>a-Mv-e2ZKwua`H-56MmPQ}Pz9NxS^I{5DqP
zL-{lLYx$q@G0L&Z80A#uH&}(K$~;j2HsvnmK4qiw7$k3t@`ADrTA@>UPuZt@s{CE~
zPKi*DQAdNyE>!@1v(*xHxq6GbS$#omSKm_qLp?*Aq$!$POVeg)rJ5IeW2JtlzCqup
zw?NkH)VuWv<1{13C^l|3>Wn0lGc~iqyxFWZ+sr?MUft$r=8xuf_owa@YnpWdc7fY7
zlW5ZqzX?eZcO`cl_W+l`f62!Q9$_u$@T~BPaHZ5FJq3<#h4yHZP6mhO$oX;scr;oY
zt4YA;Ydy)BY>0+xnAn-?jXg%U(F5()XWU@bTd_0-BIv33f1gn2srPK~G+<qtJe#2<
zT0E_ut=N0*_}cLfPp4;>r^~a~)9vZ;^m_U{{aC#L&jAm;!9+MRY&09gj%H)oN_I4t
z%4Kkua7(zGxm^AxegnUS-^cgy-|)u?k}yN?2_?cB%;GNLQK4CQQFveYT=-6yDrSk2
zl&9RJ{j6PJ-eNvvHkoglcUqG@j4OiKOha%Im&5tETR@FxxtF<p{3rY<VFI`#OSn|X
z6>bzZ3Qq|y2(Jlygs+9MVk)%$8gY~Ol-MG^Dee_N5kD8d5=TjKwyc{ZO_gRzmr6O3
zPr6=OC*31G02$FP?SfSJQ0kL@4JmN0JYBAl?}A)CC@)v;R3215S7xghslUZ;YE=KB
zwrkV$9Nnk)>V@vJt?Nl{vk~}mJKiB<d&EBI_Xnjm$b(PipXC#kB&AIKN&Q)k(tf2K
ziyd|%R_P|~bp0%SqJEA(Sr@RU4E+gRFciZuJVu%^-MGM*WiY7`w$8s?yi&YXyhB_s
z-YY&J4v4HaL;IWdla>fByV5AN_F5lWz1H!b$(|C=I?pDo+&i8RJzsi$pmp~8`}h?*
zmQ7~U*v0HB_ICCGb~F1t`zm_|C|kfy5q}mFWCQ!?NBM1KtoopSuKBImXx#z6cpPib
z<V284XO3r2haI+py_em{Ze#bbG2E}YQ@A8<GJ5fH^SKq=cAkeW$&;>;>ZE4rez{S3
z2r^=ezE3~im||oZCB`ZP9hF2d<w%}kFGri3xH@hP{|f&hze*S{Hv@wkAa`DX)cH^|
z^d)+SvClYQc+5=mQnSQdX|6Nt%m%X+mf4@pH_VUB$KB2DZO|v<tTU{0EYX^3&9@35
zefC*>)<3KzpvmLlX?l?~2V*|Qz0Y-X#|bIm$BTu_U{Nd;DuwH@vw8(noF$fuk<vz~
zU;0VXWuN@K9HESW3?HWmN|AECa;vi5mKV<`t;%+#NBO4`sivqNNM5Ekg2_hzUkd}m
z9pXl@Ta1^^2ZwExx}?vg)8r}geb5&Fl%o`v(x!AMx2ivA=jbyqzklen&9#uAo6J#e
zm-|Zh-R`GgWlpggFoSPB^jCp#1dtKfQuYycJNp*<0b2z9|037P?dA@0r}H)ZGyER@
z0KY=GU)U~uB5V}j62BB(l3Q9Jog@EI{*5vj+NDEzL+OV0n4mtOwx|i(#af=WMmts?
zqi@o0GHx|KFnRY%_Y>|t?g`fKtc{jMywmI-`&9N!_Ix&<UCmz4HnKa}kJ$Ze1Xf<)
zW^<L?I_`dM6Za0V`H4$}wRQoY&0oo12fUu-U*dN`0z?SM3g0QM`uF-leWVd*oNk;C
zUbxH{i@zIrse7rr%zcVA4|3^gNWhn@Cde9$-4<c{Z*kzcvso3^e+FiM7A*ap+&w%a
z+$*GG5ARZTD}BoM${h7NbqXxLDCnkaaPJE1DQkr1IA|QE6G{gE{>~1-V)!H1#%)Ir
zZ^P0(o<EaM;RRmhGx!VnIq)5p@J0M;SerM(-n@@*;G6kpVRin6e-pFl;XmX5&L8BX
zgcu=S7%!YD@PZ<kkUm!nzXSI?EIcRdgq?qeI7wV2t`u*<PJI}5;;Z6k&{K1zZ0WaB
zB`hqmNj6B&N!wwEybHVaJ6IpF@=5Y3usNnff?q2?0*hiNG}n9bfE=Tot)wcKgWL8h
zjC!$pnOdmUst>78LWBQJ?SWJoqn)OmrE%JCwIcmN{bl_IW4k%Yz1Dq?`(yV~%j;pf
z{d^hCTHM9lGVTVf*SF$N(r9@)`nv*}Y`%7dcB{5mJ44@t6*|jcA%X5Q7;}p0HE%UH
znxB}F?i<|qyF1-qLQi#JPd!HK(;vZPA{ocB;EOw9x4*|8V8_F1pUeFgmf3UM&)mh}
zfzA9o{GH&;*94z<g*a6@U0J8zr<WL6X1^I_?XZ4DeZh+-Ur&P!S!CO-uW~!EPm_6$
zmw5xLb3E*U3h0jY!Zz&F1!B51Ln?!vw^@1?8t^A+4D2=*5-bh2+EUnPB)hxibY+cl
zhw{Gi3HIp-RaCRom(^nJ8tp0VIqhWqG(8;_%$53T{UyCmzrgsNaffldd9s;nzGX7-
z^geX|;Eu4)w0zcm(1e|yzd`5W+YG?-OZa#>+}&IY*8#qF!BgtvPlFaZ1`>LUxLsT&
ztp*17V<n%Jx631x#mdXdWOXL2t!uU0weR&P<2YliajG%KoNrE``MV-*JvSOw?HF!4
z*TYYO*Ht2{6uuHN#3kURze0<B3@sKdohXf$CP|`{4lddy9gzB!@z6?z>MC%=L6!8&
z7+7$pYNu;wYo<0;%hA?hwm)c<`Xl-deXQ}4(Qf?3c+-eCZ^XKebf4%}+)LaKx}SCb
z$^BRG%opw`s|o(?LF+irsUFpn>M4W-y~%UG=RMCp!j;8$D+p!S<1Bj#yA=AM7BXQs
zJCZvIxc`=`hjjXii{fYVKE4_|DNW1+k8ASp)ENC9y&by!BeM^(?j(1Ky9WNxC`-2%
zL0&&;?IJyzitkP!Y2?1<{><~j0-*-p=Q-ke*j2m57o^MN*W7QqkFk!Ux?X&H0Z9sX
z7Jm-*Zy{eO?NoQEd(;8gW&&nEUn|sBfdUW0AACjotM(tDgsPwBe#iX@ywH)>sn8YZ
zAP3*$Kr)7nN2DPM^Xe03%NnfkNVP|AMNA;dj5F^w?{L57KEZNB(`I`fB3hJ0+B*L?
zYzq4XViBit6S-1uD`d+K{xx9?G>Iy$v3>kq(l~es3Gf1nl}cp?bnFDRSY4-ns$K@n
z-qIw<typt5^;s2Z+f@<lLu?~t{2uN@?sLdhf%ot;`CPt=e}do6{~9vr3|PqXgcZVl
z@JJ6xTjW*1_piz%aKk1w1NOxNW06q^>pb4fH!GntXMmIMhJ@W_F}0E8t}?UP`RoEV
zk1b=bg;%wSZN@I%!+yv<!;R+^KAkV;>-mQv1-HT4I!ky=*ebj#ydij{382jsWri|a
zxma1DT%&vlza&CEP93Leh+Awz)Z$He6<?@7svm1J^haUY{0Xw<D`>hCtQ6~A3xA8k
z=JylWY;GK%gs~RzYcSFm{I~p1{7aA(KMEtoc-V!v!+twfnk-F&RZ#(2c0!wuluwYy
z!|E@V*UIbUdiY^4%74Lb{|wfe8`^n~@|7a1=c$*di`3iU?Tpd3YCE-mY9sVqy->eR
z|AW3&e@!0+ORL`4ZG37Jo6BumBHg{*-2}Zm&su6#Ab#?`^$%K)W_)7>$(gWx6xM`%
zx(+M6pF4rS1=?*te}Zrx_UZG&N5UvEU0f~h5EG#HOQn0IZPG#MO!++cCQr*B$)iB6
zXW+v{s^isEHBVgwPwZLsCH2pc3V(wy@ik;QojY!Uu1e-aPUTEk)9J9MGhth0LEhxU
zQY+$0xYb-0Vl@q1BVrPpxn@YAR$$b|wL=>1fNj&m^&;ZZ4;%-$102Ig^D+ErK9-N;
z<M{;M#V3N|$vn%8(0nGJignK5GkGtc1--q1&*Ag=0_edKtbQf5VHLj?ySRq0<?Fx=
z8=w^%`6fv9X1;}Q<+maN(av{(-#eiryZF6)H#B80<Y7N(GXSfE5u%|nM+>n+9C$Vn
z5tL*hRY(^ygiOH;`#l>wJO{F_99GzBp$gtXHFkWhP$$$28-xaUeF<Wsm@JB-3HoM&
zC&>FNLL_aqxK^wY>%<L+scnX(zg27p^>;y1k_EnBJOF7q8a97|lqe-bVw#YdnNk+4
zqI{`HDwkGEYY`);gB)#y9%+Fu)h_L@y?`Eg0sA3aqvg?Z9HIh=ax&s=CL#iva+bUR
zzE+W3F0TgvfiXHEgYXRYm(!yK`>0*mA?y<NA~M(~>=zCQ(c)+^PW<mY(;CD)Hpq?g
zX1PV)3g3DMyqmppkK8BkN2DWK8Lh-AB;S%1Q8ATtL^!gP1xh}w=5l4VvKFz8I%R{>
zsBDI(y;W(44BQ2qrU%yBe&qn-8Kc!WH9<{OlcA?g*wdNN)(g~pL@~<M)#_Tc1`&)6
z@Vz#}dff`EWe4Q^URXeV>VCv6qP5XloR**^YRQ@iy_c?KYFXL>Enh3r%C*(nTCGN_
z(>7?0+Gec<@}OPYq3wdr)1&oi`?UjFv_9I7Z6xZ+x~QA53^EbnSfJ<YMS3|bgtdqt
z*1@xHgg4Uy`Oywt+NpQJ!|&Dm^#PqRVvJZL-f$U7u%A@;+!=<~$cFD<0H3GQs4}XJ
zTF9FQqseGCT8%bD$vTZLc;&rDzcB!7E5?j9<4u>DWU`1wrkWYBzOv06vj9F%rCDWG
zBWh3&zo*G;hVRp6cHl26b|He$3p;86_DYO9)*TQ3A<50URd*^PZC-aaVr>P`vX$;C
zceT6LUGHvygll%Uy4&0xu;;qm-R@p@KfDdbim_r5hjdv<7Hg?is+D1Rt!yg?o>Yld
zX;oR(RxK>_2G|D8R;$%!by%IS1-s#Q_FDspGRJsgJ@FowC&|OwRzrrz3oV)BDS-7*
z>8bKmdukD9Xh4ji8S#ZS+oI}%rQeH)!T`zH?nq`W5(d$P*g-w)xBI<_`{%F)i2hZw
zRctlvje52L(f?+)715&(wv+8*yV+j0A2vS2#c;7)JYw2O91AH*5eYAs4f$CB*;xtM
zS<ThLMrnZbY=-1)gVgNgx*#`uIi^37*$)(QYzb2W8B+-<QxD0~2HDaD$<i(QV=nDd
z2V_Mjq(v8^2HjE*qKSR*8uv>BkQ<B~EyqB1#6o(+Lw>j*L6RUtSV$2SawHX!Bm=U<
z3u%%KdE!KGN+4A#Ay=v(S*l?{)?&}qW7joc-!)<9HDm9!V)wOS|8-yoc47~9VHb8|
zANFD=_G2#&U^g;Kv=W0I8H+s`k6r1)zD&Z-WU)6@?9No|&kXEPuY$?q?R614Cj%NF
zT>ghk|3=9DmO-iCEVM$BwLzA3K$>+zo^?T@bwj50LaOyct~Em{w+5)!0omLM>FlRs
zkJt+t-47`}06EP_(NYX#bu6THJmj?t5<3Ypn}yU?A-7W@xicWUy^!A7klqE5-zAXX
zm5||8kmA*l<F%0F^^oNakmgO0=gouhv0u7YC6E-AkQG&s7S)g!wU8L~kQoh-8cmQJ
z&5#_ekR70z3-76cW?8VF^4TJ`93IeGwuY_4GpR;IR$5?3wX-|eUF=>&s{7zAA7G=o
z(Oevtz$J3Y(C#{(4V{Phl|!uz=(QYZwMyu;T4=N;P_7LW>w+%p2Zdtn*i|y9kq#;>
z00qi1^BT;!5i{KiZrlYf>;v~jgX<E&Z6dfV6Wo<Amw=<H!AT9^pjL2BCpe}ToWg)Z
z;=vg#I3fel=zOIFlDZmlx&czU6*9UL61o@inSpeUhiqmcnKK}lbI4d`@h%i-5DnWR
z4t7N%Yzh(fL^^DVEZ7nGup!D}KdgoAPzSrg&pTUTE$o1$uoqTBA1s6ed^Bu>I3WR+
zL9!sipH7EekOi9{Unqi2up0J24Qzo8umd*ZN!r%`)13d0G$;N(oxPqeSZJ)E!bZ!0
zeU=T|tN_+oB`mXQSY`FF$eIwlZN<Ltz@F~{2lryH4+xAHBgVpJcZo?NE2?%3)+=U%
zs|&;u@O70~4bH9?8^GJmkP2;h9@Po{?uI1jhZJBS0b;THUD)|7_&gOm-izIy170t|
zPOri)uLZw1V0Sko^4$iWCvTt|lD8jx&p_hFLfX2(`z)kvDkQ8I{GWrkcnPFx74|@_
z?JYDxj<!OEc3>xTL3Z{+ZVq5K#6VugLslkXN2rjI8IX_JN{&*1eNl-BTD4NE)MIZn
zDb3g&ZHTCKDqV=F^(y_!0QN`>p2)=GSwRx^i3%G(L-pdBL5^C0=LVJVi>eX1smC*z
zCbd~@Ron3VrBm%vyVYJidl^s}Ek=vg;x(6+q_LW+rD_?PSIdU~UZ9mgE>%G$)j}RM
zKo&Ja4z+0=S|^_Pc5A&_zx{M3Mvv9wb(fx`v%0D?wRjg7+mtBc*FKK!@oOHx-YI}3
zTVmU?q;vcl$FFZ3Z9`gyGz`;#_W^O(Vy&$|_rte{8T2Y#b_^{u;5`&!&)30MXtKS8
zR(J;8*zJxt5F@z2U*ez#kPYst!Y;3~d8^gdC5{&97h=Fs39$ZI+y2jjUM>eORm1MD
zh2>vw+x}Z^&C+da6Vf4vGzV#n9O#R3=m^pdj!rnF5%$^|oAfkk=Zr9IOj_8le@W|-
zu05n-;~+Wx+SCh6HygHY4kTzLxTFSr;<t6Tf=k-LCp*9?J>Zi*a0*$wj2aDYA&WN|
z5;Yap?gH4kCE$>HaK~owM+fZNPFT2p{$RivF4(rj85!V-1<+KaqZ$G_sS{k#4?A|i
zwqz4v!?Jc9bOD}G<l}kmYFMwedJ}Bdc04iYgv~mjAArpo2a7cs_G*TaY2?FFErP9D
z4r{f>wpBOS)@mE<)Lr(oqX9(W88g}(4NEl+wrVmgRS{A71+Y>pO{N*|o<bk6I9ZS#
zWUV#Z)>#kqUo7mgRCuvP@L<<+HHi9efDgMF{_9rQV7>5H<KUep!6VIp7g_+_Q3Eb&
z2+<g%EfQ=A6|5sjKWv6f>VoYN4JqWvpX|eY#J0nH!=!+m$q#sgBwzO0nlv8!CLI=9
z$)Mb53HUrDFGyC9oXEt=7X)NOW5BQJ4v_}r&yX)eeoQU)KY1{{_KqJ7Z$%C4aq?4W
zhdUlho9&}GyZZp1zQ*9$tBUA$IaahzugBSdCcPQnNUPqa??ME#UysFlCfMFbI^ye<
z##*do3%re8gPz8ItYIwH%?q!h)@+6k(Qn4Oli@RX;V0C>H|T^v5NjpF3-H47uZ6YW
z2@5|KR=pRNd@Zc^PFU;^ENyrn7)dOmWnNh3wYD|h4huXUR(Ccm?Rr?(U3L_LK?EY!
zwh-7r)FB<VW{zziR3W-hi*+W;vV)EzcSbRFNHPL(k8C^_&I!amDg&{PYH&|2_@~~E
zfgFG&q8NTQc%~A4ZLnh$ZQz?6$cqNhu^ZHL>8YSy6{yw@&Ub<1tBpo@VLe8)nP{ei
i9(ABcpE(+yQ@Ohibclg3l#lZX4HO~#zw7@q1^yH2GK^gS

literal 0
HcmV?d00001

diff --git a/plaso/parsers/__init__.py b/plaso/parsers/__init__.py
index e307b2b..3cae5bc 100644
--- a/plaso/parsers/__init__.py
+++ b/plaso/parsers/__init__.py
@@ -67,6 +67,10 @@ from plaso.parsers import xchatlog
 from plaso.parsers import xchatscrollback
 from plaso.parsers import zsh_extended_history
 
+from plaso.parsers import winiconcache
+from plaso.parsers import winiconcache_name
+from plaso.parsers import winsuperfetch
+
 # Register plugins.
 from plaso.parsers import bencode_plugins
 from plaso.parsers import czip_plugins
diff --git a/plaso/parsers/compressors.py b/plaso/parsers/compressors.py
new file mode 100644
index 0000000..1ec2db9
--- /dev/null
+++ b/plaso/parsers/compressors.py
@@ -0,0 +1,278 @@
+from ctypes import c_size_t, c_int, c_void_p, c_ubyte, c_char_p, c_char, c_bool
+from ctypes import create_string_buffer, cast, POINTER, byref, cdll, sizeof, memmove, Structure
+from abc import ABCMeta, abstractmethod
+from warnings import warn
+from itertools import product
+import os
+import sys
+
+__all__ = ["CompressionFormat", "CompressionEngine", "Compressor", "StreamableCompressor",
+           "NoCompression", "LZNT1", "Xpress", "XpressHuffman",
+           "Copy", "CopyFast"]
+
+# Determine the system we are running on
+# On Windows we can enable the Rtl compressors
+# On Windows 8 we can use the native NTDLL instead of an included one since it supports all types
+# When running in 64-bit mode the DLL names are sometimes different
+# OpenSrc is available if the compiled library can be found
+# Copy, and CopyFast are always available
+isWindows = os.name == 'nt'
+if isWindows:
+    from ctypes import windll
+    winVers = sys.getwindowsversion()
+    isWindows8orNewer = (winVers.major == 6 and winVers.minor >= 2) or winVers.major > 6
+is64bit = (sizeof(c_void_p) == 8)
+
+# Utility functions
+def _get_buf(buf, default_size=10*1024*1024):
+    if buf is None:
+        ba = bytearray(default_size)
+        #print memoryview(ba)
+        return ba
+    if isinstance(buf, bytearray):
+        #print memoryview(buf)
+        return buf
+    if isinstance(buf, (int, long)):
+        buf = bytearray(buf)
+        #print memoryview(buf)
+        return buf
+    raise TypeError
+def _ptr(buf, off=0):
+    if isinstance(buf, bytearray): buf = (c_ubyte * (len(buf) - off)).from_buffer(buf, off)
+    return cast(buf, c_void_p)
+
+
+class CompressionFormat(object):
+    """The supported compression formats. Not all compressors support all formats."""
+    NoCompression = 0x0000
+    _Default      = 0x0001
+    LZNT1         = 0x0002
+    Xpress        = 0x0003
+    XpressHuffman = 0x0004
+
+class CompressionEngine(object):
+    """The supported compression engines, only used by Rtl."""
+    Standard = 0x0000
+    Maximum  = 0x0100
+    Hiber    = 0x0200
+
+NoCompression = {}
+LZNT1 = {}
+Xpress = {}
+XpressHuffman = {}
+
+class Compressor(object):
+    """The base class for all compressors"""
+    __metaclass__ = ABCMeta
+    @abstractmethod
+    def Compress(self, input, output_buf=None):
+        """
+        Compress and return the input data. If output_buf is provided, it is used to store the
+        output data temporarily (otherwise a buffer is allocated). It can also be an integer for a
+        suggested output size. If the buffer is not large enough, errors are likely.
+        """
+        pass
+    @abstractmethod
+    def Decompress(self, input, output_buf=None):
+        """
+        Decompress and return the input data. If output_buf is provided, it is used to store the
+        output data temporarily (otherwise a buffer is allocated). It can also be an integer for a
+        suggested output size. If the buffer is not large enough, errors are likely. Errors may also
+        be raised if the data cannot be decompressed due to format.
+        """
+        pass
+
+class StreamableCompressor(Compressor):
+    """
+    A compressor that supports streaming - basically takes chunks of data at a time instead of all
+    at once.
+    """
+    __metaclass__ = ABCMeta
+    @abstractmethod
+    def CompressStream(self, input, output, input_buf=None, output_buf=None):
+        """
+        Compresses the data from the file-like object input to the file-like object output. The
+        input object must support the method readinto() and the output object must support write().
+        The input_buf and output_buf are used for temporary storage of data if provided (otherwise
+        buffers are allocated). They can also be integers. The default is a 10MB buffer for each.
+        """
+        pass
+    @abstractmethod
+    def DecompressStream(self, input, output, input_buf=None, output_buf=None):
+        """
+        Decompresses the data from the file-like object input to the file-like object output. The
+        input object must support the method readinto() and the output object must support write().
+        The input_buf and output_buf are used for temporary storage of data if provided (otherwise
+        buffers are allocated). They can also be integers. The default is a 10MB buffer for each.
+        """
+        pass
+
+# Custom-made compressors in C/C++
+# Supports all methods and streaming
+# NOTE: currently only NoCompression and LZNT1 are supported properly, Xpress/XpressHuffman have not yet been updated to the current API
+dll = None
+mypath = os.path.dirname(os.path.abspath(__file__))
+names_to_try = (('MSCompression','MSCompression64') if is64bit else ('MSCompression',)) if isWindows else  ('libMSCompression.so',)
+for path,name in product((mypath, os.path.dirname(mypath)), names_to_try):
+    try:
+        #print(path + " " + name)
+        dll = cdll.LoadLibrary(os.path.join(path,name))
+        break
+    except OSError as ex: continue
+if dll is not None:
+    HEX_MAP = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'a':10, 'b':11, 'c':12, 'd':13, 'e':14, 'f':15}
+    __all__.append("OpenSrc")
+    def _errchk(status, func, args):
+        has_stream = False
+        for a in args:
+            if hasattr(a, '_obj') and isinstance(a._obj, OpenSrc.stream):
+                s, has_stream = a._obj, True
+                break
+        if has_stream and s.warning:
+            warn(s.warning)
+            s.warning = ''
+        if status < 0:
+            if has_stream and s.error:
+                raise Exception('%s failed: %d %s'%(func.__name__,status,s.error))
+            else: raise Exception('%s failed: %d'%(func.__name__,status))
+        return status
+    def _prep(f, args):
+        f.restype, f.errcheck, f.argtypes = c_int, _errchk, args
+        return f
+    def hex2int(b):
+        cnt = 0
+        for i in range(0x00, 0xff):
+            if chr(i) == b:
+                break
+            cnt += 1
+        return (cnt)
+    def GetSize(bData):
+        size = 0
+        idx = 0
+        hexs = ''
+        for b in bData:
+            if len(hex(hex2int(b))) == 4:
+                tens = HEX_MAP[hex(hex2int(b))[3]]
+                size += tens * (16 ** idx)
+                idx += 1
+                units = HEX_MAP[hex(hex2int(b))[2]]
+                size += units * (16 ** idx)
+                idx += 1
+            else:
+                units = HEX_MAP[hex(hex2int(b))[2]]
+                size += units * (16 ** idx)
+                idx += 2
+        return size
+    def ldap2unix(tm):
+        uSecs = tm/10000000
+        uTimestamp = uSecs - 11644473600
+        return uTimestamp
+    def chkFile(size, bData):
+        if size > len(bData): return False
+        for i in range(1, size*2, 2):
+            if bData[i] != 0:
+                return False
+        return True
+    class OpenSrc(StreamableCompressor):
+        class stream(Structure):
+            _fields_ = [("format", c_int), ("compressing", c_bool),
+                        ("in_", c_void_p), ("in_avail",  c_size_t), ("in_total",  c_size_t),
+                        ("out", c_void_p), ("out_avail", c_size_t), ("out_total", c_size_t),
+                        ("error", c_char*256), ("warning", c_char*256),
+                        ("state", c_void_p)]
+
+        compress     = _prep(dll.ms_compress,   [c_int, c_void_p, c_size_t, c_void_p, POINTER(c_size_t)])
+        decompress   = _prep(dll.ms_decompress, [c_int, c_void_p, c_size_t, c_void_p, POINTER(c_size_t)])
+        deflate_init = _prep(dll.ms_deflate_init, [c_int, POINTER(stream)])
+        deflate      = _prep(dll.ms_deflate,      [POINTER(stream), c_int])
+        deflate_end  = _prep(dll.ms_deflate_end,  [POINTER(stream)])
+        inflate_init = _prep(dll.ms_inflate_init, [c_int, POINTER(stream)])
+        inflate      = _prep(dll.ms_inflate,      [POINTER(stream)])
+        inflate_end  = _prep(dll.ms_inflate_end,  [POINTER(stream)])
+        max_compressed_size = dll.ms_max_compressed_size
+        max_compressed_size.restype = c_size_t
+        max_compressed_size.argtypes = [c_int, c_size_t]
+
+        NO_FLUSH = 0
+        FLUSH = 2
+        FINISH = 4
+
+        def __init__(self, format):
+            self.format = c_int(format)
+
+        def MaxCompressedSize(self, input_len):
+            val = OpenSrc.max_compressed_size(self.format, input_len)
+            if val == (0xFFFFFFFFFFFFFFFF if is64bit else 0xFFFFFFFF): raise ValueError()
+            return val
+
+        def Compress(self, input, output_buf=None):
+            len_input = len(input)
+            output_buf = _get_buf(output_buf, max(int(len_input * 1.5), len_input + 1024))
+            comp_len = c_size_t(len(output_buf))
+            OpenSrc.compress(self.format, _ptr(input), c_size_t(len_input), _ptr(output_buf), byref(comp_len))
+            return output_buf[:comp_len.value]
+
+        def Decompress(self, input, output_buf=None):
+            len_input = len(input)
+            output_buf = _get_buf(output_buf, len_input * 4)
+            decomp_len = c_size_t(len(output_buf))
+            OpenSrc.decompress(self.format, _ptr(input), c_size_t(len_input), _ptr(output_buf), byref(decomp_len))
+            return output_buf[:decomp_len.value]
+
+        def CompressStream(self, input, output, input_buf=None, output_buf=None):
+            input_buf, output_buf = _get_buf(input_buf), _get_buf(output_buf)
+            input_ptr, output_ptr, output_len = _ptr(input_buf), _ptr(output_buf), len(output_buf)
+            s = OpenSrc.stream()
+            s_ptr = byref(s)
+            OpenSrc.deflate_init(self.format, byref(s))
+            try:
+                done = False
+                s.in_avail = input.readinto(input_buf)
+                while s.in_avail != 0:
+                    s.in_ = input_ptr
+                    while s.in_avail != 0:
+                        s.out, s.out_avail = output_ptr, output_len
+                        done = OpenSrc.deflate(s_ptr, OpenSrc.NO_FLUSH) >= 1
+                        output.write(buffer(output_buf, 0, output_len-s.out_avail))
+                    s.in_avail = input.readinto(input_buf)
+                while not done:
+                    s.out, s.out_avail = output_ptr, output_len
+                    done = OpenSrc.deflate(s_ptr, OpenSrc.FINISH) >= 1
+                    output.write(buffer(output_buf, 0, output_len-s.out_avail))
+            finally:
+                OpenSrc.deflate_end(s_ptr)
+
+        def DecompressStream(self, input, output, input_buf=None, output_buf=None):
+            input_buf, output_buf = _get_buf(input_buf), _get_buf(output_buf)
+            input_ptr, output_ptr, output_len = _ptr(input_buf), _ptr(output_buf), len(output_buf)
+            s = OpenSrc.stream()
+            s_ptr = byref(s)
+            OpenSrc.inflate_init(self.format, byref(s))
+            try:
+                done = False
+                s.in_avail = input.readinto(input_buf)
+                while s.in_avail != 0:
+                    s.in_ = input_ptr
+                    while s.in_avail != 0:
+                        s.out, s.out_avail = output_ptr, output_len
+                        done = OpenSrc.inflate(s_ptr) >= 1
+                        output.write(buffer(output_buf, 0, output_len-s.out_avail))
+                    s.in_avail = input.readinto(input_buf)
+                while not done:
+                    s.out, s.out_avail = output_ptr, output_len
+                    done = OpenSrc.inflate(s_ptr) >= 1
+                    output.write(buffer(output_buf, 0, output_len-s.out_avail))
+            finally:
+                OpenSrc.inflate_end(s_ptr)
+
+    OpenSrc.NoCompression = OpenSrc(CompressionFormat.NoCompression)
+    OpenSrc.LZNT1         = OpenSrc(CompressionFormat.LZNT1)
+    OpenSrc.Xpress        = OpenSrc(CompressionFormat.Xpress)
+    OpenSrc.XpressHuffman = OpenSrc(CompressionFormat.XpressHuffman)
+
+    NoCompression['OpenSrc'] = OpenSrc.NoCompression
+    LZNT1['OpenSrc']         = OpenSrc.LZNT1
+    Xpress['OpenSrc']        = OpenSrc.Xpress
+    XpressHuffman['OpenSrc'] = OpenSrc.XpressHuffman
+else:
+    print(sys.stdout, 'OpenSrc compression library is unavailable because the library couldn\'t be found/loaded')
diff --git a/plaso/parsers/esedb_plugins/__init__.py b/plaso/parsers/esedb_plugins/__init__.py
index aa42a09..478b2e2 100644
--- a/plaso/parsers/esedb_plugins/__init__.py
+++ b/plaso/parsers/esedb_plugins/__init__.py
@@ -4,3 +4,4 @@
 from plaso.parsers.esedb_plugins import file_history
 from plaso.parsers.esedb_plugins import msie_webcache
 from plaso.parsers.esedb_plugins import srum
+from plaso.parsers.esedb_plugins import winsearchdb
\ No newline at end of file
diff --git a/plaso/parsers/esedb_plugins/interface.py b/plaso/parsers/esedb_plugins/interface.py
index 0c2f42d..acacedf 100644
--- a/plaso/parsers/esedb_plugins/interface.py
+++ b/plaso/parsers/esedb_plugins/interface.py
@@ -194,8 +194,11 @@ class ESEDBPlugin(plugins.BasePlugin):
       return None
 
     if column_type == pyesedb.column_types.BOOLEAN:
+      if long_value:
+        return long_value.get_data_flags(value_entry)
+      return record.get_value_data_flags(value_entry)
       # TODO: implement
-      raise ValueError('Boolean value support not implemented yet.')
+      #raise ValueError('Boolean value support not implemented yet.')
 
     if column_type in self.INTEGER_COLUMN_TYPES:
       if long_value:
diff --git a/plaso/parsers/esedb_plugins/winsearchdb.py b/plaso/parsers/esedb_plugins/winsearchdb.py
new file mode 100644
index 0000000..8f1243f
--- /dev/null
+++ b/plaso/parsers/esedb_plugins/winsearchdb.py
@@ -0,0 +1,196 @@
+# -*- coding: utf-8 -*-
+"""Parser for Windows WinSearchDB files."""
+
+from __future__ import unicode_literals
+
+from dfdatetime import filetime as dfdatetime_filetime
+from dfdatetime import semantic_time as dfdatetime_semantic
+
+from plaso.containers import events
+from plaso.containers import time_events
+from plaso.lib import definitions
+
+from datetime import datetime as dt
+from plaso.parsers import esedb
+from plaso.parsers.esedb_plugins import interface
+
+class WinSearchDBExecutionEventData(events.EventData):
+  """Windows WinSearchDB event data.
+
+  Attributes:
+
+  """
+
+  DATA_TYPE = 'windows:searchdb:execution'
+
+  def __init__(self):
+    """Initializes event data."""
+    super(WinSearchDBExecutionEventData, self).__init__(
+        data_type=self.DATA_TYPE)
+    self.ID = None
+    self.Name = None
+    self.Owner = None
+    self.IURL = None
+    self.IAttr = None
+    self.IsFolder = None
+    self.Size = None
+    self.GatherDT = None
+    self.ModifyDT = None
+    self.AccessDT = None
+    self.SUMMARY = None
+    self.Title = None
+    self.Subject = None
+    self.Comment = None
+    self.Label = None
+    self.Text = None
+    self.APPName = None
+
+class WinSearchESEDBPlugin(interface.ESEDBPlugin):
+  """A parser for Windows Search DB files."""
+
+  NAME = 'winsearchdb'
+  DESCRIPTION = 'Parser for Windows SearchDB files.'
+
+  REQUIRED_TABLES = {
+   'SystemIndex_PropertyStore': 'ParseWinSearchDB'
+#    'SystemIndex_0A': 'ParseWinSearchDB'
+  }
+
+  HEX_MAP = {"0":0, "1":1, "2":2, "3":3, "4":4, "5":5, "6":6, "7":7, "8":8, "9":9, "a":10, "b":11, "c":12, "d":13, "e":14, "f":15}
+
+  _TARGET_COLUMNS = ['WorkID', 'System_FileName', 'System_FileOwner', 'System_ItemUrl', 'System_FileAttributes',
+                    'System_IsFolder', 'System_Size', 'System_Search_GatherTime', 'System_DateCreated', 'System_DateModified', 'System_DateAccessed',
+                    'System_Search_AutoSummary', 'System_Title', 'System_Subject', 'System_Comment', 'System_Contact_Label', 'System_PriorityText',
+                    'System_ApplicationName']
+  _COLUMN2PRINT = {"ID":"WorkID", "Name":"System_FileName", "IType":"System_ItemTypeText", "Owner":"System_FileOwner", "IURL":"System_ItemUrl",
+                  "IAttr":"System_FileAttributes", "IsFolder":"System_IsFolder", "Size":"System_Size", "GatherDT":"System_Search_GatherTime",
+                  "CreateDT":"System_DateCreated", "ModifyDT":"System_DateModified", "AccessDT":"System_DateAccessed",
+                  "SUMMARY":"System_Search_AutoSummary", "Title":"System_Title", "Subject":"System_Subject", "Comment":"System_Comment",
+                  "Label":"System_Contact_Label", "Text":"System_PriorityText", "APPName":"System_ApplicationName" }
+  
+  def _ldap2unix(self, ldap):
+    uSecs = ldap/10000000
+    uTimestamp = uSecs - 11644473600
+    return uTimestamp
+  
+  def _GetSize(self, bData):
+    if ord(bData[0]) == ord(bData[1]) == ord(bData[2]) == ord(bData[3]) == ord(bData[4]) == ord(bData[5]) == ord(bData[6]) == ord(bData[7]) == 42:
+      return 0
+  
+    size = 0
+    idx = 0
+    for b in bData:
+      if len(hex(ord(b))) == 4:
+        tens=self.HEX_MAP[hex(ord(b))[3]]
+        size += tens*(16**idx)
+        idx += 1
+        units=self.HEX_MAP[hex(ord(b))[2]]
+        size += units*(16**idx)
+        idx += 1
+      else:
+        units=self.HEX_MAP[hex(ord(b))[2]]
+        size += units*(16**idx)
+        idx += 2
+    return size
+
+  def ParseRecords(self, parser_mediator, database, table):
+    win_ret = []
+    for record in table.records:
+      record_values = self._GetRecordValues(parser_mediator, table.name, record)
+      cmn = record_values.keys()
+      cmn_ret = {"WorkID":"", "System_FileName":"", "System_FileOwner":"", "System_ItemUrl":"", "System_FileAttributes":"",
+                 "System_IsFolder":"", "System_Size":"", "System_Search_GatherTime":"", "System_DateCreated":"", "System_DateModified":"",
+                 "System_DateAccessed":"", "System_Search_AutoSummary":"", "System_Title":"", "System_Subject":"", "System_Comment":"", "System_Contact_Label":"",
+                 "System_PriorityText":"", "System_ApplicationName":"" }
+      for c in cmn:
+        for s_cmn in self._TARGET_COLUMNS:
+          if s_cmn in c[len(c)*-1:]:
+            cmn_ret[s_cmn] = record_values[c]
+      win_ret.append(dict(cmn_ret))
+    return win_ret
+
+  def ParseWinSearchDB(self, parser_mediator, cache=None, database=None, table=None,
+      **unused_kwargs):
+    """Parses a Windows Windows Search DB file-like object.
+
+    Args:
+      parser_mediator (ParserMediator): mediates interactions between parsers
+          and other components, such as storage and dfvfs.
+      file_object (dfvfs.FileIO): file-like object.
+    """
+    win_ret = self.ParseRecords(parser_mediator, database, table)
+    for ret in win_ret:
+      event_data = WinSearchDBExecutionEventData()
+      event_data.ID = str(ret[self._COLUMN2PRINT["ID"]])
+
+      if ret[self._COLUMN2PRINT["Name"]] is not None:
+        event_data.Name = ret[self._COLUMN2PRINT["Name"]].encode('utf-8')
+      else:
+        event_data.Name = 'None'
+      if ret[self._COLUMN2PRINT["Owner"]] is not None:
+        event_data.Owner = ret[self._COLUMN2PRINT["Owner"]].encode('utf-8')
+      else:
+        event_data.Owner = 'None'
+      if ret[self._COLUMN2PRINT["IURL"]] is not None:
+        event_data.IURL = ret[self._COLUMN2PRINT["IURL"]].encode('utf-8')
+      else:
+        event_data.IURL = 'None'
+
+      event_data.IAttr = str(ret[self._COLUMN2PRINT["IAttr"]])
+      event_data.IsFolder = str(ret[self._COLUMN2PRINT["IsFolder"]])
+      event_data.Size = str(self._GetSize(ret[self._COLUMN2PRINT["Size"]]))
+      if self._GetSize(ret[self._COLUMN2PRINT["GatherDT"]]) == 0:
+        event_data.GatherDT = str(0)
+      else:
+        event_data.GatherDT = str(dt.utcfromtimestamp(self._ldap2unix(self._GetSize(ret[self._COLUMN2PRINT["GatherDT"]]))))
+
+      if self._GetSize(ret[self._COLUMN2PRINT["ModifyDT"]]) == 0:
+        event_data.ModifyDT = str(0)
+      else:
+        event_data.ModifyDT = str(dt.utcfromtimestamp(self._ldap2unix(self._GetSize(ret[self._COLUMN2PRINT["ModifyDT"]]))))
+      if self._GetSize(ret[self._COLUMN2PRINT["AccessDT"]]) == 0:
+        event_data.AccessDT = str(0)
+      else:
+        event_data.AccessDT = str(dt.utcfromtimestamp(self._ldap2unix(self._GetSize(ret[self._COLUMN2PRINT["AccessDT"]]))))
+      if ret[self._COLUMN2PRINT["SUMMARY"]] is not None:
+        event_data.SUMMARY = ret[self._COLUMN2PRINT["SUMMARY"]].encode('utf-8')
+      else:
+        event_data.SUMMARY = 'None'
+      if ret[self._COLUMN2PRINT["Title"]] is not None:
+        event_data.Title = ret[self._COLUMN2PRINT["Title"]].encode('utf-8')
+      else:
+        event_data.Title = 'None'
+      if ret[self._COLUMN2PRINT["Subject"]] is not None:
+        event_data.Subject = ret[self._COLUMN2PRINT["Subject"]].encode('utf-8')
+      else:
+        event_data.Subject = 'None'
+      if ret[self._COLUMN2PRINT["Comment"]] is not None:
+        event_data.Comment = ret[self._COLUMN2PRINT["Comment"]].encode('utf-8')
+      else:
+        event_data.Comment = 'None'
+      if ret[self._COLUMN2PRINT["Label"]] is not None:
+        event_data.Label = ret[self._COLUMN2PRINT["Label"]].encode('utf-8')
+      else:
+        event_data.Label = 'None'
+      if ret[self._COLUMN2PRINT["Text"]] is not None:
+        event_data.Text = ret[self._COLUMN2PRINT["Text"]].encode('utf-8')
+      else:
+        event_data.Text = 'None'
+      if ret[self._COLUMN2PRINT["APPName"]] is not None:
+        event_data.APPName = ret[self._COLUMN2PRINT["APPName"]].encode('utf-8')
+      else:
+        event_data.APPName = 'None'
+
+      if self._GetSize(ret[self._COLUMN2PRINT["CreateDT"]]) == 0:
+        date_time = dfdatetime_semantic.SemanticTime('Not set')
+        desc = definitions.TIME_DESCRIPTION_NOT_A_TIME
+      else:
+        createDT = self._GetSize(ret[self._COLUMN2PRINT["CreateDT"]])
+        date_time = dfdatetime_filetime.Filetime(timestamp=int(createDT))
+        desc = definitions.TIME_DESCRIPTION_CREATION
+
+      event = time_events.DateTimeValuesEvent(date_time, desc)
+      parser_mediator.ProduceEventWithEventData(event, event_data)
+
+
+esedb.ESEDBParser.RegisterPlugin(WinSearchESEDBPlugin)
diff --git a/plaso/parsers/libMSCompression.so b/plaso/parsers/libMSCompression.so
new file mode 100644
index 0000000000000000000000000000000000000000..e6cc6511f708d7bb20783c05c0a3b5a681b58e42
GIT binary patch
literal 61656
zcmeFad3;pmy+1ya3?#w887*p5EMq&`L|hV)ni13)GJ!KV(Nq?x)dB($Dv&gp1QaTP
znJlN{w6WFJUcIet)$6TGZA-(VLJ}YW*RZH4E{NM4A{dliAiwwf^PHJX0KNDAzP;bS
zzLVGFoagiGpXc*@wr82e#lbOYcDpU{Nw-~VW2knpf_SZn2Tkh*53jAzmVy80+lENm
ze!WpAy#+TYP~vH`xdgyE`s1s=EI~Y7@{)Wy6ui`WCi0~L%zW`zRDApum%JpN-Bwo;
z&rFrf#$x#0V8x&KbX(~XPp0Lk^yAPBzUMzD!IPekTID64iF`jmKDP6}`*B(cZ?fw9
zI=rk%R|ykOt9t1hhm6r<Z<uIHyJ+FKUmf`D!|zqkp8fZ!^TO9YKIcm2yb#}k__CeE
zO?sLmZRUeh9T(gBPjfl@?KJ<WU7XvL6R@3kaYM^l-+7v8HGEIUm!EIp%X-el_bhyK
z@I4n_e$G=5(1p!5)OtVh;R4{h__7@r;rl&&bMd_x-%Iel6yMA6Ex?zb;p!p(*#Qr}
zi}D@8o`t7R{Z-Z0lJQrB$36ACPy4UA{H2S3Fz3jUt}UMrx@%j>m;bhJ#6!hvHvjrE
z-!(%&t-jp&?qjR;rhdc28z=f7dGE~32lubpG<4&NFVD&R;SYYh^dAqu{_DmSx4!+-
zt|!0s$m3^Tb)<62r8^#f@~xjv9?}^Y^xShF{%X;~AK&@jOy8y_7XSOFFCAO(!P}Ac
zTSB&r{_Tt1S8trQ=)K=wUR3=0XZL0N!u+i4!(oSJk3X`^cCS(Y+6Tv0#`X@{_VNbX
zh&%h0r*!3{S4N(35)`<?0G|rZad({}{g1u|z72$Ns&f90^rwPzY+d-C_<0L}Q>DKG
zaMy{65f0+}om0ST06SGV_k0cfV|4foTehufq$(_AmH8GJ0^!dVE5Joa$Im5J`WB0j
z&amK9EO>XJO4q0!w&_+mrPnCH3=95U!CSV?t1G|;Yf}H(DyNeKiO(MOuyG!r!5Q{X
z3t&B}tnyn<DE}#x{~ffyrAj57Z?*GYt6tY41y9Vad#rNuuT}6wJOAB+JFn{tUv9y7
zj8X83R`~%7-Z@Iazpoy)4m^oZ?*$4Fv(jfL%D2)lvC{9h(mO9#fM=18pZD-(Ii25;
zpsmQlTLsD^yw<{7f?uZNg?Mm2tkRcT^{%wanM$UD&)dKYKQXI4kDP#quvLDORlYDi
zq%X1H-m4_L?J=wTwHCbPY6X8)J!~<w#|iG%)akMy>Y-WVV)Lr7)h*jr1eyN96Vg9n
zwX^nwarpz%6Ax2|sB(^~hcIx$on8e<lz*#LuXmAx-}-I!`~+~~?U8>|;RN2Uv--7z
z6BC~wS%`koYLD|q1^-XCdj8ZZzuRgj`944Of`_wD!b2V6*iNt2{?jEjcmUF~J+=R?
z06_{Fe6C20*C-Vx&*x{i1$TKRXnR0CY$L4pbUvm4muc$x6dq^TvTQm9QOajxqF>hh
zO3-uADyPM(5`Spn!8T>e9dpa)O{oe^s|-z<Vw+Mnd){o@l)!|NDKlnP&b(uGRcL1A
zgp#5;<@07vn0EV|nJVtoF;k{5n8pI8&6#~S5{|2xa+6g;(VS^jRWqw>b7#)2ni;ZH
z&YU)9PWf~Or&ru%n{)TPP{EYB(-usbUOu;?awd|_m{P?uRLqQ-Wpk#5W==uVLbkao
zYoC}C(#@PV!&X)~Gm$+}sBOwES6r3ImjF(gKC61(om0@F8KnhRPMKT92%rOixuw_7
zDxGVqnpaUddtRu_s$}-Ol*XviEYJxF*oqTtLlX*yPcN^yOM1&L&IRa7LQvV<Qr3qg
zS4a}8+b1=v;EE|F<BQPDF>|V`X7#4GnsHKkrnpK<T(F?G?Wauk{XWUigOgLutvcmM
z0h~ao4ev8%_6_yct70Xb@;ZgsLcTuO?G2|!G35fGl4R<WK_{jV(y?+S$SEb41xn;f
zr0AO~*(0l*S=D7_sU5Yzr%ZMt@KnT}TI{Lfr`&Qw!Ied`E2me_nN~R(mCvjU1b<Rk
z;JKo>*i!*gm~#8H>30^BkT9(|;V`Akrp=y10?3~`v+|CaQ>w}<LxG<Z*OZ3F=T9lU
ze!>)?x75g4Cq$x79d*r}Hm`Wz^l~tTKyX&Uh~i*qL;>n87*T|o5}H|rn5yw}%I6oC
z{=_zC_U%=n8PkUiyR54GvhOoEH~DtQ^yyQo7%Cuqx`I!cIb&LA8XA3jRh42zwz0v$
z=%OiCTvl*p^7V?#Mu2&x;g28n<U8NeZTA1gKO4$Uvn>)CAeGzhzwb8?N$IxVS+MGJ
zXJ@e`k6L^+VZT{y-?oE_BtE4tyX2XGKVreBo&ZmTYb`j%v?cl_|BkPLH>JR7TO>XY
zroa<+3gaG0fnStJjOVi{a7(3;*cB=8{FL-9De!?QaF=D5vi+&>&Xn|)NRwRKQs9G9
z%IQvlTcTEC52e5pvQ8pW>P;1q&J_4}Qp(RsfnSmW&rg95OMw@rz!Nf@(cToeJ0*SX
z*T73t;0fE8*(RsJQ|*JPDR4`LlUkZm;6qdDeJ}-Xsdf_kNDBPYl=Lkra90YvGX<V%
zi*8GSTPB9&+K~c3JEfd$uc=b0&p{<ges-k5ttljN@f3JQGPTXtodU<iOMVWezy~Cu
zu+J@hlw~AzVMe=B;H1&SCpQJI_>GFmPl5MKB*wEa1%6oy+?xVV=&+2|Q{Wa0kX)rH
z@C1)w#N-rs>b#zs0#BVsvr^!x^S2@eeu31e{w+v>TPn3g)TY2sOG)3D0?$r?>*3Eb
z^=QAk=Uq0vt|inj{w-it53kEyo015xJtKaFBs~}2kN?_GFWwlQ#YE<g9(*qRIl~+h
zvs1!L8Rk%!EfT()VUm#ftb{8WCh3@uNcblVbBN3)3E$2zhrq0r@GT6J9Lx#{-^4Ic
zZcdf(IEG1DW~qcnGfa{)y%N5fVWPy$m+%z~6BVXQ!WT0<kYT5Uzr*k#hHVnQ{W+Jd
ztf}Y1yXEPd5R47Es-VSppv4|Aj;y9rYGTmn2*mE(F<v)b3ibO-+3KDQ?}3iAP`~h=
zw6Z6Sy{%@N_dt8vmrsTe^wxf2583|`Fy0Axb_HU7x1(yNZgluM9Kwcz#v90MU*SRn
zLg|k_JJc#Eo>uml(Tb9uNc-}!&}n7SL1l)vl4yRy9_s&d$Dl@s76`9%7qk>>&Dm*s
zPfJmcqfrkZa#imMgxg$Q_mvoLrPNcBw+U4Rjg4PEsvCz&Ja1PG3iP!3wC2hlUytM2
zuHBK%q2Yn>VOMo_M+Qe%kBxP7Ial%3-?%ZD_u7`7#?41*e%oxmo?1HS^l(eMp118s
zxA|^etH%cZ?T-+ndThi6c<QlhM&q%n7OCU$V?8~Hzwgf~-mc=m!+0O#H>miZKC0qB
zctrB2G5$uzKVjv!;#*bxPCQnT)y5kUuMLghl^Od@UFBl^H{mf+&pV_W9|J9e=BM4Z
z78Bt9m59Uy_~N#n9okSY)90!5-$_Z|dMI5t+Vs|4*Xj07ebb?8$$aJ%$-Ehvb)&s!
zC-c`{V*+Ta{+=GbW-Q+(qP|cz>i^R}UAFi?(X{w1(A912{aO%h|8gyJm0gx>Z}^%D
zB(#MtLgPLM8L)BZPDK7&07h9oowu1cqX2DatqmXZdc5~$Z}Q!Y;q*=NP4rEeI3AOH
zfgXLZ5M-hoi`<2}@uqHs+)h2*k*0eV<m$!*H~!t~&SA8!{mSpYSqpD)F!?sUpUZg$
zUi|L-V3e7nOc!oRBgk8DU=`J<piz~n$BLZ#lC@6w6LjPKps`;!9PapsUty4=i`==O
z$BRm0i>^Ih;yGS<j>%!shS~zrV%s?5l5Rb`-X8QE3sq>%#dcroM_@{$+`g=JK5h9r
zJvO*VZ{6Vt#xBVSYHP0W#cr^d83PbioLT1cv@cp!R@b6MPDA(XExNX*TW|d&JrMnw
zt;}Z>XT~o$iWV>deGUPmPkq%*dKhi9X_1YH3`S=F515Nn^$x$=MZEf6Ad7e|4YJ<1
zh62C1-~c;5ISBHp+pR@t@VEQj6Zvlf@L=LO-qxfw<AHS9n-;mVOFRb|&Ta&(Dn}dY
z2VysMmDqdquxZ!BYwbu-xm)*i1&p{J^}C%xZOqz0_)yxo*p>O(FIqTm0O#l<D>AkE
zzsWFmXwCh#=1F$H*8Jl%6g;VQM`l*1{-9r5bN^Tw17a*1%y9a`yX+;?H<#3H)_!r7
z9Vm#Nu6y3l>WAUIxZtCLp5lVtT^Cq%1d^}^JV&%&q)W=dhb8F&bliXSEos#|(5iGT
z@_jTxYaX3mI3`^j`dZx+NTD0q?yhf@N&m=v3bXrbbx}ryTQImS)w}d)wmayF-}AeG
zu{B_<$M^^HKGB*NxhK>Dg?2qQsmB+qK2~Di6U^JKZ`tY9nme-I@EJ$TjF4lh;LsOd
zmloboTf4|TF_ZYzA~Dv$p&&{58)vvDnD-p-=~?YUa0O`CW_AlBsKqPrC@s)_@h!}k
zfCp6ZQ@lv8rAh4jFCD$}DiA)Fru}jf0nHQKlcbq!$Amz*9YeR<E)DU=rrH}PpoMi+
zEY^4h40J20-i2An-s>^&Vo%VWTQgp34!Os#q~N+Z=$?pK@zIv!dNk<vdK<6w=$K)X
z_1GwTeBoiv8&Ki6nBQgBJ$}wm1Z%R`*ScErK6ZK|3gW!XWmZhiMQ(4<_#!?^vft{~
zgP7>9RW|7U+Hz!Pg8XpYp4Ewl-)t*0GPKBlT16BF5t$Q+&dUu%?{NiU%Vpwwx^!(!
zm!8+98@u8kA42!+^IZ7muK<PE0(nSn{598g2By{@^6`N3uz;-Jcbo6WzA0d9wMYhP
zIm=vwQ4w-6525u1n`PR70%gXSuOL=BOip*LbXcqZ4hJVTIc=5g*`6NrYKDN5Lft;u
zg>Sx|H#wK}NmEiPC9I$&6%h4eD8RzZLhvKdogQoGf&Qhp#=(>QW7E-2%*tK{3Z`j%
zCCX7<j~4kGdeD&pqPMk=b=dWeu^c`do-XStrU1gZRyfCc0`1IGXlrjMB)asD26AD3
z))WF+amPW9V~cLA56#hI3!LptQ|koB<p-}hy{|+vKj64vu^qL<Ha`Ui;y*ipVvHwQ
zc0mi(w;$cMc10oLAb0ov)@EBt8v|m01(4kH<)dBifa??@Za?F$mbmv<fKM{6g_6h;
z90~{F>(cb-Us-tQW_?X@Wo3Eg)vmybnKOWuqSEr3*)w!wVWGZeUJX2nGh9_=M$rU7
zy!sk(%eg8l+lwZl`h~jGui8fnSqo;tS!=V^E_T>Lf7Zi`Gi^R&pB7n#%Jk?$mrnG*
zz(C#ZP`LJIprpFH(9U4=X?DK^(5j&4PEdax(F4Yb_t-L#SwRr&l|)Rmj%kDTJ6-tZ
zg8_x|gL!eiqeu;xVMRa95)zGrYKP|a%HzDET)jgQvbiXd10!OkQ^GNhneMsXiP_Iq
zIMFn%j>`~w-A2Wmit9eAK07fys{6g=M<0*^WB+v8P>%6_{Ax_K2>4ScitvSxI#7Er
zEz~6_r24OV_yr+^>c{l(!d!cMvCUp{njS53wR`P0kdw>}vk?QY^ctyP6(~q**$Vn&
zEk9vHQ))m_w$NM@<J7O=MA7OSq?=WlT}~-y$q|BU=0oF27S>=Dc0LP>7D0wz@BC6L
zM;ZO3J{DT0ZSA)P-g4bQeC$43H)u{<T;!~Nnw`|@-XR+ZFLYv@H_7V@(rYa;7^7a$
zVy-3-I#}K2(5pabXqFy@>H&NWuquB<+KD>tsK8#7gJG80+4To$H&e%+??)_?J_hdt
zE#*B;bO!BD%Me6mC_yQi_~r!j?sS?SRw_APV8-}+Uou?eR6WmY(+x!q#se&<D*`%Z
z2RbpM%<q#^v*%h}3&X=1UK70Kh6x3(qViRDp}8GJ6*K3SSE@;*9O|>n%Z%|MHHqfA
z)RdD6%2}kZaZQ{@=e`S}Qp~b)mpIuGnyjyZch5Cr_H<^Rs;`+{K5ts(U9PzZ%`%sw
z0ZKmmCShiAk_U{V6UW0uxh^d<QD(HhDlx(Jm5B+huTD&4s8kewP#6mX2831s;ziAB
zA5<pc1wQceNwx&@T`Myiw27ImMfRe%0ccz<yzj?*N%Sc<`3mRp5+A2`Xb$6@w(1#y
zup0X6TkxhxycF7(YJVU$H?v@S%KVHjIzJOk%^Bak7x-QB6?tT}88kkRw*nC8h)6xC
z(&jh1la13?B?dxYnLxb0I)U)sZtAOC#q(x>k<FA2Bk{CQb>+-Ccj>EL(}8=iLMARH
zPA2<SV~C*zgxpij33#)p;rAdSvj_j!L6Sp^fFt+^dE~p<Qr2~2|9E}LXWPgHqR<;2
zc5gtNb>n$=qdb9bs_Uhqcso&RyQrgjEaGmF1n=v{z3wKw28<5fh`1lbYy37$v!DSj
zJ8oz41zO}1nA)O1`~xqH!thaGfD1rO%1by79sgnXBLt$LT0DbLXZmFVwJc>8D}C0A
zeS%Mz289&R`Wnu6u?%1c>eny?E#i<KRmBt>2pGp{Yq&%o5o-*_1eGPIAf*ZGqC&TK
zFpKK>BB<qvou%8i>Bd?%z{zH{pyC^1q2b5l3qD6DJzr|g!?dO618O$mpQV2Uq7L^s
zV@RCZHqwL^Xw60T){nuWP-514ZTWgw8DsV6^QyblowYR=2V?FGU#!HkHvDdy8|xSS
zL(Gk{LAI&p#wfSUjm-Gp&<qg_+<=p)GhjHN`F>dqQ(RI1SVZ#Oi<!`hqG)@#i2GbL
z`jloz!s7V8vN*m?i{pHZ2rZ5wiGETy9Rk$k!0yO_rNwX#^yDEm|8u)z1)8OMpjB$&
zr}27%!7((&;P7uCNr=I5uVVw-pJH>2gftMF;|nc(Io^{t$NAL5686SvlFG6-j-!Zg
zwl}De>6mPpU1#*QH-62CUV8&6XmC8J431uYVc8w$L!tjRX4#lNcE^sacEKAA4<F18
zSRrqg8OsKf)RpP+ZJHiKPGNeSZ!W}qPBA?`0xM8*N3}%z#Q^dK8XmKSHNf2JH9WpT
zW{bb|u{(xJGufu|Q|yj!XNui%zk>}s$@GA^(8u)fR?emc;;Olw7RZo<1@i4)3uLOY
zK$f{>F4G7(@EJ%M^Eo$ZgkX*$Xc-}MDavSsEEl9J!k&kLWS$B=o%RL{m&w}Fu>!o6
z^WCyirs~Gq@!zm~_#JY^KoMR5hXaz7iiuKYIIg7!BIeJ40!nUSr}ttc7#N$8U$ux8
z6|xRpYq$rReOFD2z0m<|D)V%x%{+j%iplY95}-^O^K~SU?#XohCp&?nTw47o42_r^
z<Y>9(bdJ=?{4rVg{5x67WNANnS@@8>=3C5K+U^JSw>w4xBe1*3%gB=ocI!qV1LVyx
zZ!&|iM}(<HM~Vp3y2!{rto~eIvW|klh$jRV45}B<&7Q8-B%AIEzW}M;)AiS0;ud+L
z8{GlpHE{gXMY6m=b&cYFs~-D7ZAlEnu#&C~@eUORflhE!@Cx4wCmRLfl^Ha4=$=k3
zOs}jy68uC9--cJM`6@j&#cmwjw8z*V{?s0RrM9fe8-bqAQ4V^#wTAn_-2B?|Z=pA7
zaMK*|Z8_o#x7mXid`?G%u_<uyEx0x^1D<_a!vv%agpZ_Y5f@oN_z3(9KUQycEpjCZ
zC)|<lkDjH6d$Rq8(;uDW@EfHLJTvixL*yAWI2bF<4#uYJ3wkzd^>0X#Upck<5y*~&
z+29C6^l&@ApASK%Zou~8xew1ncpk#@D4s`kPuqO2IS9EdI+A)@oXCss=g$8kuU5Z>
z$P4#4=ePT#gZxIOKY9aNtE06yptX8tv?klA$ky$Lz*P1dpKm%21bQO}jQv{ON>Zco
zzNqT(9}OoLqqy=mR`hgrCfWl-TErvxroXZDINU$*0X3HPm~WGJB<%^nnJ%4ClCH7z
z7&N|6qxpBHYf6bfmMB9COJk0%t>|!ekY2n_b2zC#c4c7zUaX~iMJ9A>VS0cA#+Q1m
z)P6&3aAqJ64y&&;swO#F{eK`;Aa;`z<bwoGulDPX00!pQZQjf`wTOY(pz(G=4;-lu
z<$G-1DKD;q&0qSoa>p4I3or{DKzf^#w3l1?iQ)jp5#8Pv^t`V{E<+1OYt5qucpI<Q
zV|T+xa!?DOqkxMB0Br!p?uOe1;Isrd4d66@(*@jx(Lxc62BZU=4zNSOTN7Xhzz%@>
z3HXHsxF5j%0PZi~#}nZG0QUztL%_dGfHMHj05}uiszp*=CO|Ml?#?1;wt%t#$^vKr
zL6Zc8jv*Mk`!s@z1aulerva2rP`-e&0fG<X?t!}Jc+L3&8VJxpfCdpXKtO{48l(@S
z6EWt`w}bj#H}-5g68^*<*=)S7MV0_T`p8?|nObBxUO|#tL~*Buz~Calmp+LO$?PWL
zwdKRL<!@{`!dX52ZQb|+%L>5@c41;;#L}(FJ%3>^HrQF>c~e_D5P3i#b}Tl)v7*(j
zpj>RO0Ks<zK{F6m5KZJlIq|=J4DJ^NEC{BWL)RE0I?Vvcu$R8IW-u2uKS=zSAhINH
zXNi4F0IEMYSj{ak<O^9#PYUlWv9|;^?WWiD#@Lk(vy{GRqYVfeH2}>f$@J)+FRJ(S
zBFfy1=@QJ_K}~c?4@;i^xRgvToKi9z$!MsPDGkipb%lN0PbbvdoG7zRUvflR`;=LN
z@-X{J>zP%5)0)o~9{a|oUB>GeB=A`CHsrcKcICM;4>cqwRw}^zsb7%C2aMOr;P-*0
zi{HknE$<(UE~kAZ8ta=JW20@!PVs!jegYr)L`b~XwT3Z>G1>ygTwB?aowkZHv?^b#
zdl67(Z2SX8UXR`kSKDsL;l(aJRs*7Veg4IC32y!f4Toz5-+VYX^5B07uX83)lkoq=
zpJcLVQEni%ItN%p&Oj{WNYnG$;!TODj`|!Is=`OlTOTl<ak=njFGA5p`AKh$6b|o<
zI2ciUL}ggAI9L1>4Sz?tB=!s|3B-QE0>Qj43&a+=(*nj0+Wb4<SwXkzWT`WX_IfUH
z2aP>2P%d$c&k1Rcen<=M8Oa`Xxb?hvz^GU4xzmMiqO+&ysuxw>V~?+4=3#TeAD_u&
zGqA>i+)j2It?#9bRR2=+W}vmVoqFu&B#ii#($;Dy7-&QS74${*EhrFG#ix%2$2^o)
zeY4(?hGB;@(AVDIZvF(MW3=kA#qjx^c^@#=YG$v-9vQ@kKgfvRxD$#Jr;6!A!tkN5
zs`o<h&_DR^NV_tCf<T&Z4Zf|47%>Ro6<&b3M#<&L>-sED7Hm!~P-@H1Dl^WeH;)UH
z|E4uN&T4d=-E|*i5vf#*{0=cm*D8$9e~D`~*9Fx5=LeuT_>yl{K2?qcKjL0Zz9tE-
zqn4w~k8XrHWiU)h7wR)hPjaFD2uqvrdB#S(7{>0KQA9-bRm4K|#YXGbA|S&;fVgsg
zw6^Rq*w|gKJ^Jj(u63Nnz5Fe?bf;!AMYs59{zd-RljbMAG}X%gszshe_mj@oXCxr5
zWzqE)lJi6#BeqKFKGNzw0LsdmlxOw~n5KFZPB1*M+!QGQiNRGWlfd{S7@KSF`jN74
zsBzc9`OIi0$C?GFAQ+&5MZ+KOAhS^Aj2!IN>PpcF=J26%Rn?W!EGb&F_vcVnFgo2C
z^z4B9bqAUjdPuqK7M%&Hvon4%$_(Z`#<m3Qk4Y0%%Yydl@bpcGr*FDbic*GIpNSgu
zOs9*P)PmCS4i_^y3=7`$J{wy{grFF>n5V<VyhDrp0G+2i=t#PmRg%YqsU&$Mrs$8?
zHo^DGCh?=3g%R>(@xQ{F(CXJQ0v^bK@ln@6v6~4M&DYqOK->4w5@P8*%wjHdNp}17
zIeOj(-FQ_`ugWCu;CY3rUzMrVbth`8e%5lS=FmNT#IDtC13Rd_)~40HMnMfbJvpkO
zA&E50nC548B>D^9tZ@y$z+T$VK{*L25Z;l7E+)r4^bfQvQ)|Xdl;J}^`O5C|wXqlr
zEXrl8hl?^HOp9{t<{}Kd*wM-l&pP-qBdFQ(ukC~=G>auH-qy_wk7k&j+vs?wc`gc3
z?(oBiOE_WuGdqfAh2S-9FPa17a3LeH`%^7f$VvwMsN#l20{CCK{(;?<^ALjnwTip0
z=Y?Dd!T+lEBD<;(nrb$&BD%Ay2f<M<L##y>pdG!n3+F}RlzI`u;t8v~d0HhaL6x)T
z-ElRYkO-m5OUuhHWkm?l<vZ6^R$eV}aQV9C&koIU&6tL`S#S<dbIqAq7GlpTOgow*
z{*r`_keTExCHks_lUHAvbOEnUx`2)G`YNvY=*IQfKv3niR(=FU@KsNcB_6f%1bPvE
z@-&nNQ~*ZM4<idSxZv#Ki55Nj99b;uHiSq?wUh*Uv_WPj!jY8>llUW|f2>rVTK`Oa
zbz*q*RlTF48l|tq$cU#_M|<_vl{1y2R$n#eF6F3QfiAEQrRc+CB$|rFs#!09N_yfC
zZpW~62=hl8)V(f~mN#?^uWCr$d?c&A8U#NNFXoN-m(V|I7jqum3`k-gtPvX3>WTov
z0{b5ma9J5>!VERL@Gp_yS|L~<AU_EEExa|Q%7cJ$AgSUV#cq;U=qC0Oi^iw%V{dcj
zS6{0`)j&9C%%J%W8$W2wf!hRnb#C00G(KY;65QjCuTojCR0L0oj%^W`)=Sp0z@+XL
z{|(Ztpr(tJ7N1tUuIt@odyPYD%Tn4mQIbikU=(swnWv!g>;PO)+-m~f-X8x?6s8-u
zu^vSxsrh{qKny~Zq5jdcvAA<XFA-YH61|j&v0j;=RkhYQ-isks>kt-Qk{sC)i|@!P
z#8X&W)T8r3k_SRRwgg;grcM=*3tgV|x;8dWo%Z-!XevRLUMs2|Rt&Kwgl~?I%W>eM
zp{yU>Moko$_z@+?{Vlg?%_?m1q^p3tt_Lt5;PR0rwcnU-(nwRE`KNjuRQ>Fod#jQ?
z?p=P7l~vL@dt7x=kCT{{{yvlFtS`}7{S=)&ot^Egz+3%9x1mnTVzSkrAF@AxPwCG;
z%rVj*PUZ0(+@2>(<QU_Bi6)oSz%IG#Bn_+&{jvUGB%JCCrRzh{;7nU+Dv52e%NEMu
z1}n@fgs`yrMbkI0a;cFpZU&xj^p+W8v6?;K!u42L<7yu}$!75d%;)OAb^Z2){R811
z2UcM_T7aA$B!mspFY7*+O`i_BavTD&gdnvKa<5s0II|&rz}TzPI(~8fcaZv_raq~)
zpwSvMUSoz@rWdxGVn3Xe|GfWc{`C3hq1tu7>{D%~)kxbZ@Kt7EX;PuSs=N|>7RzI0
z#u(u02GHgt3twXtzQzDwsq>xVb)G&w1KWw_e+x#*C9F5<z`AZrD7|M#(+RV`L!lkR
zfvKOE7HVK_^!73X4hzz#s=u+mhkx;P^<nwX+Qwk@k5%?^8=(dC&#J^~n9xIN|H3^A
zpMzOX@1Xx*!{?&d|8D<I9KX-*{a>gr>CG%_;$lW?98NcXgM;%)45$?PKXE>=eK45P
zLt{=sxmCUE+5f$n4*Q1tQ<f>Fa-L!-Zaut)T8u69a6t>&B=Ztc;0MvBuI)*A&!t`}
z4qdOM$V=?cj5)4SRvuh71qUF}kLj@m$0^ktaaDjGJ%<aVPX1e<$DVhycsfgUEUP;3
zhJ|Lzb?7m3uqKMPiunA^@Pc8J$p}6CRk~I`+kqUA?s|vpU{-4s9mq`M7P6kzBxF4n
z7LduI)nAEd?7>7v>;w(QuqiLG@Znnn%}w?{+P@0M%KNcpxs78TEO&u!yvKzcEOFeb
zTH__Sg6+z|N<?De*_GgT!I98QwD3U`85}u*ON^i46<eXTa0PI>f_$^sexL+y5ZG;j
z*eE!jP*kzD{9N60NY_Rmg7*t+%fZ;#qZjsE$By2+j=PToo{d^V4vJXKz23g(IY3<(
zHR*Y8h4<K(d|)MgIhpiBR9gpU=XN~H{3Fk)e!axgR@S72??g^tG|htr^A}kcHaCW}
zu6%2pqnVxo)!&5+(gDYz1M7M7A>iqcY=a-VqvkBFS??(v*Hb+(1v-CMFt3w#85Xzv
zun_C-KqvjiW~gL&FNP0Yj={~=>Td!N^)JW1QNOWcB}Hn$-sX$>-N(X*GGc>|!6Ve8
zjoFZeEd8<MJP|&piD@<SIADdoSkQd{w68_pMSsGFwbfYlfpulA?Q3K9wtnL9W?mIO
zJg8=rFZ|g#I*^~Qg|B62mmKXu;+6d8)5g4vFxO!l2WSoRP#C+GqK}4O#lq$5KKSW<
zwLLDaZW#1c4pFY($PdJd;Yf#CsV(LCcj}<I#Rc%EtyjaoG)oeLd}OVUp40rUOp%~S
z6Y#vEg>Of`fCnqaKjaIl#*WIHdRQH(f;FNJyRUJgt@@Qfczr*=aaGV`YD;U_P@@Bt
z1&w&u-&5OrG)=2}9QC50G-R<$p^e2oW+Cv&mV2Q90uwAD_D`FO1?|$BOYC~y+i;nZ
z#60a#5W8h|wC?Dq7i`cy`zr@@jRHTyvV`#pQm0`RydM`M3N~EWvlw}VELql5>uP~b
zY|hw9+S9SCK=<se#uknJ<{+3KLSiqH%FK-jUekkNm|vvF#$lxb=+TxwgxqDuXp*Ds
zZ`C~<xq7M($#Dh+6=IA*5b3_g>NN9A;yE@B3lb=z^45X_#_04iqf*Ma8gam|%;IWa
zaimA)TxbZ^gL_uGP^wtU{=CCmcKEh@LXyqumgUgkusLqsNGHm$3py8jvYv&BAo{=g
zINq=$%)E$1oMhkBe-i$_r%`f82K+?S6G55(5`UkL_QqGfg1VtT+=(S8_);5P0CtE=
zp~Fj_XKVN3{B?&nhwmM=UKgJn5lN{VP4pVJV^^gBPx1l&W!^~|XwnDRzv5rx1MEdv
zANxQA+5d`tu6AXuVULw{zK*ZG)_D|Q$g>L|)^cps=SH=<jiJHOv5teCSof=ItImXF
z`xCK`S57Xysd)T&mtS9<I7+Oqs<Q0!gwH@<$(^IL&y{(O{ZwL~!?R%7=axJ^g?Zjy
z^b=cr|4SI-Q<&&YB6s1o0#Ta<oX~2=-3Ek(ubAHhu#fz;JggAA<6*DjM8k1xm-lc2
z&c6@_qE`1Vcp_9%icfyTY|TlLm%-STR|V{Ea{ESXjg2$S=)_j~lGvnsA)>VKHT}W*
zu(}ey5--u)Fy*Tq#@n%5&$DBV#b&FOcF{TF1<Qe-T#wC5!=m|%;hh=2*2C$(aH~Ch
zB%@?Hc8_vBJO~fo!S}F{JU`%hS!>`$7&w=MW%Iuw5^q>GhYx~p@R;zr46MVk^tGtV
zA4O3RCwTE;IogZmXdjlNy;wZ|Bcg*bJ=-6<1&imeY4zn;;`fEQc>W3sK|*Wsymd%;
z7uL?bSUdM&?c9sCb05~uy;wW<VeQ<DweyboBhB^5g!zsdA^BiEwmQSRux$Q~*|hp!
zvb{%~^EX5bjQr?N9Y%#C`qNCKA~PDuHgv3)cN$n^++*LaP*=BIt7{XC?>Fg6fxLX-
zCC%ACymzRv9eC5Xd>B6L)K0f8K3ku@Q4TBV_6@rI)h?Vls6~%$nsW@|z0R)pm7d1k
zx{*I20^(sJl$_nIM;zfJT4;W_EyG+QR3!PZR?d!LUEPayb?<R}kC_jgGM?+|KCI0n
z5niya?(H$}l$3t%j*xQFAlVWr_|jtrBn4D3EX_eiV4E!(75a9#4QuPKnDjeg#UCqK
zyFo7L;hmbvvk4%r3`)zT6=1B|a-O6pk-@J+IDF*Hns0}9oz?XmMgv6fcF@>h-j8ZX
z@>=9qB=hjPoD<hdaSFj1@bqX)w=e+-+Q1;`#$hh`V_g^PU#&VM4|P(|QIz!9yX5cF
ze%-2;{C%05w8&h>8XF2W7Z+>{w8kAJ#@ayZhYq#aAHawu7yC;*t(Ebh2m3<?=V*~^
zQd4vG6^&R29|wVXSPLKK=rsqgur~q_8;6BR06(&TX^jAg%mnZ?3z*&rAsQP8l>|U&
z&ywBI2taHcR`vmW%mVgn1RypJ>-qpTS-}2{0EiGhT(y`rXEZ{h#>T<Lb+~FC0hx^m
z#KvJY|8NyNK*1}r8WD(%!&?5~svrRa8WD(%!%F_)s*wbo)`&oC9M<s<S6xg%b|V6@
zaahGaTy+is0~-;Djl&xLVfg9+7}SWsFuxmB`3vm^loB+s*1lbfYyp;np8Z<n4M5;K
zyIY4w7{D2yrQanrEw2Vmyc+%_16+kn<#<ML`o<8p8^0c#lzswR`2xBJcnn7VHEroz
zD31I@H(t}~4kN}|v8VBo8P94*QmAgQX*Za2Ntp1H20<v1KMLkRz@ibaw{wL)hy*gp
zxN{GatXd}7aYy*L7P=?go`Kd_h14Q}Eqq;%R(H=4aPz6Cx2%brY!coMZi$Vz*S+1O
z)#+?$bd+0`+%uqs+=kSc%n@b>owku~sI)eY!=nC?>h50Lsgo%5Ynr*p6vWJla793C
zz5*DxW4fb+(D%aaAnq5<DM&|TM&6Jl)tG#*1HtLxPc-vd#9=>`LUuFbmlwdfI3#@h
zOs)QLgu{Ez(v3}B%c2u;a&WIK*CTy@8Jv2=M}L~uwb_r2Hul$KvX!Ag&d(^~Fo|JV
zys9m|jR_$@j8{_She<6u(O=)qIE9*AG^7a$93*UDtPms|`XXO_9izo76EN<^qC>*n
z0b61;wh!E$a%{ubK6(=7?cK_uA|_+6dzgoNn#VdKE!YcLSp6_0Fn4%gjnn=m(Q&R4
zo_aVRfk1Sr^7XgS7{vaPa&*xjeZ=cR3u6mhR6w2ZFKczrIVf)m{n4qgDX|R#Hh*!!
zb`Vi!?cyw~yA^MfWKozzdUR|KJ+6`BEY^UXMm%6eAy~ihJWK{=4@4_7StRfVmIre=
z$eo7RaKH^GIoJ@8F(7{CI-nbSO>pW71sd-Kjh^D@9Rq^g_J_lB?#Y4ZI4qyF2huAu
zi;Yjm#%8$fz9pZc&{_;5Ty~Y2C@_#d8pl3vf({V}XtWbrttgp+=-s*ObUwKzx~YSw
z_UDTWd&#grA6uP~L@<z}+g}UD{;Jdn><ZRL;@FlJxoI#gZkltu(dl4pOj;0|A6;6*
zOBayOpQSBtgSLQEshDWc6@t^dwTSavq6e791`q1%Ia>3x)M@poD7dn-CmY$t<S{;H
zD}a=3w5n;WYvG+Z1Wi*7R{OziC7%7*mXKDWjol+#ftdyyB!7Q43&4gKJ#R0KiyW=t
z_A?0rD)lApHrB`8W3WfKsV84hAODXwVp~v47!nr-J#)BW>~%Z3XY3)$bH>H8hXwNv
z=yoVOW1J;<rtZPk1)me!$6$eJzi!EF(<0ZS0bos<R`0_bW(>ST@X2$>DYhYlG++gW
z@(Nn8p$z-U`jZb(#3-c%Hm|Gl(}4XL6`lw!OjwIFMX?49^Ujezy3sL=1}5vP_b@&I
z_Ybop0zwB7uD%gzh=8$%h>X4w>4<>vLBt*qPD)V@L_h!`;`P1}{SW~mgox++M)XGn
ztT{ydxo<=UA|Q|u@$<eBnTUX3YOkqIsW=Nj2&eX%sVTq#075{u*Ib_hJPkkysrH)h
zrvS47grI7#xgZ5N5I_j4_L}Sz;2?bo_Ko%o1+_MO1X>ot)T1kCY6YWDxbO(%VHijR
z4Zp>4wqO*mG7(|jl5}!OIxcS8nGI*U@C6JOsmR6sVVI>zsHZouM15ofOVkYsVIKq7
z4~$jpA;WIg5-5!iv_x8hMspz&HIB(Lp7G)(lmTg!-Z&;x+U7T=LO}-6wgiTa&J1*n
z&b8qau#e6O<Y8i?M!m#9gncwzUGN!Ty1O8IK7bf0iT(us3{1Qd&u3c0225Cg^a)ml
zjr&2POFy`sPO|i8+0qiv#{q2&j{IVYPOA?OV#o0s$U9KNJ+XzDg7EfRGYOjvgk{C=
zSd-vZ29&GMw0iF7!kJ;X$MTS<1S?c|yGraE0x>UEvpV$HSWFtEY~iG7)gnVq2Xdg*
zYV~K}EnsX3w01dyxDTN915BBXA=vT-2Sg`BvUZs;8Pwu~p7$!T`1OkJfhsp0b?O*_
zyg2aYfDguzr(>!FJnOW2*#Ml3@aI86D~4=D%%#ZHo5i08Ev-0RVz>({H3q6$F~lD7
zP}56|fxcGUPh#FbAqGlYF=Q(8tUn<Jnp-hcW5mez#gw)|g)7DmWW?NeLLMks#aW1{
zS(sWo6uRO8gw9NbLaQr2jnErYp-}CLvkCR2LZROk4<z)vsZc0+#e)bPm<k;ffHzL2
zO&f?q$ci-JvgVE+ebD6sJnyT3=N+wKEPS0pC9hJ@<;1Ujfl~#fC=8WT#1%|`L?+$H
zN0>2aNC*nHOiD;gfAkJVw84uw&^FHZj?Ra?E4F_Gvd^_7UWY^jSvW#<o!_{_Vcr5?
zq==_94kBk+AbN{)1#jJ;^krib^H*f-B*@ZENZzx+e70e~-8LQqxbJz+oq0JWu`vVW
zj8aRsh-7PyqX^gnV8^3K)7sKWknb{~wdFSq(3bDT2DaAY=^)qeVF*BYa?jvw%4><u
z#{R}}*pV4WQ*fgB7FWP%DM^>Pi)OS6ez?zFholJ@<D7i=24l}q2BWr2&hv!qw7f>W
zvResL5#iK^^UX(ria-=Bf?CP_*jdk7E#Z%KJyb)C{0|fWau+&LVFlfS9^v#2nO_c+
z0K0Tw#~%E~3_bcA4r?Ra<MqM<!7`zTz!N=EZC5k|tVK4U42-DU@?ec8MmIDTEA!?r
z53078M1h?|vx7L?B=R&IhpHmS&am2mF1iSYzS13xJ)!g!^1)bzL+LCH{XmSWsc3Jh
zpt*JhH4tcrAD)A_ju!g#u?IfjY1JBThQA@``CJR%fR_^5nZ<a)-oWB0oV;*V7$1n*
zwd4bo0H=x4@2OoXze#Q|=B3|cfB0kgO^(BF0#Y~zzX?czeiLecd0zy;x*Ar%86F59
zhtDL22)w~(LUx8X_)LC>xA6LOIs*QRs-kJ(W7$S}bhN`LasV+nud3C{>7rOscB~rC
zlDHP01mz=q94!1LWR8x8t7I+C7_<!u?;c_lbw@|<Gm7>_M;|hZ4n;>FHHwY~JzbSo
znI>dIVjTfm>sq);+MMCt&aca&g_k2o_?UBkXEd#ElTfEo1pi1E&;+4{Ays%1P5Dhw
zGHTSqH{r@6T4vz@UN8;HnoOQXgrCNzz3{T;w83#wY<vXcFtFt#@tmYDJ`<i3-To5%
zCM(f5Ti4U#uhN`e_)UtOT^}U;Ca^z$iFgQuVbIoFk2%7}w9u^Z`V4bvihTm7J35-)
zSab~cM%WvRa4>CjT4Pa<$wQE6hl)>wUtY!G(PREp;%ZU46_5Nqh({^r#6<g>v8C8+
zUvf-rw)4X4HT18mR%@P>1}6h(BR%}FX7Z|)K&&()i0d61{_JFPm(PMG=au399#q%x
zF<5L*gByl-pVhSz1CotHhVactQ4g#YCC9sX2Jhgz@I)o$_-Byg?^tqt50&(!9N(`s
z{GNamIlfED@jon2mE-Rw<oLEg%yAC1;1X;a%zIDdcxmDYg~;(vsKE5545mnc;jGmU
zz#C3soFvCL7xai62W6!kq`<KW%JG+U7?qYB-v;wJA;-_b4K9%5>l1Q35#c`va=Zv~
z95G6c_r^eu7eS6AM#=Hs7|8J=$Z^CdIo=xsIbH-gju<7!dt)HSiy+4lqvUvR4CHtb
z<TzrK9Pf>R94~?#M~sr=y)odnMUdm`DaU)EkmE&=<LfEMd!dlyMUdm`DaU)EkmE&=
z<LfEMd!dlyMUdm`DaU)EkmE&=<LfEMd!dly$CMmj1*xcHj#7V9Mfkf~!^5ytq2<CI
zqiAH|Ka(OHqBEHOgp%H(G6xL_X_1eq#zjZxrs%06x}lNYh!elypp;NKCs?lLA8;a?
zk`^n@2e$=12WjC2QY}1KWEVq((Tv6pvI*`AO7dA$$EQ*qpB%_Ln9xmeHY67Z2tepG
z{vh$*kGCu%c_SGW^r=)qW>KJ5=uq=>wfc6j6U-nMo(r=*#nubteSRuiuNDF&5bgoF
z*NC3Ood9C%<^1<-y`0KVb=rC`qsK|zV(aBvW(rI_Xkg0J<CQoGFf2X5m8GX>TTH`7
z|1i;AVd-e~Ux73ArWegs;2-vZi{2{mm-@g(YZdrE`oKkJ75GDa;G(e#JlqE^`YPZx
z<-KhYZI!Se^}<9~C2VXjOf*%(hWElmPbF+<FHE#l!cOajiE)>!sCx<4IF!Z-asj0T
zNhz{G2oFS3X%*_#^NuM>Xn2pJU&w%-mm~3pzmw*nMdFw_2`GmI1S(=-AfQ=#y3%n@
zP;LH`>@Xc}1@k;8GO7F)`wpS{#xJ+Zb&iXTf-eTk@L2YQ4ii5M5xpw1`NS8fpUxsn
zjXwA{D>{((4%F*F?8<ZKQGurTe!%`td>f)wpGCo@@50in)heRh{1a}MkQvBRtiw>F
z55nLYVvO};-mI2+14TWFqDGesv3a<635u`QK##7PSilR4KY1?3e~@T~q&wxrOBdIV
zKC(#)S1X<Hr^3p#6kPM;-3oK$K;Sp=qtCMIRN9SJvkCknfft$*7+sjd@5bMhMAB`X
z=1E1)yYc4`mx3I{u@ZRExlGIs!N1D-7O+S#89zzqR-E%kaB_Ts6v2HiAOo1zOizv^
z+u7T&nxh8s2UblvJaFt}|3NJ*2?J8WJ}ltoc0k}zOj+Z#n@4c^_!QJ)m-1kZD{7(k
zs49y8)glKL>M}<|<7ajf3{kdGqAiqNh)D6iK`9f%h=T)e+%9R^Npu6A$b%5j0|LgR
zocPZrJK%!$gtx*6KSd~;9txQl2{#4t00%_K?XuRk;j;jZ!Dj*fe|HYeH^>C&IpCZy
z;OM6e7`M<<an&yR;kUDZO!0>_j?J=MAY(y=LW&R>bnfL_&Jf)=qzWE)Qo%6(RM~gC
zLVxld+{$e#c7NTD>IYU}#m8oDG^ySBNyBg!ULRX_0agDMHWz2WYvB)Y(%>1$MV_0%
zeHiKum%z-!n>t04{)FR8{jpG1^emhrqBHl2v{1ITJR7Hqvd@N=mWESBi9<D3>oIZ`
zo#}=+Tg>x7zeH$cf0ih!r%_Qo?4bKFawZB5w`Q0xB26GR7)vjXi^Zn_RTMs!`JbDW
z-K2gnD480Cq|$s2U~c@)r#Z-=f1Gz5CY&J%Zza#LU?T^PEykOz1TJYB2ey!;3D+mG
z>-M*j?QEoUH%ny_VkgP_@kPvO>;egn<S@gGJ!1ZuG=-x3_*YBW9yE%3uTW=he6&@k
zOc*Cx4V&{cJ@3VM9wJyVYG)2Krquk|e@P9bfezrE1J?buJ~1Hz%O?hwAwIEJK9w#2
zb@6AOV$~sf>o|Xbtw7!$_}X#mr^J3d{!2tBF(mU=X7FUTHYcbCF~K^%1y7rBf%baZ
zlvtZuEx2=$N0G=_5Y!M7mmXV|o}@Re?sYI*MQO{_8z}7oy!{I)t@?0EE5O}O(F%LA
z6+0j^(H^v-6>tB-R%G)201W)e9{3BN<UsTxL-Ve<!aj~!Zo^U7!MURw;cfx>i(9t(
zGqVsxl9<1FNqi>e?}rfL3af4E4gL8u-u{LCIcGl_usXTHWKCj&36`fSVE$AV>Z=nw
zO}Ksq2+qsM9c5VC(pU3NGTv8?xKhMnHH@csxXD*vJ;POAR)(KAK-^SW0Y`#a<{3DG
z%q8#0v)~R|GZd@}`;x=7Ftx}+VHj8$>^9el7$eQ$79NmY?||ng(WKSoB7;IuhI#{n
z{scwy|2Kj#g_4XzJn6b|#Juzqo(>+IhgDA;4sEeF>gYjdb+@??cU1}V8;m+3NWMkp
zCz~6z$eZX9H#oeE{#yH0$!wCPEB5&g$Vqk2zK!$&^5AuyqQuSLV;<n>B&iKjypO36
z|N9e)<SHyfKuiJ{2j*@xED*k%+hcFVfmw44{#o02f($p~pZLsh1d@w&l$@FI=~i)Y
zRKeMX`@JCR=%-h*4t{#bxbeuT7Rn;Is?$#K5y)N&+yg4Trk_BrV+!)lk5DeRRfxx6
zjBKmmJ!HIdq5~T|+Z|Zg!!5V6IfHy23hD%o`nL8WEKE`i>#+rB;1@b|h0>h(3;&@y
z4Q>Qs>NlptjU|j6OxhBrl_v?)5=iNS7Eq$gybmXGp;+j~adP%qdfpM?dDKIoSIb%^
zj4f!B@hy+5n!s8uO$oeH_TYkd>M=b{9|=jMHPFP+mOHtQ{s8-b1n!R2+#RwD3)CCT
z&(K{^Ng!5nT#GQRbQ3}NYp}00XvnH5bQY-8qDhU<@is1mm9cO@ywhp|Itvvo*;!~P
zlr+$~x<x0UZeop7VhM%1342`WGXKESx-q@KG<W{EXla@`8BQCjDr|&014h&%c+_f>
z8Uwb&oR9X42*J%Rh4yxDX18vvm7AZf5<>H(N4>c@YBG#!*b=?L#<ZOH@yC+GcS4U&
z*_p~r^D?yc<of0IFXEt2s}><G_j~d7-EeyvjsTY#Hy<~5f}2=g-b^mPG>#Ru0pfCj
zeFbd>vzh!RR>8X~D$miD>vpW!TpB)%k=zF|51VJ1(}g3U!hro2escnOw}4JdIV-NA
z(=}GX+bJryNA>is^(WD{4&i!=mVJ+4<$wN~mVE`ecT#B=19*zkvIzdh(%yxlb5d!O
z06ax$BMAP+(z1|(D+iGeg+{nYVPNON4KQ=Z3=Dsunft)NPO9!_0G^_{TM7Qg>hj4B
zPv)XH1ZNr?0r*``jx|S#iFHV6HnIm5nvF1b^J?-%>P<<utl;T;0AG`oib)Y@Nkwk$
zNC-+wL`ue9S=cKdPc0Sa%$#>eXjWgTc=TQDo{rAKMwU+V73u^hGbpeo7;j?tLl+fW
zCtmO;wqFc+7)NANx%gUKs(0Cd8}MmZgDY<k&9M!O4wJzF6U>jCumUX4G84taARZ@L
z@-P2URgy_ANDW8$p{S8iD3LL-lA{)Gj8~LE1CQu>4|gMU4uk0!piAdt1bcN2!DT`(
zfSQqlP$08c>43tqI-zg?*`>XRMrg9W8VUz43A_U;Naa+-C6x~78jruDxZEiXG9_D*
z5{Ik`99N_a*woGFH2Zo2<Avo$HYK*;$tD|i#^%^4YS0$!Fc}M<2bhBktq_R{+DtMJ
zZVRacdxoHeg{sxPKq7?%saqz>HrPzmo7f7hMFyyn-q_BOsHIX)q{72!o(|mv1805-
zOUhdJ;8E87avfFgPG{_O1eenqWbaaRO(sgvqfgrSpv!1i&DBsd0(qasr#wPiEp(|3
zP8pI6d@(_Qg2tbjr#<Y%f9&+&!9}@d73&M}VN8%N34$a4%tEc?)i`qZ(AVZWu$ETD
zSt;t=&us~Hj`!nGf3LnhRh6suKap1Lf?4{6b=O1R;&~0JpQ1R`gjGkvyI$?x{~bN+
zi8RaN4gI5QQ`3q3sq0>)uaOtU7NWC|7wJk$Oo4d8`H_?4%MSoYrU+UMMKE#S<oH0;
z2fcNXdk3c5XWTUa)#eaQ$!<=x&Z;@syc8G~z#V0O-~oND`DQzg(e&7{ptLQhjfO^;
z!7~qfK_`|Ms&HT1k*-YKFNNzyj3f9N0XY!ikNI#SqFYWxz)^&?SKKdcJipOp<4Fjd
zmM|u{kh^*#XJzLqTPAM{!44i=2MafXQl39mZ&051;mz1o(9&wAA83Pn;K|Scb@G(j
z+JUyT(13!C6s~2)jmN_~aX(3Wh7GgiGf?g?_&ai}1iP5$xIe>nqMScFa6aZ`VkH>E
z)-&{aTi107I_1I?=3l1|cYWiB6|7?;es@pU5w>%!u^0=6e`wKu!Cl6_+T%mDhG+4%
zX^#74AMWtGXLTTYmvaSBkLmS8+%wTx68ks1jmJ=yUrcOkMTb&PG6AoF=)J8(Ou+Nf
z{91L2X$@L!>&gWkC(kjdgn~gN)Ee$Yr98*P^~|!7dDU-};Oe$|u5<P|#1wS5gtEFW
zZu&nszl0*>0Mj9@p4*Y-08>Ze08?D6{~>@)#h%aQ&goTHa<vs}V~;Hf3W{q5nSSi-
z%RA-^f1Zw`O&abckB2wdwdF0^3oYU9p?R%7di$F<;uO-G#s=)?%ED&Ow%V8N#JL<x
z@ih*1Z`o0RjJ_qPj`Iocasek+_5AL1t>FfCeM!$iJZh%#PTKUIvSQG=gM)^V>~9U+
zFULYHXkxRrfd#)DX)#7>5n1NKA^L5g5Ttb^2*h+FG55Kmg;+*@4|`C})7f8y2i2U5
z9`V;V9L0@`+&v~^6Z0)#tTSIlIC0DeNHqV5vZ&m(W5iae-wM$p=O7V&VgTeD-USMt
zf1Df!`!oPnL>}G+i=@M09yv<pKf~RPCgKpf)_g#p4kFjnLC-uJbSQL|&qxazJLq^$
z-gt{mn;=qG=t9{PZ|vQ&Gpke4xAns#XnuM)4Dz$tyVmg6NPs`AzN~X}ZR2G^L?f}-
zUvTX}!~pXETEhC})R1u~Z*RbOdrMq)^QQ2dU~IG_xj~f&F6uVx#+7a@ayh5uNNnVd
z-IAt-9S8-C7r7J3x5kCK6`%7*HTGKf;8!756Rb5f<G<-Z^Ee*ZPk*_#e2N{Xmp(3o
zqJX>iKB#@gjx}tw?5P3l4`$quao*ZvPOJbUmwmn8IGhKoGwVwNYjTWjSSfD((AgSy
zmJxApbCWuL=fVfDul5*xh2KLqv?ATtikqsJhgiws(J}vpw!GFYpJcr^iiPYA@6cL5
zakiQ$1QubUkN{2}`Zk&DXVv&(=<PT74z$Ai=?C#>&6<wQ9BAnCiH2T+hW4PLN6<$*
zPFZ04==-ST<E%ZSobw+_DXj7z3O{-@+dU4yNTYk+!r{obbkA3zQsM<=110zNmg}p<
z!H9-Gp<KUx12JHg`t?mmk74V7RlSVJ*BUB8wXJ(_i&dF%1&AP>X9rSF#U##GG>=Um
z)#Gclh0f%-0grZbz04gYf3)Q|I2yYV`xz_JamN@6^4dd#16-7R&3qUM3l4NW9AEuA
zXy#-4BRBS;bqqkFqvm3nH3J_SiLr={c=>8RuGx>r-|ve5=C?^dhMX6M-qNPG?u5<g
z7_G-586;+$)b)cHlJXDdZD-v$7@MUJSi5;bxKY%&-(3q7>9|Un+K3iu=B`@oWh^AK
zS(A;epYyR61X~lnmZ9oovZDo_);cVk+Txd?9kK_Ni#(A--1Gu5Q%Y?PS4KVWo_ZtB
z6QRCNR-_}a$_5Gz+R=MlY#ecSvhHX^>gE;9rAVSj(Hv;eTuPFgnIrDW1jiz7FQ3S^
zjdfT4hWb~;U5h|q2~Kd@C0{-h=EL{MLR=CcH6wt<-l=F|nN~jH6Tv3ZX_SSJy7Pw$
z{F*(48#oHZ$}T5tF)p`eW-ngVoyo|5>2HvZ<-Dq%*SsOm#ZS4L&={m#Cf7wvmKH+%
zTKP3gSvI(@i!R38)zaSR{T2$afhZWgS2`9jwjn(#+ku?%QCR6K(>~w4vKAp)M_92K
zjAMy7b6n7Z%f8tIeprRd0zCoi1rYCVp@j}R{%t7JYTC-Q%DtIoTA>s61a=5>7dehC
zT|*TFnqibqy?#CLlMuf<P@o<K8u~GskZwSN#-}TJ*;+vhst95p`b0#jc?rkKjfP`g
zQFPQ2eG`8FB(jw_9r=8O4b;LBl#Cr%UDy>4H597`n^5XLCegtxqLG*R>QSlZZx0$O
zJ7-g1$ss!`t^Peb?_Eg-2mbtm4X{=Ghqjch#I`0&-_vm+a}c*%7oxn9=!C7X<B#B4
ztosF^)ek~D#zgPEpRJOWn>8Q~Ti1vr|JI|+*0C-AXk-}^72}xBk91?%QE6-JN?@Y{
zS0`4ErG4vZtHEaW$=Ii+GL4Hq{7!1-=u;1~48Lc6)p8$pUUP9}8%nHtCRrbvCPfFL
zm*6ha!)W_5X)4aqT21}|IvIWVsbq^+ON)nF{0BFAC))eGs%tIV`@F(!Y!uqtu6tga
zkM<tYJsYafULEaKnQn;QFNjBHCG(i*!-AP&&)TZyVq;s-coRF${Rm-Gl;US-mlQqP
z%0mD7=;$)RRf%!Q)*BGdnS<w1J|V9*c(vx^KF?vlHu^RE8kjA=#oq1X;Wgt8Ulvqk
z(AlOvV~p%4KnGH`f8@Ou*%YI%0i&}^OX5p7C$3aKIL?Sj$MsF0BcI?fk+1S?^?O4c
zc-301j`vdw1qHz}NZ$nqWV;ute@(VBk`)zfhJF-T$97{MJ;2r7wMU!@MJ!V*>c+`3
zyT0VGP~<u}VgRMah9a-TIO~|soG7jFED$cP4adYG9MOe%q=Fd+c+?4Ch6N#*n`&NR
z`a%>lRN0wT=F^UM;H?`Id9fGt*IE5OO3BCOywt)OHgBM^((cH#nL0!-aBY4Hfr4pj
z{vI(xMCRpy$OJH}1wG`E&G)+Vv8tiRn(UZrdTa$QPrw*#pnZUonVt>U&f1M1Il|*r
z?6`(y)B<(`!Fi+_zwox9@+RRWxbrslEaxhg)eBm>&P<LUUH0HQpy|;0@Udg_|BKaK
zkcy*xjG+XU$m$P?X*+iHwbra5*USMEY{3_nQ_zj|T|M?|77z3cP6JoVf4fYpdOMR`
zFnbBZoAGaW7l7LZ=wAX177qWA7;MGALa&Lmg(F@^igz;wumfc+TH<1|w-L8>6W&I=
zqKd`aXLx&u4AlERl5c$xsY6ThnHp7XHJSKjHBf~kK4h{t&=Zg^B2h>=`luamK>+&+
z3rC=}97tBJDmmVcsF#s$C!S#3s;UuyY<)?qI}0O-IC#y72xuh5+UNLvh^qIIo#m7t
z#<!c$-2x?YFowwd8p7{6%5?4OvtC8`IF@e~xm{%lwu;Dj)Dl$X5leKH-|KDx33p|o
zL^V-}(+&7{d|88FT;7~X+)L2KpuFYtt(bi&*2;<Ls!a|QwaonpN=0WA1BE2(5L<qT
zNji~aYd2#zqm;toTL9d86xlvU^D%%Fs5>OTBrQM4cnnDSu`+FYE7H8~K)&r8@%Dzp
z$_oL?xrjucqTu0Q@t;K`GG-{@BNY6wTLuZaQO@G~-A)b}=wrlY{3k_e+xMbzop{O^
zKb$~9IW9gaU&};WT&NrcL01x-qLzJaR)n_ieg*ew`;cMl7Buk-;D0L<Y+a9x<xi;+
zS?Al#1)3<v`@1Sm5RIg7G58YV%eN4-#E>G~s!c8c_PxY-t25d@iQeo&qJ1n=au<%c
zw?PeC)t77mno>C8ed!wt+{B_eUR$YspkvxT>0F`^z}`e`Rj1TuC1g9-qemzYQAE~O
zW)k{F4^b>kRjnMz+xi}`^(6|Gmc1@5dzZr{Zy0(eC>*h@K`2Q|WD8jq(Z&*xynGKz
zz@#omrF^eKK|%zWUfMqN1uBplbcxxAB+ORzCg@9b8vR1U*cT#RDnkQN#db`0nT|ql
zg(EPLShXNkXhQ1Qim@#R&tO-o-bCf-kE$5d%Fbw~s1r%pf$|P?hcs6>;;9CiCRXpN
zwxW3?KOtxE2MmF>?<>indY7zCx~MXrP#sx8vWse5+k_pVdtX_c2%RBEWYWSB!~jBD
zx8k`I{oJ<;QN-sy^2Dutc?Z#GJP8*3a2Nl@wL1RLAxHHSa-#~q?ME82#`1M|d5_$b
z?5unT!RXp?fUiEQ#RgD2QLtXvQ5$5-gtK5$z|4;g86O+$jrlW&+F!)wM={4zJ#Q_3
z+a?WjQ)?IwQ^QhF$$-e*Fw=OU%Ve$LdCDr-98mikDOGTEN00r53ABbPiG!E804%zE
z#7{35c5vxk>UrT3JaK3)yA=Nxl{%3GV^C-#w+3<wZT*~*u+Vnq+13jNxeL_O1+H3{
zk3p*1M&VMJ--0lhmf}@~!(|Q(M||ZM=ze84{-Kbam$7>MLK;9{3h4aT1cV}iL{Ny#
zAdx49Hc+_aF0{RY3Q=~U4I?GBxAK7B=@7d370M&h)4CB9@i4k7$lkFj1PVBI>!59x
z8KGnI$?cybP0W8j%)2@K1ss@5OK{Mk*KUFhFd11aGlD+xO9j!i1{0}(@k04csDvFu
zou?CgmK7&W7@B`DW8#ZtLxp9t;AeU$zr~R0W4fGdumBe|7>mj;NU6>VVz3N8*<cCc
z$AVZl25g}FQnbM`V6b*9N|a^2z*OpEx`@WZ1Oa2zQGe92f~xVRIC`Qq>5&mpg0*lX
zj0LRA&}eDL+ObYo@BO_-i={hT$)R)_N~;z>!jc}*5g!zt^J}dZWv$#RntmX9tFl&T
z2-AGQ-efeuAAMMih!kt(l7zj{Yox5L#4Xb&87bF^k<v+}zcj^2d1`B_k>Zao6XT-T
z(@v!yra5*jb<zZQ8Z8mUx+FS8j1xVoS{6*U@E%OLG12?~8!c=*p@p7T=NHqKq8SCV
zM32o%wh%VZXQ?e56Mf#Y#X8tR_>tjKh!=a>*g}LJmT`+NlU68$Byul}A*lcFSjNc9
ze9}OnF#@Bc#pgNXgHKu+B>vcqb{Hkf8WB?jE(?-`WekqIR~n#&aSN~*B>k~`N3t<G
z#u+M&*db~JV24QZK6Z$-QL7t3uMXzQ)TI3Z-vWqngBT$fq4<K$UuT0f4%SXEL0ZKG
zq3hQ&K~l|t{}a<A)##wc+-q~-Ty{nEdtYaD{2I1}&I3ac*}fKnf1(+r$6wKfHyXcw
zF`)D~#=CJ+PxU9}I9bF8!;1H>vo2P`(R(_nPWH0_+2%tm9BZ<?-KyQ8+04Co5$nu6
z2>V4@GQ2K9YrbC@F?4It8z3Ai_H2qpgL1UyK^#R-D{i`Oh1|da7ldAfTX7Q`i{F%}
z#(|f%%9};)#!^e{Im#b6?9T38zmk;jKGC50F6hc}6^x>4xHPD#8`)Ki7n@O%RKH6r
z$G#DkTg`Hn=Kq;B-3k$~USwvtAPAvEC>;X2H%tV}uz3&u&4gj|DpI|lV%T(0awXhu
zV%@+@q6yQa1cWkcn5Yx~jz6DJ<MF1HV%m`sAxfdViIN6G<qc}GFG5IHZKm8#m@s0l
zP+UI3Dv<6~6i_%E%4FeiDpNFElub&NK-+qV5i~()?m*w8`X}nJSU9)R#RxqSmWb%$
zAFw{yPRg!X%wJv8wtj*x(JtDDQmE8!hv8Q^!m>#a52LUgX=nw}Zb5Hhii(xOtcz#3
zr>as=v}ky3NCIdDQ^NAxhh6uq7ICl~Qq;e%u~)V;v1PA(%#vw1i)~WAl{kBc@vtCZ
zpKN8!4E9l(05F=wB(gFUj=28><Am6O3I&XyAQ~~{Vlr8FkY$}DN<rBVtNf@?8AKc}
zv82V=5nBd$rp59SN)_W|8;j;RaHy0rj(1o%+E&{5w5ml7r>guF0Q;!&LF>mGqL2oK
zJ%5750uU??>ia|t+6ARYj33&pQuaP*^H79oLs&(M-EdH)OX~1qra<*!B{Y4KrV(jS
ztQAg@!Vws9u}YxJmqS%7KaQG3jfYmAv^2y{Q3eYwJ{n^rAwdmvOEj0=$AAmvNb8Ut
z_6TrDdP-O*QpEOziPGB<v4Ily4={(q#a^=v9aWReY8Z%Ofr+hEIO2_j%jDgpw*+dg
z7$me##9py%krPamlP!}-CYUhtINau7N(!)Gm-yN#QK6lR%N;{v>BLk}zrC0e<vm8{
z=msQPJo_H;x8pty4xaL;!<9}u0Tx1GKF!3pi1>VX8w!VG(pXwMCU)WQWUSYHAHsAR
z6?$*I4>^^A1dJ7WC)`I0i!**5|6z&>YLwXw#eeG#f<YpM!%+$RB+4xW>MQgH@5^T-
zDk|S=m5O3$3`i-KMSxtybEj3#);6u~YM2OGb0al+<UOSQ6@EUPGD9xfgIhb2M%k^W
z!zk-===SXi3#{JYd7;?A(hHyu$3|4U__!vD$0{Bei)a1}Vi*|jF|WZEG?ac}y`(&G
zeTDo-H&Rzu$}e5Sl)$_f*+yK40G`*(SI-L<%M;5g!eQwJQrsLP_$+y@w)jzZ3tr4Q
zv`ISbc*Wv?xtwbzpu$i2@0f)pF;3A{<w8A`aVqxtNycd)cFE0RoZ3^2)Ah7RvBEXk
zjUThumi`_!_pwkP5W@+J)A&iibJ3bU7OJsDU$Ryucu`wgD0yMP7HlNNo&S&v9mC6+
zf8q;}@fY<R@ptvSbd`Eu*oG&`QvVXE{W``!VZWl+GNEx3HKw&qd}=mOkr<j?8$cAP
z#w)`o8Lw|y=BH)6iaiX1v<z495M{KI-s$%FZyK%m@u^lAt%uopt?oKdj2xB_W0jli
z>|OZXr)zOoDE`kK^i>~>@4g$z8}_if)<z5`77Dq`b2GOedbVj{{@OZi-*3<~yB@Um
zmto;eU6MzB0IROV=#HPekomy?U{=6JjSoPTbT$`k4jOy^Me`ocoKw$x<%<FDfLFwt
z_YfH0JntcUEcb9?-oKxDig{1LbJD!ukuvY;vH^3UZ<x-QIh^;qG4F9(3y#uX#T9|r
zz+2DfWFN5vH_TwpKaIz#t1x=;!FO@b2lj_d!m8B|)ekJcjJus*mtQ-o{~N|DV7!XG
zZ-GrPC-=tpE#S6&$M=KA2XIdWv3DXC>W3mnrN`frC@yMZdF=D}Pf#*1hpDI1j?=rv
z1uew|o4Za^>menc?kX>KIE0FAMcVRUF^X6qdzDJC4u@ZA^GAaZV3W+I=!6GsKKO#P
z(H+|8S4*^_wfL=?ve8Cx{PD`?P)OxM{&vmMU!snLv4KqxNA0pGR0F<kt#@h5M_td=
zkL4ZF33aH<k)_&!ix`6G$I+0zBPaaRR&{!r-^j)mfjF+*joYg~;3b-^_&MEC=|Rs2
z)vJ<KsLtTD)A*9S_UmKlg^I$7hVT1+Y|aBJ7#YZ02mCM+5pMMpVCD}H+4ME|=1%s$
z_@4ju_?D<7zK<aI&G;VuP58!*eP<HkTJwZ6ZN9=&V|*nsewSc8_B9w!?59ZL8wHX;
z99goDp%>p*PZ;qp!}sx;Z@~8lh-~uRyoyGjZ<72hiEo11#fhyHmt@+oXHu&ho;>Ds
zrh3E1y~9{C`^JrX*`NcsiC}RUW0PC=^q6c%l2vW)3gnVJw+7yi($v<#1?mko-1=YD
zaEh&g{5|5`MN!A&xI1_VYMwD?D*it@XDXelT*hsWe3yOY&MqvwAEixO4aZExJ(arv
z@WXPD-uR_)ocw@03?e%|v>H4jd<=Jr$Q`h>c_sM}UU-Z>u^4J_ZJrxK$OVTCHd{R9
zo=Sf%@@EDPZuf;h)W*dk=ds=r9zLD{&tdClvN=(Q&y9e5-5w9LeuUj%hp?bK!;Pc$
ze#`5N^C`Ew@nh*NyzXUk!2#a7$(<!o@ssP-Z?5#AVzp@@cDu8n=Wn>-A+9aGg58Gq
zsdYzIFgB{Y#Qu38+8{1udq)5_O6i7-1Wff6?1$Dc4H=r`wuuaig|ss5sJLPij!B|x
zhxh~VyNlHiVX2=Ne(FowsFw!wTJ$_DALD0!8fJ;$L&K?}PUdYgxEB7>-sa#Jy1Rq+
zU2>S|4uG-rnk%HiAC}Z2UkGTlJvU5$24L8r_nLwsU7CX7#+Uv;5^f(!&kd(57`E4a
zsM0xd!wv=Or$t&6tY2=ppMv$*BLA*n{d2?p6)Xe4L#oQl$PM#+7wXN_BBv=>W^OoB
z!LqbST;<Km4QDCX04=g!!3N}p2PoKSxP?~1PRk9SreN8)*;m1`bHmvRHc*S)s$c_i
z!vhse)9O45HfZHu2&3HaAOv~o4bCV{aO*e39Oq)MAV{;rP8HB`1xGC#it`~_dy5^o
zF0);JZ8g6V2ZTfLm_z;-;-(+D<&Ou0Fk)Ksm1*8w9IQmy+?k={Y#c7nk(fnkc5m+U
z!>uUXlTd*%pf3~$cG8e58HKA7DtP&h6_uV6g=LQljEHVUIZ~o<VL}B4=29!FUrH2q
zL04dW&ak5Tr$ph}gbEB3e`<iu$ViFeVIqvyJ62R?N)(PZRbbFst*ES&DBPn^fw6ns
ziW-m-h3gb5FoaPn>a>(795<=JNLE-;*(p)DT%iI3%1fKs!htDKgAg?cw`xk1KW$KM
z#KP_zte<LimjTX=T2na~7-Q^$!X;M1jy{cN{#3D{n(MhGHmxL<JqO|fYzv9I1|;Qm
zyS5y^B)fcY5#5p6^5fXGfZYxwIf$b#zE{S1%g&%@LzyvnA^0ABhjd4R(I><=e>}qT
zWzF@v(LF|6KEXdV!92!B2mhv*fdsK5c`45@p*FvNY7lp4!|P}9lUhfb-F%yCXd>5C
zlH%y#`mRmXr%F7ZYT@4^+LDLZ)Hpc9Z<E!J#NLQ5^EXHUCRQ~_Wv_ioS`R;~U@IcO
z<%+B8jE%fzFjJVVFjKN(dt7m$=a1mx6mCBS(=_L!z?Ecv(5z|7_1%K|tHUSk)irAX
zX&0UZ!SEdU5O((3&4~c_&AR^(Ymsg0+~@1ZR(11Dz}nN1aiJZ#(#;nT=Dy~s?bs%U
zqU^Hw5u3WKJzC~PXwk|Z2Jy9-XES(&K}bQHnaSW+41yWi%){);Q3g?z&D_P{F$S@i
zVl%fh_yvQwOv7fr%;1*{;*JQL$=@7b$unjvxV_PQhQa*|!cw-Ge_-$cgE+QtGn*LX
zY+I4V;1UK8F$igCGb<T9%plYPn;cmC|Ju9$=(ei+{wz6(9XpbN5WLc@Du~vGU?kgd
z972j^OR<#5iAbCh0_8=q<jBF6T}e)ykhYF(9BYoiXH7TGMpt)(Ej{hFtcB3fuC>#&
zxNT^hIZ&5VsG*eFfl}u*rIb;$&-eb2pPr=9^^fh3anF&y_kHg7e($~C`}5s<-@R<S
zd?#j}J@FrFPi0TsvkGf*uTMja+lX?4&p+wAgj(v<*tCR&det$Ap`5hQ#z>rixXuXS
z<_CWQ9k>$@@b^jPijLRZ_cU8HrPs<abXML)^eTDvSseR>w+kEQ^VtkiY9iy4G$n}@
z&wFt)Wvls<v}L1KS+<isy#{W~ewss=P1uQ-#m_X?<6ZMJ#q~6G!)I-}AECNAhT`*7
zFU68y2Zc?3p2XwU0z?!0wcNOg-Azk<sG_L2zhgT<fAH`4zIc*QG{9KGeTenH@wXP{
z*Ucwzv=b^%zw>+@rsOAZXEEKfK?9091Vx7{yRi*&0%4OOdmUwTFBN6_>>>V(*B0Y@
z0_+dpFx>oF!AZ(?N1{8=i4zQ_UiRcYM|(%XZ9aSz^xuSw(-PlYRDhDSDIWV(3C1GW
zm5Wcr@c~Zxso8h$L%r+&Lm}>w#8MbdMz~SI$|y(hX^1E9dnsYxLm}`EKWcp#Jl^=@
z)>1@@_NZf%KW%?q$AcVYTzr1Rjoo4vaBWEBBXhZXFLQs~dW=GXdl`2>F5TI{4C@;-
z8$#|jxMRrNBi-xZpYU43jRRI1$w)UVlYI}41%%GrU?4+wU&=0YOv-kXYZHzD!M1xJ
zt^aKY7aM)yntQL2eW`oYx|4yJ_GrS;4X2ds^kQRih=J@gwlO-oB!umqRyx3)zPkz0
zVA4n{*LZ*;2dq8hf`JhpF1jJO2Me3lUVyZ3)Tr67%%Dk1))2)Udpt)7%40i=ABGj*
zOVL{DD6CC+IGXfP>oI1<3+Y#^$6@v6{f_eH>#$<+);dNI>Kx({L$EZbKoMfujCAxO
z6dGwB72!Q1GWSvIC|pS9F-G|+1PLT{%l8`Wb;F6}D=-{BU*}Hj$GhQxcY+0c5C9c%
zzVYoj^OK)v^CM3_zz&;CJVsmpv0cCLJMMmb9Em;Jd(r&x?&&7_@C;XrnI9Y$7@CTn
zc~9anTd?Ox9hc!Um#1+mo+pm8!)mFyU|n1P>@vKNk=k*r--iJ=#ozr83u5f}292Z~
zPtovwgmxvDAe!+P$KSZZi}Td_e~EGvpB|sR2CHoObowiOvhp_e+J7Go2{*o)n08>W
z+k(F5$Qi1a@$vF!r+$ua56t_n#+&4Fs}l`F|7k<{T>mpA_%370TmB>ZjB4r)<Kw5P
zAmUtdYT6F>(ctpQqcKtw?u)?05&HsWU=MJ5K>W;ysp0ovpywD`(S*|#`&?k=Uru<}
zU}@1j_!8I<xXC;?hzcHme*D4}SlnGZz>;O|KZ#h6Us#Nhz;a4VUF|dGzCr{*pAVeC
zS&B1oFMmeF|2n*tTX9qtK9-KGKw56Io+K@K;+J@0ep&cm37o=?0|jpyU}--|sw_X}
zo|-idoTs#{<4ODHe3mpPPueM*m4wuo2Sxy+98l^9?f^G%mPjA$lpG5#t4DksL)TD}
zc>)iA2(J@$131mG6~60m;k`3{F+N>>ZfX`sbUu(rt}OW;I8(-5fo}!YVy7Eqn)~kt
zI6h0sXL(syJGU>&l77*A_!rOzB^~V+%f0K_@QR<+*>@MkBc*|b<Zt51KdMRoMfcPN
z<IzhjYu~2y?<;9N^vz~UyMiILUlvI^bTHMiJ@irJHXXgdFKocos-%xYr>U3Jj>pF5
z@^L#vd;*`N(22hTca!o?Ot|9D#b0!k{|H}jl;Z=Ki&JmJ$3-SygUhw@(+Z(uYQ|ak
zo%p!pTkx#l79e;iyvXh$!BK^)-B|N3F!%iiWtm+>5&{>yhvar<K@wJwg<nIm5A$Zj
z1^sUqJL2YHcfKROIe*w)08(Hc{5+(45}R=cN&O{k$~F(4LqT)&zl93ugz#Z^F|rls
zYL3wrB=9mn?7jqYY1sW1$XmnicR=33`T00o^COgfA5w-3;Dx$Kx_%_57djJekUl4*
zyGPCpBRaac4c8&Qjm5a;g(^}1H!!5~t_e`fa2!^&40FH1cn0Bl5?(9%VeBq4_uWXb
z$N1DLF7Jrq@(xe@%-p9iBP-v(ai|C)h+CRAC-Hk1zdy`9o7Ei$Ft|~RH{--iw}JTQ
z{)PCMf4V+II1x?G{S_18Bz1bN?B*!M=OoH9ie$4jk4}I10iOEbMzvo{nRCHBcQ3tm
zuMHsP1Jqxl)UX2c6WHmXJ!Fazg{ZD})_j=8EZ?S@9e>e$Vlw`FR*F!g77EdaJ&9&&
z3GgZsxf%tk*ov=5<L6mDa7?}AEc{`7oJ}=Py`0Ejfj;hcFXGfCe71zao%!%Fh<3(L
zH6>PFLx;~;%zfh&TTBi-@CgJBrS8M@H}wAN+2IzftJtA@s^Sm40FO8{j$iS>URvXH
zCB!SpB>p~ul7OpEPI>Tk5xW$NCbm6m-ifUd8Hd|0q9{3<Y%>r1z0d&9KIni{L3$W`
z3u<Oxh0paN1lBvueF5(c_Wz7evzD*?9KIr(nib95)QqNS>3a;3cCR_ghCU~0#B4tN
zc|e#GF`pPm3v`+~hv@v=5I{tJ034*1i}(U;ZtB-`8NijuvAJf%0iW37WG8lG_h36f
zk?TmzcOhdT&ufu1mgkLNqCCF=RHNm);m!*9^JrXf_VH?*9@Lb$GY_XuxiRJAS;J<2
za0V%zqrlG+zX$oj&l2APn}??L=xUcaT<tR9!DtSn>wJ8)g_~VyW&t)jM*RD9waY2Y
zcjJAWU+uEoHiQE%aG?y{{6`0cVtUht3qvri;4?7r6#*KCe3(%1;jqzX&4XtJXdLok
zD#4e}IG++={*Vuo2);!Od`y6ghJ2Vl@GWNGhyWK4`7m)n$HHEqt6iFHONM-yF7Oo)
zfU8}aZ3RO<OcMAC3HSs7g+o3}4fvK4fU8}aZA*uIm=N$45rC^*nr%fxK1>7niV48g
zF3q;$As=4;eHd0;psQV)ZOevyc;)w*2*453%{J4J&qTxNrt)X;x;)p67eAC{G$A(V
zjjm6@VZ+_?8jebE&~U|uPmz$*?B==~*ak$})`|0dA$1W|<)P&$(y-#hpP^=agv|$3
z$g%Dh=2Y^4HXL8}A4R^izVb<w=aUww2W9Owx@PGBT;{%*sz<Z;?IKTn;7&)HDh~E~
z$zJ`;ePvkGWAg{6+$|GeW4&GUS98C4Gnw3!Sjmo*Lalxc{-`Pr@x_$Q)YBzaDJX?l
zOt}Hg=TjkY%s#Cmti-Z;0C0YZ5}H_dJvq0L^D#J6iD%c_l}0KZm;f=(Sy=TN&{nV8
zDOOay&S89WUR19e0YdmzE_{Fsr+L7q_K@(65I%daA3U;-;cgLnr4}Kcjhy1)JqiqR
zHu5yw#^p4ToRuWU2s!+2ygMn+63edRj8}2SkER%(M>~vB%6H?>^A==${6fjp1>S;;
zPrW>+LWLM{%zYK{h9c;SZJcoM9fXn1$opR8<u399+s?gh0lLMVU#8yB*?}wAqVgOI
zI>BOF*uSeiXo+=N{O#?XE&f>0va7qbH5jpU1Uot-`(<D_%7KhRy#b88oV`UOk?yXS
zx7N%1>g7%K@{anLxSc+me_a|vL4N?zh_>wx`(xda;H{P$da{Nq{A~-%$OHqHmQZ*2
zKKMNlv;=!vg26x(v@6&WgBzhd71`5~lJ`ewMjpo^4+?n?)kb5aV2x&@k(OI3DsE{D
zx3qT$g12-;DGj&Ox5c6?2P>#vkO^CETW7J?D4pFgh5Yoed{jfoDpe-CqNS@#p$8SG
zxe&jt$8LkUsWJ_13zPdzRW)2P|KHn*L(?{Q$GW;>slac&_0C9JEJ)8~-EHAmRizqR
zX(5~1>W{{1)mV8-M21%#P_}D-EErwjPk9uUrmYQ#_*ST=J8H?6xU!bca5SbeF)LXX
zQe@H|Z`6uMlSd{`P<ofp{&bJBSf?mzD>IVP`wJOK^Nfp@6c#Nr_v(zqmAw2#1%<`S
zbk4mJR}A@!3zim}GTa5;7FLi?!EnHGv!yL;`Pe#3wGs=pMQ{EXo^G<(DSPEJv1uJE
zFXvdD;mFd(^4}9q&;G6VwRN$a&&+S;N%JSm2M*dxm$3!4c#D7EHV>7bGHniNe4~3p
zsj}CovCH|l*W~t31tFK;dbs8G$)k}o{pxxY_4ign&h-0&!TZv^TUbd>OFeo=o!Zi$
z(+j_*CZzOf)|tF(jcXr8A+JI>b=#B4G1z@~p~pcN-m@c_>;iolv={TEUk7~{bQ<(H
z==|O23c+83-Y|p;U<2(XilM-9(2~|<vJ`#y=x(@!&Uc{81D%N`leOsIMzCN!4SIZE
zGD$OtB?qy93_A9yWO4%3_vvJ^1ij);&@#|bP#@^XXAlp<dy~mY&>7HK(5^%1ckm8A
z3R(&}14>`ETl&z!f{uXh1XcQz$sW)y&=JrX&|{#!0i+*v40IZF5_F#2K@0HuJ`ZXE
z9l`GFTF~CVOeTjwj}IeVpd|_LgU);w@(RKC^<;88XvtH_<XfP<-vU4MIX?#Zpe5so
zAN1JuGx)>v%nbB|nRDOE$>a>^C_V?7fIAt?L^G3jV2hI1Q<8UW@sffO=-vtxn@p6R
zk0b4PR!k-9O{E*mMf(bRmD@kC_Qopfb>#6NeonF=@BSRRRq9P84;fsh(g%(8CJT;1
zFqIuy<S^L=7duR~{Y#vt<9Wu8{H3N^U=C9mc<N21@KbLpa2FZwg~R#`2S<?;ctaMP
z$Nw~f9lbZ1#NqTQvl6zS;&%-AJA^t+C4&ZsskGnNXtEfdTxu!>;xH9Bpb(e<e)NXW
zqb8HjqbyN65(dQWh|yuP4CW)Q{fin+HpAAXrZOOq#ACgo$dJ%NPE*0gBEx1agtTqs
zp`gEq=orG8M_EpgULoZ{(pQ4?btK<uDjOty^)EIwa~Uc9IEoCP%YaDUX~?k!lF0^?
zRjz;d$<V)(^xtS2>2n(k7w6O`<>zv$YkQK(*HiiFP04dpes0m^XP5EEl%3gf&9EVd
z!yP$;R~|w5M-l#LC$H;VKS)o)=t|d5qp8kt|58>ckRK^6p%gWxP^Zi#Pf<2rS5XUC
z8(4;>1Z*sdWrCuVC<>LUYLt)TSnIr!^3Q21={Fd@xRgrLJ?!65&j{RL2Jj1je>9Rz
z(j1>AJuJUbu0(!QdY~Ap73t|QF3-yrA;UHuGfG~4k>NQV>M|A3ZB5k(`gO#k2W{hH
z6z}x<fPh7Pa26S!#zO<E9IhfKSgnZnJlfJB*m?X}d0og4CzaPm(|mrm1aQ?+JJSw1
zwLQrssX-bmECT>+z$uPAULH|Tcgk3?Hs&kfbA#^<;zPYTVnF^5QvJj!KB#e&0@Ss}
zBExq60F5*hIbd%zl|T;-LJyZ9XC88XlnO7^E^Of*(JnNwa+GQ$DE=!^ABOfPlQHrq
z4B@m3W*+z<34#)S5Ae_d^f5Xd8}5`|;MxH&@gD(xEDQc9@JZkSogDh+vh4m${5;9e
zf>V8-&VuKo-LRpL)XV=M@S!X?-7h@@oR(^(q4;}&PXh-@8NveqCbQrNflmOZ^I@f-
z_KY@K`OsI>%Q5BiLk4s`+V%{M&ER4;Z_maKl^S-VJ<04(Siz(E`U>RDqtB+Vx<q|_
zB3FH_2Fr5v&GYEfX@A7!>d6mKSa?0DFCyJ};ja{Z`2@n_@y^)}J59b^kv5(+<Y+b_
zmGvKVnz#+8_wS?lK|cxVKaLokm+hyVMPXf^<fJ}{^o_$Q6dT4IU$Sy}m+8M7O=Ee6
zJ9Dd>)zfCkE5W4(yHoj>O%H55VEm<#w^!PM0A(EI+ar)uuo?A7r1OYjE7f;5)pz5P
zJXznt$?Mx0@GCxyr3i4F*h~SX?-k(lUrQ$UpkK*ap0wi=pYaTu+bqS&P3mIxx|+sb
zCz8o)2@oa*>IL3&KAG$k@qLiWt+roh?WEzW8J)P{?hHr_GkCAG-c;Z!YGVBYBqGPr
z%4xzqjc~i3ea~<o&j`eDR|fRQhD&<A4P(pDbC@Nf$gq0aNc9x`LdLjngK6|97USHa
zteU0#CV4nDOqqT>nY`yOq`aKvrqML|g*%LoU71xL<rK9$Kc%toru6ba_$A<_S@2@`
zv*>V&mlgQr3&~^!y?nEDy3^YuR({y{%4-@~Zv4oStkL2fAw;}y-q*nU8u<UIfteLN
z-J^m^E$lpFk=FO=|Dgt`>n5{}#x5}OIiPzE>z)sa=VI<nabLwPsWI{s{22!yGUFEc
zEyobDKmUMm_X+n8if8Hm+jo<l1kH<xVMx!+TY`axo@Bac4g&^V9W%#8{Lqy#Q!1!n
zLkDMJ2n~_Q(B29%)L)Xpkdql4X~xWqm~4@_kM{Gy$aszj!5Eq_Bg1<a!xRE6f*(sd
z>{;p=%RKD)m{1&61KD#bo?P7j`v2@RmaJh8ihTZSLH|k66M}wE(B}kwRnRvDT`Uy5
zLeP&0S|jLsK|d~NtDuby4Yyj#8aHh#w^UcuR;;pA+U%=rHI-GCvMpF*a{FT(zqzWW
zJZr=?pb@2fLS{f3Zb+3g4UA<|W2$_m<N1m#hw1ntMdoKZzBpA5((xsVEKlipfg;OY
zI$oHnZ|V3_rAz2J9WPS4gdWrJVx>1Lj>0JFZ#ut8v1G-~itQU(PHs11b!YmU+3+hA
z*&b+JjmnjZYzNZutCa1ceMrZbE7|%HqjI&9t^69570UEki&g})8x_=Y(H>|WjY_F9
zk`<S&+5$Hfr+noiZJSFo)V>*%Vx_K|!|WXq)((M7{j+yIV4oHEv8!Q$v9NzdAvNYH
zCS~W79H<reZ$U}^aj|gB-uZx4AwtAID)`F;e?Z_f0&f)fQQ+C)|8Kxa{)8?*=Y*V{
zC%FJA--rg4_-A$eHv(tzr%fa<H*=!+1%H7UA6NwbWx+ox_$vkeqQETzzh2<9K0@+m
zM0{i;&@Av#9Zu~v;}>$)2sx*LXVb%3#-CXZe+rz^YtxNyUKIFF9ez>Z`ti^b^jCSB
z@&@%Xvx4E7^<o`x3U@{)pEg_ODVg;v1Uy^1?iX?_r~+izng%HKpV|27gDMKwA{5N#
z%)$Rg4*uT*&qJ>|Ci)XuPL`u1C%jjO)8-Vy>vVXnz%2r|AWSk|fh#(Ehrnk<yJ2D6
zsCNP%)8U5%KB~hX5_qo;{|DgN^m8Hyo~vA)Ve(59_k@U`AkQ;Av%HaWws2nsKdqMQ
z+u`3cImldHJ7&hfDG%+QzJ0rv;hF6!tsCZLX;<yQuS0q0r9GxFY;FX!6*xZQ$S?;O
zUaXYVaVI=76VJi_1;O8YJLd}s{(lv?Z(Tb6E#MZxqb1Mez+Yl=w4B`jj*vfk8-JGN
z_9_ejuT++0^pAhWaHLDbr$&hUC~(rx=-+aH&6UCG6#Qel_-__?ofrs<VW-l@a3NGf
zJ|*OjMLEdkNMZewkTWUbFXQtBaEr#jw4Tc$|K~!^%zDnr=7?c^Q{a|5j(?65rLZ8o
z{Of^V2|d&u<cw_23szeHC48qy?>j=yMuE?Ze22!FX_azT^JliU18a}KCm-WDo4bPb
zA>h|>DDD5tf?uiQFtVGOZwq{6Eq{&){8fREevAXM9KI>=F+0cE8X2sGcoCp<Swwo}
zdr!H*kGnWOo1=$yoxpoVM}%gR8K1ysL<h*$)ZlWjz~{w4U`X(H0x!|@BLY_L7yKo+
zapaJ2_@cn;+#FzY`LKQsIF;LyM>sCa?WEwh>Gbe3fsftF`Po_%ta*4LBR$ZWmSku@
z1DVwl-^`!cTs*ADfm8e+*0opbCBLp6xI^G0LT}YvoZ@G=c+e2~hJ}^4Kj$D@`-XKu
z;A3?hXKOLA9u@ecC`4?{8Tda6yzaxCpRH}f`ULQjEbS_8o?zilig>=ky(zCVTs&xq
zi<PS^<NR!Uwb({9b%)np(-TVVPE*?ttX}Qg7;4*UQ+*-d9-qBtJKMzOY-@?Nb%y<s
z{T}b0npLZ+R=GH>0kz{{mkpLGmrH@j$||kMaHrbgkF|ub>kyJVc9C3gZL+V@Z9iL+
z+R5hH6RPO)M`9H=FuoV3%f3cceOp}3&3CEmw{2=@_H5pysuT}<tu`J(Y&{GF5e1$$
zd$k+;@;dxs7sDeSZ-~+nTV=0gsmKy+gWcr|<qU2|r7fGDbMR|f1F4OPB2zZmtJC)u
zRnsmnmr%+ou9WO7If5g7>pZL>nQZ5j6kL;4u$C{k^o=QfI*}Ue2~E?dy^^C__jl~-
zY<KzeapAdb=h+QWy42JDEZ1c;pOH4ZU2JKiZDp>#IisDa6?>ItGn~EVPxo6@`9JbY
zWeY{quI7kqO9Z=3QD7@t6jj~OutoKHwl<@fL({?CZP8dTqQ*MZmiEqYFba-9r@Fhn
zbC<te4a7PlQPtnw!}gc92eG-fqNZvU3Q;yDwY4qWrurih|9<RPjA3hWYsB9XR0G`|
z9sA)$^Q3|^md4tC0Q&<|ZHa7PDr?elm2LY~_tCah6a<xTr&al0T52H_&Yw{$yp@%D
z7cNWIX{y*A3YV7(-QMBvNyRA`P-$av1S&%FV3(V6p&<rTErcnd>Oioy9s7ZyLrO2P
ztw}-BljNX1o+P-sEi9pwrxe6Jr5@SFP|+I5_^`+eY#~ZKN$UD7jwYAt+T^50jui!I
z$4r;%atj8xbBm%jdN<cQyz1ul>$kd^)n-S%*F~P1n;KFA0?|%2<PQhhgNo|BYm=kN
z(|{PFMqQ?Pw6AK21fi4$RP^Z9_Rf7SH0jtdjXRs`>KeVC`UbVKqOxL@l1c+phY}5U
zMX-moHJz!0RLdBcF7PN6EHtj}?&u7oe4s<1ByZTOZV^Skq1_*ivhq$8&aM8o_6*@!
z3V_1OIf@E`l1fLa?Y53!WOq=Fc1B{JJ+8gJ7!|3F%_@~D87omdvq|k>+w;>Sz;xNr
z7HR2j_ebj4u6=Z&we~gWX4Z6dM?>l^f6IMT`B@+fvGFuFAxK%fk!4i3n`yf{>SQpO
z9*R)3R*&hrXR1|6W>$%UIc=+Ysvh#ZVI^7cWlKD-n^|JOglhGyw)FTZ18~{*f$Zr>
zF9192t6Ms|_NzTT3o*%PIVgu@;4G@?@zKVfMJQVmbXpX3*Iva!ClAzk$o5GDmeSHf
z&Z)biQC?oDOx2{t9Zf`L)KgitAS1mjhH{ieo~t|Tl`ISqqfGhgj>^^9n@*Gle`bVG
z7}1cXYeS=7q^g<%q%w=qT!#W7^j%7Nk(2@QsxO4463AV3k22d?I~t_x;Yoo!al$Pl
zarR1;f0wYn9hHe%p_Z=w3o)@{a9<JK-x2fg0*ysD4M|(LGZw7a9qz8!)!o(}xVbH$
zu&0n8qACLW!|=&zEW%y(q9?#WIPF1&TO`=-ClA8b)gDtSSox`dwPJTC9%I2C{8I-D
zrcRc+ieN}|si6Rb$S3ZV_pRKAwC`yF8+oMwA%#WG-_h2B2zACNETsaaPpN=rJJ5k^
z-VXkBE4_!})g5zq+{kqhNv#5xM81d0=L%Tf#2S_KFW2QHJ($NiG0n*gUSrY>y{^)l
zob)f(?Iayy^H?;;Me|Jy>uYj7tqvH;mj31Xi==Yh4=l`x=*UNfUUO*;PWqSYG?MNW
zoHG8BPtt90r!_tKEZ6lUwF&?F_zRfryCyg3U#|N|D%TNZ_)>o|{bBee|MfzkTpyA&
zq|rZ3>FWLW03#MT-yzp+CH;VqD+z_AH8jnn^)J_(BxQ~o590GRyc2WtX}$mD9GB};
zl25Rw;xC^M>-@|06G=ZkDmgjT%S-6|r`EZi;QW}zNHhBM)A|ghU*?}&50jL>v(Org
z_5t?4!%yp9&euvx-;ijHKKw7~{LA$<Nn>)sTL_W)FJ*oW788E5e93h<_ZiNi=a<it
zej99Njeogb=ldi5{}6sDi86e-uDAU?{KE?~lla&A-znzhcMAVQI{jI=x77a&uu&Gt
z@Z~z;>@%E2wqsK7GTpKq^?^+rzFbe7KFj@=agzF%{v~}?=RY+sPYHt=;Ux7h{Ym<3
zxR71OU(Vl;2>+5#3ec%TxdaEoY?47x>HlUOF8yn%Ec;s4F%kZBF-NJNp{YF?AK89U
n{gQF#oc#Y`${3g==EJl`hAT0e56|ZRZ)Q2iA0(rodjJ0oae5Au

literal 0
HcmV?d00001

diff --git a/plaso/parsers/olecf.py b/plaso/parsers/olecf.py
index 0078a2d..671fa8d 100644
--- a/plaso/parsers/olecf.py
+++ b/plaso/parsers/olecf.py
@@ -9,6 +9,34 @@ from plaso.lib import specification
 from plaso.parsers import interface
 from plaso.parsers import manager
 
+import os
+import platform as pl
+
+from dfdatetime import semantic_time as dfdatetime_semantic_time
+from plaso.containers import time_events
+from plaso.containers import events
+from plaso.lib import definitions
+
+import base64 as b64
+import hashlib
+
+
+class WinThumbnailExecutionEventData(events.EventData):
+  """Windows Thumbnail event data.: IJB
+
+  Attributes:
+    thumbs_info (str): thumbnail image data (Base64 encoding)
+    thumbs_sha1 (str): thumbnail image data SHA1
+  """
+
+  DATA_TYPE = 'windows:thumbnail:execution'
+
+  def __init__(self):
+    """Initializes event data."""
+    super(WinThumbnailExecutionEventData, self).__init__(
+        data_type=self.DATA_TYPE)
+    self.thumbs_info = None
+    self.thumbs_sha1 = None
 
 class OLECFParser(interface.FileObjectParser):
   """Parses OLE Compound Files (OLECF)."""
@@ -20,6 +48,9 @@ class OLECFParser(interface.FileObjectParser):
   NAME = 'olecf'
   DESCRIPTION = 'Parser for OLE Compound Files (OLECF).'
 
+  IMG_DELIMITER = [24, 0, 0, 0, 3, 0, 0, 0]
+  HEX_MAP = {"0":0, "1":1, "2":2, "3":3, "4":4, "5":5, "6":6, "7":7, "8":8, "9":9, "a":10, "b":11, "c":12, "d":13, "e":14, "f":15}
+
   _plugin_classes = {}
 
   @classmethod
@@ -41,6 +72,238 @@ class OLECFParser(interface.FileObjectParser):
 
     return format_specification
 
+  def GetSHA1(self, bData):    
+    h=hashlib.sha1()
+    h.update(bData)
+    return h.hexdigest()
+
+  def OpenBF(self, file_name):
+    fn = file_name
+    fh = open(fn, 'rb')
+    return fh
+
+  def ReadB(self, fh, offset):
+    ss = ''
+    ss = fh.read(offset)
+    return ss
+
+  def ChkDelimiter(self, bData):
+    idx = 0
+    if not bData:
+      return False
+    for b in bData:
+      if int(ord(b)) != self.IMG_DELIMITER[idx]:
+        return False
+      idx += 1
+    return True
+
+  def GetSize(self, bData):
+    size = 0
+    idx = 0
+    for b in bData:
+      if len(hex(ord(b))) == 4:
+        tens = self.HEX_MAP[hex(ord(b))[3]]
+        size += tens*(16**idx)
+        idx += 1
+        units = self.HEX_MAP[hex(ord(b))[2]]
+        size += units*(16**idx)
+        idx += 1
+      else:
+        units = self.HEX_MAP[hex(ord(b))[2]]
+        size += units*(16**idx)
+        idx += 2
+    return size
+
+  def GetJpgSize(self, bData):
+    if self.ChkDelimiter(bData[-26:-18]) == True:
+      return self.GetSize(bData[-18:-10])
+    else:
+      return self.GetSize(bData[-6:-2])
+
+  def GetPngSize(self, bData):
+    if self.ChkDelimiter(bData[-28:-20]) == True:
+      return self.GetSize(bData[-20:-12])
+    else:
+      return self.GetSize(bData[-5:-9])
+
+  def ChkHeaderPattern(self, bData):
+    if ord(bData[79]) == 255 and ord(bData[78]) == 255 and ord(bData[77]) == 255 and ord(bData[76]) == 255 and ord(bData[127]) == 0 and ord(bData[126]) == 0 and ord(bData[125]) == 0 and ord(bData[124]) == 0 and ord(bData[207]) == 255 and ord(bData[206]) == 255 and ord(bData[205]) == 255 and ord(bData[204]) == 255 and ord(bData[255]) == 0 and ord(bData[254]) == 0 and ord(bData[253]) == 0 and ord(bData[252]) == 0:
+      return True
+    return False
+
+  def ChkFFPattern(self, bData):
+    for b in bData:
+      if ord(b) != 255:
+        return False
+    return True
+  
+  def ChkFFPattern2(self, bData):
+    if 255 == ord(bData[-1]) == ord(bData[-2]) == ord(bData[-3]) ==ord(bData[-4]) ==ord(bData[-5]) ==ord(bData[-6]) ==ord(bData[-7]) ==ord(bData[-8]) ==ord(bData[-9]) ==ord(bData[-10]) ==ord(bData[-11]) ==ord(bData[-12]) ==ord(bData[-13]) ==ord(bData[-14]) ==ord(bData[-15]) and 254 ==ord(bData[-16]):
+      return True
+    return False
+  
+  def ChkZero(self, bData):
+    for b in bData:
+      if ord(b) != 0:
+        return False
+    return True
+
+  def ChkHeader(self, bData):
+    for i in range(0, 15):
+      if ord(bData[i]) == 255 and ord(bData[i+1]) == 216:
+        return True
+    return False
+  
+  def ChkFooter(self, bData):
+    for i in range(0, 15):
+      if ord(bData[i]) == 255 and ord(bData[i+1]) == 217:
+        if ord(bData[i+2]) == 0:
+          return True
+    return False
+  
+  def FindHeader(self, bData):
+    data = []
+    for i in range(0, 511):
+      if ord(bData[i]) == 255 and ord(bData[i+1]) == 216: 
+        data.append('jpg')
+        data.append(self.GetJpgSize(bData[0:i+2]))
+        data.append(i)
+        return data
+    for i in range(0, 508):
+      if ord(bData[i]) == 137 and ord(bData[i+1]) == 80 and ord(bData[i+2]) == 78 and ord(bData[i+3]) == 71: 
+        data.append('png')
+        data.append(self.GetPngSize(bData[0:i+4]))
+        data.append(i)
+        return data
+  
+  def FindFooter(self, bData):
+    if ord(bData[-2]) == 255 and ord(bData[-1]) == 217: 
+        return True
+    if ord(bData[-4]) == 174 and ord(bData[-3]) == 66 and ord(bData[-2]) == 96 and ord(bData[-1]) == 130: 
+        return True
+    return False
+  
+  def GetNxtOff(self, cur):
+    nxt = 0
+    while True:
+      if nxt > cur:
+        return nxt
+      nxt += 512
+  
+  def GetPreOff(self, cur):
+    pre = self.GetNxtOff(cur) - 512
+    while True:
+      if pre > cur:
+        return pre - 16
+      pre += 16
+
+  def createFolder(self, dir):
+    try:
+      if not os.path.exists(dir):
+        os.makedirs(dir)
+    except OSError:
+      print("Error: create directory. " + dir)
+
+  def IJBParserRecords(self, file_object):
+    file_object.seek(0)
+
+    off = 0
+    imgOff = []
+    imgType = []
+    imgSize = []
+    findF = -1
+    while True:
+      off += 512 
+      nData = file_object.read(512)
+      if not nData:
+        break
+    
+      if self.ChkHeaderPattern(nData) == True:
+        continue
+      if self.ChkFFPattern(nData) == True:
+        continue
+    
+      ret = self.FindHeader(nData)
+      if not ret:
+        pass
+      elif ret[0] == 'jpg':
+        findF += 1
+        imgType.append(ret[0])
+        imgSize.append(ret[1])
+        imgOff.append((off + ret[2] - 512))
+      elif ret[0] == 'png':
+        findF += 1
+        imgType.append(ret[0])
+        imgSize.append(ret[1])
+        imgOff.append((off + ret[2] - 512))
+
+    if findF == -1:
+      return "FAIL"
+
+    file_object.seek(0)
+    idx = 1
+    thumb_ret = []
+    for i in range(0, findF+1):
+      file_object.seek(imgOff[i])
+      fData = file_object.read(imgSize[i])
+      if self.FindFooter(fData) == True:
+        thumb_ret.append(str(b64.b64encode(fData)))
+      else:
+        while True:
+          chkOff = self.GetNxtOff(imgOff[i])
+          file_object.seek(chkOff)
+          hData = file_object.read(512)
+          if self.ChkHeaderPattern(hData) == True or self.ChkFFPattern(hData) == True or self.ChkFFPattern2(hData) == True:
+            fData = fData[:chkOff-imgOff[i]]
+            fData += file_object.read(imgSize[i]-(chkOff-imgOff[i]))
+            if self.FindFooter(fData) == True:
+              thumb_ret.append(str(b64.b64encode(fData)))
+              break
+    
+          if (imgOff[i] + imgSize[i]) > imgOff[i+1]:
+            remainSize = imgSize[i] + 12 - (imgOff[i+1] - imgOff[i])
+            fData = fData[0:imgSize[i]-remainSize]
+            file_object.seek(imgOff[i+1] + imgSize[i+1])
+            for i in range(0,4):
+              rData = file_object.read(16)
+              while True:
+                if self.ChkZero(rData) == True:
+                  rData = file_object.read(16)
+                else: break
+            fData += file_object.read(remainSize)
+            if self.FindFooter(fData) == True:
+              thumb_ret.append(str(b64.b64encode(fData)))
+              break
+    
+          chkOff = self.GetPreOff(imgOff[i])
+          file_object.seek(chkOff)
+          preC = -1
+          while True:
+            lData = file_object.read(16)
+            if len(lData) < 16:
+              break
+    
+            if self.ChkHeader(lData) == True:
+              preC = 1
+            if self.ChkFooter(lData) == True:
+              if preC == 2:
+                end_pos = 0
+                for l in reversed(lData):
+                  end_pos -= 1
+                  if ord(l) == 217:
+                    break
+                lLen = 16+end_pos+1
+                fData = fData[:(16+end_pos)*-1] + lData[:lLen]
+                break
+              preC = 2
+            chkOff += 16
+          if self.FindFooter(fData) == True:
+            thumb_ret.append(str(b64.b64encode(fData)))
+            break
+      idx += 1
+
+    return thumb_ret
+
   def ParseFileObject(self, parser_mediator, file_object):
     """Parses an OLE Compound File (OLECF) file-like object.
 
@@ -49,58 +312,82 @@ class OLECFParser(interface.FileObjectParser):
           and other components, such as storage and dfvfs.
       file_object (dfvfs.FileIO): file-like object.
     """
-    olecf_file = pyolecf.file()
-    olecf_file.set_ascii_codepage(parser_mediator.codepage)
+    ijb_ret = self.IJBParserRecords(file_object)
+    if ijb_ret is not "FAIL":
+      date_time = dfdatetime_semantic_time.SemanticTime('Not set')
+      i = 0
+      for ret in ijb_ret:
+        if ret:
+          event_data = WinThumbnailExecutionEventData()
+          event_data.thumbs_info = ret
 
-    try:
-      olecf_file.open_file_object(file_object)
-    except IOError as exception:
-      parser_mediator.ProduceExtractionWarning(
-          'unable to open file with error: {0!s}'.format(exception))
-      return
+          self.createFolder('winthumbnail')
+          if pl.system() == 'Linux':
+            fName = 'winthumbnail//' + str(i) + '_' + self.GetSHA1(ret)[:4] +  '.jpg'
+          else:
+            fName = 'winthumbnail\\' + str(i) + '_' + self.GetSHA1(ret)[:4] +  '.jpg'
+          f=open(fName, 'wb')
+          f.write(b64.b64decode(ret))
+          f.close()
+          i += 1
 
-    root_item = olecf_file.root_item
-    if not root_item:
+          event_data.thumbs_sha1 = self.GetSHA1(ret)
+          event = time_events.DateTimeValuesEvent(date_time, definitions.TIME_DESCRIPTION_NOT_A_TIME)
+          parser_mediator.ProduceEventWithEventData(event, event_data)
       return
+    else:
+      olecf_file = pyolecf.file()
+      olecf_file.set_ascii_codepage(parser_mediator.codepage)
 
-    # Get a list of all items in the root item from the OLECF file.
-    item_names = [item.name for item in root_item.sub_items]
+      try:
+        olecf_file.open_file_object(file_object)
+      except IOError as exception:
+        parser_mediator.ProduceExtractionError(
+            'unable to open file with error: {0!s}'.format(exception))
+        return
 
-    # Compare the list of available plugin objects.
-    # We will try to use every plugin against the file (except
-    # the default plugin) and run it. Only if none of the plugins
-    # works will we use the default plugin.
+      root_item = olecf_file.root_item
+      if not root_item:
+        return
 
-    item_names = frozenset(item_names)
+      # Get a list of all items in the root item from the OLECF file.
+      item_names = [item.name for item in root_item.sub_items]
 
-    try:
-      for plugin in self._plugins:
-        if parser_mediator.abort:
-          break
+      # Compare the list of available plugin objects.
+      # We will try to use every plugin against the file (except
+      # the default plugin) and run it. Only if none of the plugins
+      # works will we use the default plugin.
+
+      item_names = frozenset(item_names)
+
+      try:
+        for plugin in self._plugins:
+          if parser_mediator.abort:
+            break
 
-        if not plugin.REQUIRED_ITEMS.issubset(item_names):
-          continue
+          if not plugin.REQUIRED_ITEMS.issubset(item_names):
+            continue
 
-        try:
-          plugin.UpdateChainAndProcess(parser_mediator, root_item=root_item)
+          try:
+            plugin.UpdateChainAndProcess(parser_mediator, root_item=root_item)
 
-        except Exception as exception:  # pylint: disable=broad-except
-          parser_mediator.ProduceExtractionWarning((
-              'plugin: {0:s} unable to parse OLECF file with error: '
-              '{1!s}').format(plugin.NAME, exception))
+          except Exception as exception:  # pylint: disable=broad-except
+            parser_mediator.ProduceExtractionError((
+                'plugin: {0:s} unable to parse OLECF file with error: '
+                '{1!s}').format(plugin.NAME, exception))
 
-      if self._default_plugin and not parser_mediator.abort:
-        try:
-          self._default_plugin.UpdateChainAndProcess(
-              parser_mediator, root_item=root_item)
+        if self._default_plugin and not parser_mediator.abort:
+          try:
+            self._default_plugin.UpdateChainAndProcess(
+                parser_mediator, root_item=root_item)
 
-        except Exception as exception:  # pylint: disable=broad-except
-          parser_mediator.ProduceExtractionWarning((
-              'plugin: {0:s} unable to parse OLECF file with error: '
-              '{1!s}').format(self._default_plugin.NAME, exception))
+          except Exception as exception:  # pylint: disable=broad-except
+            parser_mediator.ProduceExtractionError((
+                'plugin: {0:s} unable to parse OLECF file with error: '
+                '{1!s}').format(self._default_plugin.NAME, exception))
 
-    finally:
-      olecf_file.close()
+      finally:
+        olecf_file.close()
 
 
 manager.ParsersManager.RegisterParser(OLECFParser)
diff --git a/plaso/parsers/sqlite_plugins/__init__.py b/plaso/parsers/sqlite_plugins/__init__.py
index 2990818..469b90b 100644
--- a/plaso/parsers/sqlite_plugins/__init__.py
+++ b/plaso/parsers/sqlite_plugins/__init__.py
@@ -30,3 +30,4 @@ from plaso.parsers.sqlite_plugins import twitter_android
 from plaso.parsers.sqlite_plugins import twitter_ios
 from plaso.parsers.sqlite_plugins import windows_timeline
 from plaso.parsers.sqlite_plugins import zeitgeist
+from plaso.parsers.sqlite_plugins import wintimeline
\ No newline at end of file
diff --git a/plaso/parsers/sqlite_plugins/wintimeline.py b/plaso/parsers/sqlite_plugins/wintimeline.py
new file mode 100644
index 0000000..84b2c8a
--- /dev/null
+++ b/plaso/parsers/sqlite_plugins/wintimeline.py
@@ -0,0 +1,296 @@
+# -*- coding: utf-8 -*-
+"""Parser for the Windows 10 Timeline SQLite Database.
+
+The Windows Timeline is stored in SQLite database files named History.db
+
+Difference between wintimeline.py and windows_timeline.py
+windows_timeline.py: Parses UserEngaged Data.
+wintimeline.py: Parses data in active, update, deleted, ignore with time information
+"""
+from __future__ import unicode_literals
+
+from plaso.containers import events
+from plaso.containers import time_events
+from plaso.lib import definitions
+from plaso.parsers import sqlite
+from plaso.parsers.sqlite_plugins import interface
+
+import sys
+from dfdatetime import semantic_time as dfdatetime_semantic
+from dfdatetime import posix_time as dfdatetime_posix_time
+import datetime as dt
+import json
+
+class WindowsTimelineActivityEventData(events.EventData):
+  """Windows Timeline event data.
+
+  Attributes:
+      timeline (str): Combined string of data below
+                        Program
+                        Active Type  open, focus
+                        Status: active, deleted, update, ignore
+                        Time Information: start, end, expiration, lastmodified
+                        Program Description
+  """
+
+  DATA_TYPE = 'windows:timeline:activity'
+
+  def __init__(self):
+    """Initializes event data."""
+    super(WindowsTimelineActivityEventData, self).__init__(data_type=self.DATA_TYPE)
+    self.timeline_data = None
+
+class WindowsTimelineActivityOperationEventData(events.EventData):
+  """Windows Timeline event data.
+
+  Attributes:
+      timeline (str): Combined string of data below
+                        Program
+                        Active Type  open, focus
+                        Status: active, deleted, update, ignore
+                        Time Information: start, end, expiration, lastmodified
+                        Program Description
+  """
+
+  DATA_TYPE = 'windows:timeline:activityoperation'
+
+  def __init__(self):
+    """Initializes event data."""
+    super(WindowsTimelineActivityOperationEventData, self).__init__(data_type=self.DATA_TYPE)
+    self.timeline_data = None
+
+class WindowsTimelineActivityPackageIdEventData(events.EventData):
+  """Windows Timeline event data.
+
+  Attributes:
+      timeline (str): Combined string of data below
+                        FileNmae
+                        Platform
+                        Expiration Time
+  """
+
+  DATA_TYPE = 'windows:timeline:activitypackageid'
+
+  def __init__(self):
+    """Initializes event data."""
+    super(WindowsTimelineActivityPackageIdEventData, self).__init__(data_type=self.DATA_TYPE)
+    self.timeline_data = None
+
+class WindowsTimelinePluginSqlite(interface.SQLitePlugin):
+  """Parse Windows 10 Timeline Files
+
+  Windows 10 Timeline file is stored is a SQLite database file named ActivitiesCache.db
+  """
+
+  NAME = 'wintimeline'
+  DESCRIPTION = 'Parser for Windows 10 timeline SQLite database files.'
+
+  QUERIES = [
+    (('select AppId, ActivityType, ActivityStatus, LastModifiedTime, ExpirationTime, PayLoad, StartTime, EndTime, LastModifiedOnClient, CreatedInCloud from Activity'), 'ParseActivityRow'),
+    (('select OperationType, AppId, ActivityType, LastModifiedTime, ExpirationTime, CreatedTime, CreatedInCloud, StartTime, EndTime, LastModifiedOnClient, Payload from ActivityOperation where Id not in (select Id from Activity)'), 'ParseActivityOperationRow'),
+    (('select * from Activity_PackageId where Activity_PackageId.ActivityId not in (select Id from Activity) and Activity_PackageId.ActivityId not in (select Id from ActivityOperation)'), 'ParseActivityPackageIdRow')
+  ]
+
+  REQUIRED_TABLES = frozenset([
+    'Activity', 'ActivityOperation',
+    'Activity_PackageId'])
+
+  SCHEMAS = [{
+    'Activity': (
+      'CREATE TABLE [Activity]([Id] GUID PRIMARY KEY NOT NULL, [AppId] '
+      'TEXT NOT NULL, [PackageIdHash] TEXT, [AppActivityId] TEXT, '
+      '[ActivityType] INT NOT NULL, [ActivityStatus] INT NOT NULL, '
+      '[ParentActivityId] GUID, [Tag] TEXT, [Group] TEXT, [MatchId] TEXT, '
+      '[LastModifiedTime] DATETIME NOT NULL, [ExpirationTime] DATETIME, '
+      '[Payload] BLOB, [Priority] INT, [IsLocalOnly] INT, '
+      '[PlatformDeviceId] TEXT, [CreatedInCloud] DATETIME, [StartTime] '
+      'DATETIME, [EndTime] DATETIME, [LastModifiedOnClient] DATETIME, '
+      '[GroupAppActivityId] TEXT, [ClipboardPayload] BLOB, [EnterpriseId] '
+      'TEXT, [OriginalPayload] BLOB, [OriginalLastModifiedOnClient] '
+      'DATETIME, [ETag] INT NOT NULL)'),
+    'ActivityAssetCache': (
+      'CREATE TABLE [ActivityAssetCache]([ResourceId] INTEGER PRIMARY KEY '
+      'AUTOINCREMENT NOT NULL, [AppId] TEXT NOT NULL, [AssetHash] TEXT '
+      'NOT NULL, [TimeToLive] DATETIME NOT NULL, [AssetUri] TEXT, '
+      '[AssetId] TEXT, [AssetKey] TEXT, [Contents] BLOB)'),
+    'ActivityOperation': (
+      'CREATE TABLE [ActivityOperation]([OperationOrder] INTEGER PRIMARY '
+      'KEY ASC NOT NULL, [Id] GUID NOT NULL, [OperationType] INT NOT '
+      'NULL, [AppId] TEXT NOT NULL, [PackageIdHash] TEXT, [AppActivityId] '
+      'TEXT, [ActivityType] INT NOT NULL, [ParentActivityId] GUID, [Tag] '
+      'TEXT, [Group] TEXT, [MatchId] TEXT, [LastModifiedTime] DATETIME '
+      'NOT NULL, [ExpirationTime] DATETIME, [Payload] BLOB, [Priority] '
+      'INT, [CreatedTime] DATETIME, [Attachments] TEXT, '
+      '[PlatformDeviceId] TEXT, [CreatedInCloud] DATETIME, [StartTime] '
+      'DATETIME NOT NULL, [EndTime] DATETIME, [LastModifiedOnClient] '
+      'DATETIME NOT NULL, [CorrelationVector] TEXT, [GroupAppActivityId] '
+      'TEXT, [ClipboardPayload] BLOB, [EnterpriseId] TEXT, '
+      '[OriginalPayload] BLOB, [OriginalLastModifiedOnClient] DATETIME, '
+      '[ETag] INT NOT NULL)'),
+    'Activity_PackageId': (
+      'CREATE TABLE [Activity_PackageId]([ActivityId] GUID NOT NULL, '
+      '[Platform] TEXT NOT NULL, [PackageName] TEXT NOT NULL, '
+      '[ExpirationTime] DATETIME NOT NULL)'),
+    'AppSettings': (
+      'CREATE TABLE [AppSettings]([AppId] TEXT PRIMARY KEY NOT NULL, '
+      '[SettingsPropertyBag] BLOB, [AppTitle] TEXT, [Logo4141] TEXT)'),
+    'ManualSequence': (
+      'CREATE TABLE [ManualSequence]([Key] TEXT PRIMARY KEY NOT NULL, '
+      '[Value] INT NOT NULL)'),
+    'Metadata': (
+      'CREATE TABLE [Metadata]([Key] TEXT PRIMARY KEY NOT NULL, [Value] '
+      'TEXT)')}]
+
+  def ParseActivityRow(self, parser_mediator, query, row, **unused_kwargs):
+    """Parses a activity row from database
+
+      Args
+      parser_mediator (ParserMediator): mediates interactions between parsers
+          and other components, such as storage and dfvfs.
+      query (str): query that created the row.
+      row (sqlite3.Row): row
+    """
+    query_hash = hash(query)
+    event_data = WindowsTimelineActivityEventData()
+
+    appId = self._GetRowValue(query_hash, row, "AppId").split(",")
+    actType = self._GetRowValue(query_hash, row, "ActivityType")
+    actStatus = self._GetRowValue(query_hash, row, "ActivityStatus")
+
+    lmTime = dt.datetime.fromtimestamp(self._GetRowValue(query_hash, row, "LastModifiedTime"))
+    expTime = dt.datetime.fromtimestamp(self._GetRowValue(query_hash, row, "ExpirationTime"))
+    lmcliTime = dt.datetime.fromtimestamp(self._GetRowValue(query_hash, row, "LastModifiedOnClient"))
+    if self._GetRowValue(query_hash, row, "CreatedInCloud") == 0:
+      creTime = "No Create In Cloud"
+    else:
+      creTime = dt.datetime.fromtimestamp(self._GetRowValue(query_hash, row, "CreatedInCloud"))
+    if self._GetRowValue(query_hash, row, "EndTime") == 0:
+      endTime = "None"
+    else:
+      endTime = dt.datetime.fromtimestamp(self._GetRowValue(query_hash, row, "EndTime"))
+    staTime = str(self._GetRowValue(query_hash, row, "StartTime"))
+
+    if actType == 5: actType = "Open App/File/Url"
+    elif actType == 6: actType = "App In Focus"
+    else: actType = "Unknown"
+
+    if actStatus == 1: actStatus = "Active"
+    elif actStatus == 2: actStatus = "Update"
+    elif actStatus == 3: actStatus = "Deleted"
+    elif actStatus == 4: actStatus = "Ignore"
+    else: actStatus = "Unknown"
+
+    payload_bytes = bytes(self._GetRowValue(query_hash, row, "Payload"))
+    payload_string = payload_bytes.decode('utf-8')
+    payload = json.loads(payload_string)
+
+    data = "[Program]: " + appId[0].split('":"')[1][:-1]
+    data += " [Active Type]: " + actType
+    data += " [Active Status]: " + actStatus
+    data += " [LastModifiedTime]: " + str(lmTime)
+    data += " [EndTime]: " + str(endTime)
+    data += " [ExpirationTime]: " + str(expTime)
+    data += " [CreateInCloud]: " + str(creTime)
+    data += " [LastModifiedOnClientTime]: " + str(lmcliTime)
+
+    if 'description' in payload:
+      data += " [appDisplayName]: " + payload['appDisplayName']
+      data += " [content]: " + payload['contentUri']
+      data += " [displayText]: " + payload['displayText']
+      data += " [description]: " + payload['description']
+
+    event_data.timeline_data = data
+    event_data.query = query
+
+    date_time = dfdatetime_posix_time.PosixTime(timestamp=staTime)
+    event = time_events.DateTimeValuesEvent(date_time, definitions.TIME_DESCRIPTION_START)
+    parser_mediator.ProduceEventWithEventData(event, event_data)
+
+  def ParseActivityOperationRow(self, parser_mediator, query, row, **unused_kwargs):
+    """Parses a activity operation row from database
+
+       Args
+       parser_mediator (ParserMediator): mediates interactions between parsers
+          and other components, such as storage and dfvfs.
+       query (str): query that created the row.
+       row (sqlite3.Row): row
+    """
+    query_hash = hash(query)
+    event_data = WindowsTimelineActivityOperationEventData()
+
+    appId = self._GetRowValue(query_hash, row, "AppId").split(",")
+    operType = self._GetRowValue(query_hash, row, "OperationType")
+    if operType == 1: operType = "Active"
+    elif operType == 2: operType = "Updated"
+    elif operType == 3: operType = "Deleted"
+    elif operType == 4: operType = "Ignore"
+    else: operType = "Unknown"
+
+    actType = self._GetRowValue(query_hash, row, "ActivityType")
+    if actType == 5: actType = "Open App/File/Url"
+    elif actType == 6: actType = "App In Focus"
+    else: actType = "Unknown"
+
+    lmTime = dt.datetime.fromtimestamp(self._GetRowValue(query_hash, row, "LastModifiedTime"))
+    expTime = dt.datetime.fromtimestamp(self._GetRowValue(query_hash, row, "ExpirationTime"))
+    lmcliTime = dt.datetime.fromtimestamp(self._GetRowValue(query_hash, row, "LastModifiedOnClient"))
+    creaTime = dt.datetime.fromtimestamp(self._GetRowValue(query_hash, row, "CreatedTime"))
+    if self._GetRowValue(query_hash, row, "CreatedInCloud") == 0:
+      creTime = "No Create In Cloud"
+    else:
+      creTime = dt.datetime.fromtimestamp(self._GetRowValue(query_hash, row, "CreatedInCloud"))
+    if self._GetRowValue(query_hash, row, "EndTime") == 0:
+      endTime = "None"
+    else:
+      endTime = dt.datetime.fromtimestamp(self._GetRowValue(query_hash, row, "EndTime"))
+    staTime = str(self._GetRowValue(query_hash, row, "StartTime"))
+
+    payload_bytes = bytes(self._GetRowValue(query_hash, row, "Payload"))
+    payload_string = payload_bytes.decode('utf-8')
+    payload = json.loads(payload_string)
+
+    data = "[Program]: " + appId[0].split('":"')[1][:-1]
+    data += " [Active Type]: " + operType
+    data += " [Active Status]: " + actType
+    data += " [LastModifiedTime]: " + str(lmTime)
+    data += " [CreateTime]: " + str(creaTime)
+    data += " [EndTime]: " + str(endTime)
+    data += " [ExpirationTime]: " + str(expTime)
+    data += " [CreateInCloud]: " + str(creTime)
+    data += " [LastModifiedOnClientTime]: " + str(lmcliTime)
+
+    if 'description' in payload:
+      data += " [appDisplayName]: " + payload['appDisplayName']
+      data += " [content]: " + payload['contentUri']
+      data += " [displayText]: " + payload['displayText']
+      data += " [description]: " + payload['description']
+
+    event_data.timeline_data = data
+    event_data.query = query
+
+    date_time = dfdatetime_posix_time.PosixTime(timestamp=staTime)
+    event = time_events.DateTimeValuesEvent(date_time, definitions.TIME_DESCRIPTION_START)
+    parser_mediator.ProduceEventWithEventData(event, event_data)
+
+  def ParseActivityPackageIdRow(self, parser_mediator, query, row, **unused_kwargs):
+    """Parses a activity packageid row from database
+
+       Args
+       parser_mediator (ParserMediator): mediates interactions between parsers
+          and other components, such as storage and dfvfs.
+       query (str): query that created the row.
+       row (sqlite3.Row): row
+    """
+    query_hash = hash(query)
+    event_data = WindowsTimelineActivityPackageIdEventData()
+
+    data = "FileName: " + self._GetRowValue(query_hash, row, 'PackageName')
+    data += " Platform: " + self._GetRowValue(query_hash, row, 'Platform')
+    data += " ExpirationTime: " + str(self._GetRowValue(query_hash, row, 'ExpirationTime'))
+    event_data.timeline_data = data
+
+    date_time = dfdatetime_semantic.SemanticTime('Not set')
+    event = time_events.DateTimeValuesEvent(date_time, definitions.TIME_DESCRIPTION_NOT_A_TIME)
+    parser_mediator.ProduceEventWithEventData(event, event_data)
+
+sqlite.SQLiteParser.RegisterPlugin(WindowsTimelinePluginSqlite)
diff --git a/plaso/parsers/winiconcache.py b/plaso/parsers/winiconcache.py
new file mode 100644
index 0000000..56cc7ab
--- /dev/null
+++ b/plaso/parsers/winiconcache.py
@@ -0,0 +1,208 @@
+# -*- coding: utf-8 -*-
+"""Parser for Windows Iconcache files."""
+
+from __future__ import unicode_literals
+
+from dfdatetime import semantic_time as dfdatetime_semantic
+
+from plaso.containers import events
+from plaso.containers import time_events
+from plaso.lib import definitions
+from plaso.lib import specification
+from plaso.parsers import interface
+from plaso.parsers import manager
+
+import os
+import sys
+import platform as pl
+
+import hashlib
+import base64
+
+'''
+reload(sys)
+sys.setdefaultencoding('utf8')
+'''
+
+class WinIconcacheExecutionEventData(events.EventData):
+  """Windows Iconcache event data.
+
+  Attributes:
+      icon_info (str): Combined string of data below
+          icon number
+          name
+          resolution
+          Data
+          data sha1
+  """
+
+  DATA_TYPE = 'windows:iconcache:execution'
+
+  def __init__(self):
+    """Initializes event data."""
+    super(WinIconcacheExecutionEventData, self).__init__(
+        data_type=self.DATA_TYPE)
+    self.icon_info = None
+
+class WinIconcacheParser(interface.FileObjectParser):
+  """A parser for Windows Iconcache files."""
+
+  _INITIAL_FILE_OFFSET = None
+
+  NAME = 'iconcache'
+  DESCRIPTION = 'Parser for Windows Iconcache files.'
+
+  HEX_MAP = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'a':10, 'b':11, 'c':12, 'd':13, 'e':14, 'f':15}
+
+  @classmethod
+  def GetFormatSpecification(cls):
+    """Retrieves the format specification.
+
+    Returns:
+      FormatSpecification: format specification.
+    """
+    format_specification = specification.FormatSpecification(cls.NAME)
+    format_specification.AddNewSignature(b'CMMM', offset=0)
+    return format_specification
+
+  def GetEntryOff(self, bData):
+    off = 0
+    for b in bData:
+      if b != b'\x00':
+        off += self.hex2int(b)
+    return off
+
+  def hex2int(self, b):
+    cnt = 0
+    for i in range(0x00, 0xff):
+      if chr(i) == b:
+        break
+      cnt += 1
+    return (cnt)
+
+  def GetSize(self, bData):
+    size = 0
+    idx = 0
+    for b in bData:
+      if len(hex(self.hex2int(b))) == 4:
+        tens = self.HEX_MAP[hex(self.hex2int(b))[3]]
+        size += tens*(16**idx)
+        idx += 1
+        units = self.HEX_MAP[hex(self.hex2int(b))[2]]
+        size += units*(16**idx)
+        idx += 1
+      else:
+        units = self.HEX_MAP[hex(self.hex2int(b))[2]]
+        size += units*(16**idx)
+        idx += 1
+    return size
+
+  def GetName(self, bData):
+    name = ''
+    for b in bData:
+      if b != b'\x00':
+        name += str(self.hex2int(b))
+    return name
+
+  def GetSHA1(self, bData):
+    h=hashlib.sha1()
+    h.update(bData[82:])
+    return h.hexdigest()
+
+  def GetIconFormat(self, bData):
+    fmat = ''
+    for b in bData:
+      fmat += str(self.hex2int(b))
+    if fmat == "BM":
+      return "BMP"
+    else:
+      return "PNG"
+
+  def CheckEndData(self, bData):
+    for b in bData:
+      if b != b'\x00':
+        return True
+    return False
+
+  def createFolder(self, dir):
+    try:
+      if not os.path.exists(dir):
+        os.makedirs(dir)
+    except OSError:
+      print('Error: create directory. ' + dir)
+
+  def ParseRecords(self, file_object):
+    self.createFolder('winiconcache')
+    icon_ret_split = []
+    off = 0
+    file_object.seek(0)
+
+    off += 24
+    bData = file_object.read(24)
+    fEntry = bData[16:20]
+
+    fEn = self.GetEntryOff(fEntry)
+    if off == fEn:
+      pass
+    elif off < fEn:
+      file_object.read(fEn-off)
+      off = fEn
+    elif off > fEn:
+      pass
+
+    bIdx = 1
+    while True:
+      off += 8
+      bData = file_object.read(8)
+      eSize = self.GetSize(bData[4:8])
+
+      eData = file_object.read(32)
+      if self.CheckEndData(eData) == False:
+        break
+
+      off += (eSize - 40)
+      eData += file_object.read(eSize-40)
+      iResX = self.GetSize(eData[20:24])
+      iResY = self.GetSize(eData[24:28])
+      iName = self.GetName(eData[48:80])
+      iFmat = self.GetIconFormat(eData[82:84])
+      iData = eData[82:]
+
+      headBuf = bytes(iData[:2])
+      if headBuf != b'BM':
+        iData = b'BM' + eData[82:]
+
+      if pl.system() == 'Linux': 
+        fName = 'winiconcache//' + iName + '_' + self.GetSHA1(eData[82:])[:4] + '.jpg'
+      else:
+        fName = 'winiconcache\\' + iName + '_' + self.GetSHA1(eData[82:])[:4] + '.jpg'
+
+      f=open(fName, 'wb')
+      f.write(iData)
+      f.close()
+
+      icon_data = "iNo: " + str(bIdx) + " Name: " + iName + " ResXY: " + (str(iResX) + "x" + str(iResY)) + " ImgType: " + iFmat + " Data: " + str(base64.b64encode(iData)) + " SHA1: " + self.GetSHA1(eData[82:])
+      icon_ret_split.append(icon_data)
+      bIdx += 1
+
+    return icon_ret_split
+
+  def ParseFileObject(self, parser_mediator, file_object):
+    """Parses a Windows Iconcache file-like object.
+
+    Args:
+      parser_mediator (ParserMediator): mediates interactions between parsers
+          and other components, such as storage and dfvfs.
+      file_object (dfvfs.FileIO): file-like object.
+    """
+    event_data = WinIconcacheExecutionEventData()
+    date_time = dfdatetime_semantic.SemanticTime('Not set')
+
+    icon_ret_split = self.ParseRecords(file_object)
+
+    for ret in icon_ret_split:
+      event_data.icon_info = ret
+      event = time_events.DateTimeValuesEvent(date_time, definitions.TIME_DESCRIPTION_NOT_A_TIME)
+      parser_mediator.ProduceEventWithEventData(event, event_data)
+
+manager.ParsersManager.RegisterParser(WinIconcacheParser)
diff --git a/plaso/parsers/winiconcache_name.py b/plaso/parsers/winiconcache_name.py
new file mode 100644
index 0000000..bf98140
--- /dev/null
+++ b/plaso/parsers/winiconcache_name.py
@@ -0,0 +1,120 @@
+# -*- coding: utf-8 -*-
+"""Parser for Windows IconCache.db files."""
+
+from __future__ import unicode_literals
+
+from dfdatetime import semantic_time as dfdatetime_semantic
+
+from plaso.containers import events
+from plaso.containers import time_events
+from plaso.lib import definitions
+from plaso.lib import specification
+from plaso.parsers import interface
+from plaso.parsers import manager
+
+class WinIconcacheNameExecutionEventData(events.EventData):
+  """Windows IconCache.db event data.
+
+  Attributes:
+      icon_name (str): icon file name
+  """
+
+  DATA_TYPE = 'windows:iconcache:name:execution'
+
+  def __init__(self):
+    """Initializes event data."""
+    super(WinIconcacheNameExecutionEventData, self).__init__(
+        data_type=self.DATA_TYPE)
+    self.icon_info = None
+
+class WinIconcacheNameParser(interface.FileObjectParser):
+  """A parser for Windows IconCache.db: name files."""
+
+  _INITIAL_FILE_OFFSET = None
+
+  NAME = 'iconcache_name'
+  DESCRIPTION = 'Parser for Windows IconCache.db files.'
+
+  _LEN_SIG = [ b'\x02', b'\x22', b'\42' ]
+  _LEN_2_SIG = [ b'\x01', b'\x10', b'\x41', b'\x81', b'\x91', b'\xa1', b'\xc1']
+  _HEX_MAP = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'a':10, 'b':11, 'c':12, 'd':13, 'e':14, 'f':15}
+
+  @classmethod
+  def GetFormatSpecification(cls):
+    """Retrieves the format specification.
+
+    Returns:
+      FormatSpecification: format specification.
+    """
+    format_specification = specification.FormatSpecification(cls.NAME)
+    format_specification.AddNewSignature(b'\x57\x69\x6e\x34', offset=4)
+    return format_specification
+
+  def _openBF(self, file_name):
+    fn = file_name
+    fh = open(fn, 'rb')
+    return fh
+
+  def _readB(self, fh, offset):
+    ss = ''
+    ss = fh.read(offset)
+    if ss == '': return ''
+    return ss
+
+  def _closeBF(self, fh):
+    fh.close()
+
+  def _calculLen(self, bData):
+    strLen = str(hex(int(ord(bData[1]))))[2:] + str(hex(int(ord(bData[0]))))[2:]
+    cnt = 0
+    sLen = 0
+    for c in reversed(strLen):
+      sLen += self._HEX_MAP[c] * (16**cnt)
+      cnt += 1
+    return sLen
+
+  def _getName(self, bData):
+    data = ''
+    for b in bData:
+      if b != b'\x00':
+        data += b
+    return data
+
+  def ParseFileObject(self, parser_mediator, file_object):
+    """Parses a Windows Iconcache file-like object.
+
+    Args:
+      parser_mediator (ParserMediator): mediates interactions between parsers
+          and other components, such as storage and dfvfs.
+      file_object (dfvfs.FileIO): file-like object.
+    """
+    event_data = WinIconcacheNameExecutionEventData()
+    date_time = dfdatetime_semantic.SemanticTime('Not set')
+
+    file_object.seek(0)
+
+    #HEADER - unused
+    data = file_object.read(64)
+    #CNT
+    data = file_object.read(2)
+    #UnknownData
+    data = file_object.read(6)
+    data = file_object.read(4)
+
+    #DATA
+    while True:
+      if data == '': break
+      data = file_object.read(4)
+      sign = data[:2]
+      sLen = self._calculLen(data[2:])
+      if sign[0] in self._LEN_2_SIG:
+        sLen *= 2
+      data = file_object.read(sLen)
+
+      if sign[0] in self._LEN_2_SIG:
+        event_data.icon_info = self._getName(data)
+        event = time_events.DateTimeValuesEvent(date_time, definitions.TIME_DESCRIPTION_NOT_A_TIME)
+        parser_mediator.ProduceEventWithEventData(event, event_data)
+      file_object.read(4)
+
+manager.ParsersManager.RegisterParser(WinIconcacheNameParser)
diff --git a/plaso/parsers/winsuperfetch.py b/plaso/parsers/winsuperfetch.py
new file mode 100644
index 0000000..c6303ce
--- /dev/null
+++ b/plaso/parsers/winsuperfetch.py
@@ -0,0 +1,189 @@
+# -*- coding: utf-8 -*-
+"""Parser for Windows Superfetch files."""
+
+from __future__ import unicode_literals
+
+from dfdatetime import filetime as dfdatetime_filetime
+
+from plaso.containers import events
+from plaso.containers import time_events
+from plaso.lib import definitions
+from plaso.lib import specification
+from plaso.parsers import interface
+from plaso.parsers import manager
+
+import time
+import os
+import sys
+import datetime as dt
+import compressors as cm
+
+#'''
+reload(sys)
+sys.setdefaultencoding('utf8')
+#'''
+
+class WinSuperfetchExecutionEventData(events.EventData):
+  """Windows Superfetch event data.
+
+  Attributes:
+  """
+
+  DATA_TYPE = 'windows:superfetch:execution'
+
+  def __init__(self):
+    """Initializes event data."""
+    super(WinSuperfetchExecutionEventData, self).__init__(
+        data_type=self.DATA_TYPE)
+    self.file_info = None
+    self.superfetch_info = None
+
+class WinSuperfetchParser(interface.FileObjectParser):
+  """A parser for Windows Superfetch files."""
+
+  _INITIAL_FILE_OFFSET = None
+
+  NAME = 'superfetch'
+  DESCRIPTION = 'Parser for Windows Superfetch files.'
+  HEX_MAP = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'a':10, 'b':11, 'c':12, 'd':13, 'e':14, 'f':15}
+
+  @classmethod
+  def GetFormatSpecification(cls):
+    """Retrieves the format specification.
+
+    Returns:
+      FormatSpecification: format specification.
+    """
+    format_specification = specification.FormatSpecification(cls.NAME)
+    format_specification.AddNewSignature(b'MEM\x30', offset=0)
+    return format_specification
+
+  def unix2ldap(self, unix):
+    converter = ((1970 - 1601) * 365 - 3 + round((1970 - 1601) / 4)) * 86400
+    epoch = round(converter + unix)
+    return epoch * 10000000
+
+  def PrintStr2Timestamp(self, str):
+    if len(str) > 19:
+      date = str[0:10] + ' ' + str[-8:-1]
+      timestamp = time.mktime(dt.datetime.strptime(date, '%Y-%m-%d %H:%M:%S').timetuple())
+      return timestamp
+    else:
+      return 0
+
+  def hex2int(self, b):
+    cnt = 0
+    for i in range(0x00, 0xff):
+      if chr(i) == b:
+        break
+      cnt += 1
+    return (cnt)
+
+  def GetSizeInt(self, nData):
+    size = 0
+    idx = 0
+    for n in nData:
+      if len(hex(n)) == 4:
+        tens = self.HEX_MAP[hex(n)[3]]
+        size += tens * (16**idx)
+        idx += 1
+        units = self.HEX_MAP[hex(n)[2]]
+        size += units * (16**idx)
+        idx += 1
+      else:
+        units = self.HEX_MAP[hex(n)[2]]
+        size += units * (16**idx)
+        idx += 2
+    return size
+
+  def ParseRecords(self, file_object):
+    superfetch_info = {}
+    file_info = [] 
+
+    file_object.seek(0)
+    input_data = file_object.read()
+
+    len_unCompress = cm.GetSize(input_data[4:8])
+    len_Compress = cm.GetSize(input_data[8:12])
+    compress_data = input_data[12:len_Compress+12]
+    
+    out_buffer = bytearray(len_unCompress)
+    ret = cm.XpressHuffman['OpenSrc'].Decompress(compress_data, out_buffer)
+
+    out_buffer = out_buffer[244:]
+    fName = ''
+    for b in out_buffer:
+      if 0 == b:
+        break
+      fName += chr(b)
+
+    out_buffer = out_buffer[60:]
+    timestamp = cm.ldap2unix(self.GetSizeInt(out_buffer[0:8]))
+    volId = '0000%X%X-0000%X%X' % (out_buffer[11], out_buffer[10], out_buffer[9], out_buffer[8])
+    dNmLen = self.GetSizeInt(out_buffer[20:22])
+
+    out_buffer = out_buffer[32:]
+    volName = ''
+    for i in range(0, dNmLen*2):
+      if out_buffer[i] != 0:
+        volName += chr(out_buffer[i])
+
+    superfetch_info['Name']=fName
+    superfetch_info['Volumn Name'] = volName
+    superfetch_info['Volumne ID'] = volId
+    superfetch_info['Time'] = timestamp
+
+    out_buffer = out_buffer[dNmLen*2:]
+    bufSize = len(out_buffer)
+    idx = 0
+    cnt = 0
+    while idx < bufSize:
+      if out_buffer[idx] == 92 and out_buffer[idx+1] == 0 and out_buffer[idx+2] != 0 and out_buffer[idx+3] == 0:
+        flen = self.GetSizeInt(out_buffer[idx-24:idx-20])/4
+        if cm.chkFile(flen, out_buffer[idx:]) == False: 
+          idx += 1
+          continue
+            
+        fName=''
+        for i in range(0, flen*2):
+          if out_buffer[i+idx] != 0:
+            fName += chr(out_buffer[i+idx])
+        file_info.append(fName)
+        idx += flen*2
+        cnt += 1
+      else:
+        idx += 1
+
+    return superfetch_info, file_info
+
+  def ParseFileObject(self, parser_mediator, file_object):
+    """Parses a Windows Superfetch file-like object.
+
+    Args:
+      parser_mediator (ParserMediator): mediates interactions between parsers
+          and other components, such as storage and dfvfs.
+      file_object (dfvfs.FileIO): file-like object.
+    """
+    date_time = dfdatetime_filetime.Filetime(timestamp=int(time.time()))
+
+    superfet_info, file_info = self.ParseRecords(file_object)
+    super_ret =''
+
+    for key in superfet_info.keys():
+      super_ret += key + ":"
+      if key == "Time":
+        super_ret += str(dt.datetime.fromtimestamp(superfet_info[key])) + " " 
+      else:
+        super_ret += superfet_info[key] + " " 
+
+    event_data = WinSuperfetchExecutionEventData()
+    ldap_time = self.unix2ldap(superfet_info['Time'])
+    date_time = dfdatetime_filetime.Filetime(timestamp=int(ldap_time))
+    desc = definitions.TIME_DESCRIPTION_CREATION
+    for ret in file_info:
+      event_data.superfetch_info = super_ret
+      event_data.file_info = ret
+      event = time_events.DateTimeValuesEvent(date_time, desc)
+      parser_mediator.ProduceEventWithEventData(event, event_data)
+
+manager.ParsersManager.RegisterParser(WinSuperfetchParser)
diff --git a/setup.py b/setup.py
index add7bc5..bfc70ab 100755
--- a/setup.py
+++ b/setup.py
@@ -280,7 +280,7 @@ setup(
     },
     include_package_data=True,
     package_data={
-        'plaso.parsers': ['*.yaml'],
+        'plaso.parsers': ['*.yaml', '*.so', '*.dll'],
         'plaso.parsers.esedb_plugins': ['*.yaml'],
         'plaso.parsers.olecf_plugins': ['*.yaml'],
         'plaso.parsers.plist_plugins': ['*.yaml'],
